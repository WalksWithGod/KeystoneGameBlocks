float4x4 World : WORLD;	
float4x4 View : VIEW;
float4x4 Projection : PROJECTION;
float3 LightPosition :LIGHTPOINT0_POSITION;
float3 CameraPosition : CAMERAPOS; //CAMERAPOSITION;
float scale2 = 4.068016E+13;// radius of planet squared 

// distance where added alpha starts to be used to make 
// rings invisible as you get close or inside them
float BeginCameraFade = 5000000; 

texture ringtex;
sampler RingSampler = sampler_state 
{
    	texture = <ringtex>;
	MagFilter = Anisotropic;
	MinFilter = Anisotropic;
	MipFilter = Anisotropic;
    	//magfilter	= LINEAR; 
	//minfilter	= LINEAR; 
	//mipfilter	= LINEAR; 
	AddressU	= CLAMP;  
	AddressV	= CLAMP;
};

texture noisetex;
sampler NoiseSampler = sampler_state 
{
    	texture = <noisetex>;
	MagFilter = Anisotropic;
	MinFilter = Anisotropic;
	MipFilter = Anisotropic;
    	//magfilter	= LINEAR; 
    	//minfilter	= LINEAR; 
    	//mipfilter	= LINEAR; 
	AddressU	= CLAMP;  
	AddressV	= CLAMP;
};


struct VertexShaderInput
{
    float4 Position : POSITION0;
    float2 TexCoord : TEXCOORD0;
    
};

struct VertexShaderOutput
{
    float4 Position : POSITION0;
	float2 TexCoord : TEXCOORD0;
	float3 World    : TEXCOORD1; 
	
};

VertexShaderOutput VertexShaderFunction(VertexShaderInput input)
{
    VertexShaderOutput output;

    float4 worldPosition = mul(input.Position, World);
    float4 viewPosition = mul(worldPosition, View);
    output.Position = mul(viewPosition, Projection);   
    output.TexCoord= input.TexCoord;
    output.World=  worldPosition.xyz;

    return output;
}

float4 PixelShaderFunction(VertexShaderOutput input) : COLOR0
{
	float4 noise=float4(0,0,0,0);
	
	// texture the pixel
	float2 tc = input.TexCoord;
	tc =(tc-0.5)/2;
	tc.x=length(tc)*4;
	tc.y=0;
    	float4 result = tex2D(RingSampler,tc);
	// this hack computes alpha based on the rgb values of the lookup texture when that texture has no built in alpha set
	// so this should be a param in the shader where we either use the texture alpha or we use the grayscale
	// for color textures we should always enforce that .w be set in the png/dds/tga 
	result.w = (1.0 - result.x) / 1; 
	
	float3 distance = CameraPosition-input.World;
	float blend=length(distance);


	if (blend<BeginCameraFade)
	{
			
		// the amount of noise blending to do.  0.0 is pure noise.  1.0 = pure diffuse.
		blend/=BeginCameraFade; //blend = .7; 
		 
		noise=(tex2D(NoiseSampler,input.TexCoord));

		// increase the alpha the closer the camera is to this pixel
		result.w*= blend;
	}
	else
	{
		blend=1;
	}
	


	// test if the planet sphere intersects the light ray and thus might cast a shadow
	float3 center = float3(World[3][0],World[3][1],World[3][2]);
	float3 dst = center - LightPosition;
    	float3 Ray = LightPosition - input.World ;
    	float lr = length(Ray);
    	float ld = length(dst);
    	Ray=normalize(Ray);
	
	float B = dot(dst,Ray);
	float C = dot(dst, dst) - scale2;
	float D = B*B - C;
	
	if (D > 0)
	{
		// it does intersect
		if (lr > ld)
		{
			// only cast shadow on the back side of the sphere, not the front
			// todo: only cash shadow where the alpha suggests it's a ring and not a gap in the ring
			result.xyz=0;
		}
	}
	
	result.xyz = lerp(noise.xyz,result.xyz,blend);
    return result;
}

technique Technique1
{
    pass Pass1
    {
	// note: its best to not include state changes in the technique since your app code should do that
	// and then you can reduce state changes. This seems to be the concensus of gamedev.net folks. 
	// All we need to do is set  mesh.BlendingMode = CONST_TV_BLENDINGMODE.TV_BLEND_ALPHA and it works 
	// as well as setting renderstates directly in the shader.
	// note: do not uncomment.  
	//AlphaBlendEnable=true;
	//SrcBlend=srcalpha;
	//DestBlend=invsrcColor;
	

        VertexShader = compile vs_2_0 VertexShaderFunction();
        PixelShader = compile ps_2_0 PixelShaderFunction();
    }
}
