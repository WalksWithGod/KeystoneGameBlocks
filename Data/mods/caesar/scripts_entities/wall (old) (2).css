using System;
using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class Wall : BaseScript
{
	public static void Initialize(string domainObjectID)
	{
		// create the custom properties	
		string category = "public properties";
		Settings.PropertySpec[] properties = new Settings.PropertySpec[6];
		properties[0] = new PropertySpec("description", typeof(string).Name, category, "wall");
		properties[1] = new PropertySpec("weight", typeof(double).Name, category, 0);
        	properties[2] = new PropertySpec("cost", typeof(double).Name, category, 0);
		properties[3] = new PropertySpec("volume", typeof(double).Name, category, 0);
		properties[4] = new PropertySpec("surfacearea", typeof(double).Name, category, 0);
		properties[5] = new PropertySpec("hitpoints", typeof(int).Name, category, 0);
		
		// structural components (walls, floors, ceilings) properties
		// frame tech level 
		// frame strength
		// material quality
		// 
		// specials (living metal, biomechanical, robotic, responsive) <-- THESE CAN USUALLY BE DESCRIBED IN TERMS OF WHAT THEY CONSUME OR PRODUCE
		//    - for robotic, i think ill be physically plotting any electrical and communications lines that will 
		//      automatically added weight and cost
		//		- living metal (nanobot) offers self regenerative bonus)
		//         and consumes supplies to recover hitpoints (aka: Produces regeneration)
		//
		// 		- biomechanical can feel pain but can heal 
		//        but also can consume pathogens and result in loss of hitpoints
		// 
		// add the properties to the entity's domain object
		EntityAPI.AddCustomProperties(domainObjectID, properties);
		
		
		// create a test rule using a Delegate rule
		//EntityAPI.AddRule (
		//	domainObjectID, "description", new SimpleRule(1, delegate {return ((string)properties[0].DefaultValue).Length != 0; }));
			
		
		EntityAPI.AddRule (domainObjectID, "description",
			new SimpleRule(1, Rule_Description));
			
		// create a test rule that uses the Validate script method below if no delegate Rule exists
		//EntityAPI.AddRule (); // todo: maybe this version is not necessary?
		
		// queryable mods
		// assign values to specific "mod" properties that the celledregion will query
		// to determine what modifications this domainobject will have on the parent.
		// so for a celledregion parent, maybe it modifies the map layer
		// for some other entity, maybe it modifies a crew members skill level.
		
		// so celledRegion can query the layout of this entity
		// it can query the allowed places it can be set/orientation <-- there's no need to put that in the DomainObject explicitly
		// 
		
		
		// add consumptions
		//EntityAPI.AssignConsumption()
		//	- and consumption is a broad term for any stimulus or product (synonymous i think)
		//    such as antimatter fuel or kinetic damage consumption
		//	- radar or other active sensor scan (and may emit a return signal)
		//  
		
		// add production
		//EntityAPI.AssignProduction();
		
		// define any stores
		//EntityAPI.DefineProductStore();
		
		System.Diagnostics.Debug.WriteLine (UserConstants.TestConstant1.ToString());
	}
	
	#region Rules
	private static bool Rule_Description(object[] args)
	{
		// we also get the value from the args
		string description = (string)args[0];  // whwere know for property rules the value is the first and only arg
		
		System.Diagnostics.Debug.WriteLine ("Running rule 'Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);
		
		
	}
	#endregion

	public static object RegisterChild(string entityID, string childID)
	{
		// make modifications 
		return entityID;
	}
	
	public static object UnRegisterChild (string entityID, string childID)
	{
		return entityID;
	}
	
	public static object OnAddedToParent(string entityID, string parentID)
	{
		// make modifications 
		return entityID;
	}
	
	public static object OnRemovedFromParent (string entityID, string parentID)
	{
		return entityID;
	}
	
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_EDGE_SEGMENT;}
	
	// returns a 16x16 grid (256 bytes) showing which tile bits are occupied by this entity
	// NOTE: The footprint flags can contain more info than just the physical location of the component.
	// It can contain information about whether it mounts to a wall or ceiling or floor.  
	public static byte[,] QueryCellFootprint ()
	{
		return new byte[,] {{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
						   {1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}};
	}
	
	public static Vector3d[] QueryCellPlacement (string celledRegionID, uint cellIndex, byte cellOffset, byte cellRotation)
	{
		const double TO_DEGREES = 360d / 256d;
		Vector3d position, scale, rotation;
		scale.x = 1;
		scale.y = 1;
		scale.z = 1;
		
		
		rotation.x = 0;
		rotation.y = (double)(cellRotation * TO_DEGREES);
		rotation.z = 0;
				
		// based on the cellIndex, determine the position in celled region relative coordiantes
		// of the top left of that cell

		uint[] cellPosition = EntityAPI.CellMap_Unflatten(celledRegionID, cellIndex);
		float[] start = EntityAPI.CellMap_GetStartIndices (celledRegionID);
		
		// 
		position.x = start[0] + cellPosition[0];
		position.y = start[1] + cellPosition[1];
		position.z = start[2] + cellPosition[2];
		
		Vector3d size = EntityAPI.CellMap_GetCellSize (celledRegionID);
		position *= size; // compute exact center of the 3D Cell
				
		Vector3d halfSize = size * .5;
		// note: the following position.y manipulation might be necessary for items with variable height (crates, chairs, etc)
		// but walls and doors we know are same height as a cell. 
		//position.y -= halfSize.y; // lower the center to the floor
		//position.y += box.Height * .5; // raise by half the height of this entity NOTE: take care to ensure all wall entities are exact same height
		
		switch (cellRotation)
		{
			case 0:
				position.z += halfSize.z - size.z / 32d; // half of 1/16th the width
				break;
			case 64:  // 90 degrees
				position.x += halfSize.x - size.x / 32d;
				break;
			case 128: // 180 degrees
				position.z -= halfSize.z + size.z / 32d; // half of 1/16th the width
				break;
			case 192: // 270 degrees
				position.x -= halfSize.x + size.x / 32d;
				break;
		}
		
		// return values and dont use EntityAPI to set, since it's a Query and not an Update
		return new Vector3d[] {position, scale, rotation}; 
	}
	
	#endregion

	// Updates the build statistics
	public static void BuildUpdate (string domainObjectID)
	{
		// configuring the list of proeprty grid is no problem
		// however what is a problem is configuring the list in some drop down.
		// This must be client side, but then server side enforced in a rule validation delegate.
		//
		// We know that our propertySpec's have room for an event handler and I think that maybe we should 
		// see if we can't trigger those events and then provide for a way for the Plugin/PropertyGrid
		// to update a drop down list afterwards....
		
		
	}	

	public static void Tick (string domainObjectID)
	{
		// consume
		
		// produce
		
		
	}
	
	public static bool Validate (string domainObjectID, string propertyName, object value)
	{
		switch (propertyName)
		{
			// build properties
			case "quality": // construction & craftsmanship quality (typically user doesn't select this
			                // it's determined by the stats of the builder and whether the player or the 
							// builder himself tries to save money
							// and create a cheaper vehicle.
							// A particular builder may have a max quality, but that quality can always wind up being less
							// if the builder thinks he can take advantage of the player and he wont notice.
							// within reason, some components may not all be up to the highest quality even if the
							// builder is not intentionally trying to be a crook.  It may be a bad batch of materials
							// or some automation diagnostics not quite working right.  So maybe there's some margin of error
							// the player gets to play with and if they want guarantee, it could add 50 - 1000% more to the cost.
							// (like ordering a ferrari vs an assembly line car)
				break;
			case "material":
				break;
			case "thickness": // this will replace light, medium, heavy, extra heavy, etc.
				break;
				
			// runtime properties
			case "turnon":
				break;
				
			default:  // not every property has to have any validation code.  Or it may have been handled by a custom rule object
				break;
		}
		return true;
	}	
}


