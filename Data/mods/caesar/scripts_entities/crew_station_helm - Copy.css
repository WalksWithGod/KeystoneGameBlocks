using System;
using Game01.GameObjects;

using KeyCommon.Simulation;

using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class Helm : BaseScript
{
	private enum ManeuverState: int
	{
			None = 0,
			Rotating_Accelerating,
			Rotating_Decelerating,
			Translating_Accelerating,
			Translating_Decelerating,
			Strafing_Left, // todo: do these need accelerating and decelerating states too?
			Strafing_Right,
			Maneuver
	}

	public static void Initialize(string scriptID)
	{
		string category = "Misc"; //"public properties";
		// create the custom properties	
		Settings.PropertySpec[] properties = new Settings.PropertySpec[10];
		// name, type, category, default value
		// name, type, category, description, default value, editor, converter
		properties[0] = new PropertySpec("description", typeof(string).Name, category,(object)"helm");

		// should i have two bools? one for executingrotation and another for executingtranslation
		// todo: or we have a maneuverState
		properties[1] = new PropertySpec("operator", typeof(string).Name, category, (object)"computer");
		properties[2] = new PropertySpec("state", typeof(int).Name, category, (int)ManeuverState.None);
		properties[3] = new PropertySpec("heading", typeof(Vector3d).Name, category, Vector3d.Zero()); // desired heading
		properties[4] = new PropertySpec("halfangle", typeof(double).Name, category, 0d);
		properties[5] = new PropertySpec("direction", typeof(Vector3d).Name, category, Vector3d.Zero()); // rotation direction
		properties[6] = new PropertySpec("halfdistance", typeof(double).Name, category, 0d);
		properties[7] = new PropertySpec("destination", typeof(Vector3d).Name, category, Vector3d.Zero());
		properties[8] = new PropertySpec("engines", typeof(string[]).Name, category, null);
		properties[9] = new PropertySpec("thrusters", typeof(string[]).Name, category, null);
		
		
		// first just get heading working with no thrust towards target.  just initial thrust followed by thrust in opposite direction to zero out at desired heading.
		
		// ability to find all engines and thrusters including updating during refit if applicable
		//	- how is this done?
		//      - it would be incredibly expensive to query from Vehicle/Container and check every child's and decendant's "name."  Therefore they should probably be added both on Helm InitializeEntity() and when
		// thrusters are added/removed at runtime.
		
		//  - this is the first requirement... find the engines. We could use a naming convention...
		//  	- i think it has to be done via naming convention 
		//      - or what if each engine had a "operator" property named "helm"?
		
		
		// ability to adjust engine regulators (throttle) and burn time.
		
		// ability to zero out all angular forces and align with the stellar system plane
		
		// ability to just set a heading and acceleration and go in that direction
		//	 this involves knowing which thrusters and engines to fire and their duration
		//   There may not be a need for max thrust and deceleration.
		
		// waypoints (eg combat space patrol)
		//	- vector3d and a double for velocity 
		
		// waypoints to avoid going through stars, worlds and moons
		
		// interceptTargetID
		// interceptTargetVelocity
		
		// orbitTargetID
		
		// determine which engines/thrusters must follow 

		
		
		// todo: the helm needs to know about all of the thrust producers. How?
		//       we need to find them when a helm is placed on the Interior AND we need to update when engines are added or removed to Container.
		//       todo: we don't need to know the orientation of the thruster,just the thrust vector which is a simple customproperty of the engine.  We also need to set the bool for "angular thrust".  easy.
		
		// todo: perhaps we register as a "listener" for producers of type ProductID
		//       then we can determine the orientations and positions based on each axis center line
		
		// todo: i think all crew stations need to have "listener" capabilities in order to be able to control/operate components on the vehicle.  But this is a lot of overhead and all our "stations" would need to implement observer pattern.  For instance, "engineering" would need a list of all power producers.
		
		// https://gamedev.stackexchange.com/questions/189707/moving-ship-to-new-destination-when-already-having-a-velocity
		
		// add the properties to the entity's script object
		EntityAPI.AddCustomProperties(scriptID, properties);
				
		// create a test rule using an inline delegate rule
		//EntityAPI.AddRule (scriptID, "description", 
		//	new SimpleRule("Name cannot be empty.", 
		//	delegate {return ((string)properties[0].DefaultValue).Length != 0; }));
		
		EntityAPI.AddRule (scriptID, "description", new SimpleRule(1, Rule_Description));				
	}
	
	public static void InitializeEntity(string entityID)
	{
		// ownerID is equivalent to the VehicleID
		string ownerID = EntityAPI.GetOwnerID(entityID);
		if (string.IsNullOrEmpty(ownerID)) return;
		
		// this assumes we know all the engine and thruster names. I don't think
		// that is an unreasonable assumption, but it does mean we'd need different helm
		// implementations for ships that have different engine configurations.
		string[] engineIDs = new string[4]; 
		engineIDs[0] = EntityAPI.FindDescendantByName (ownerID, "engineTopLeft");
		engineIDs[1] = EntityAPI.FindDescendantByName (ownerID, "engineBottomLeft");
		engineIDs[2] = EntityAPI.FindDescendantByName (ownerID, "engineTopRight");
		engineIDs[3] = EntityAPI.FindDescendantByName (ownerID, "engineBottomRight");
		
		string[] thrusterIDs = new string[8];
		thrusterIDs[0] = EntityAPI.FindDescendantByName (ownerID, "thrusterFwdLeft");
		thrusterIDs[1] = EntityAPI.FindDescendantByName (ownerID, "thrusterAftLeft");
		thrusterIDs[2] = EntityAPI.FindDescendantByName (ownerID, "thrusterFwdRight");
		thrusterIDs[3] = EntityAPI.FindDescendantByName (ownerID, "thrusterAftRight");
		thrusterIDs[4] = EntityAPI.FindDescendantByName (ownerID, "thrusterFwd1");
		thrusterIDs[5] = EntityAPI.FindDescendantByName (ownerID, "thrusterFwd2");
		thrusterIDs[6] = EntityAPI.FindDescendantByName (ownerID, "thrusterAft1");
		thrusterIDs[7] = EntityAPI.FindDescendantByName (ownerID, "thrusterAft2");
		

		
		
		EntityAPI.SetCustomPropertyValue (entityID, "engines", engineIDs);
		EntityAPI.SetCustomPropertyValue (entityID, "thrusters", thrusterIDs);
		
	}
	
	#region Rules
	
	private static bool Rule_Description(string entityID, object[] args)
	{
		// we get the value from the args where we know for property rules the value is first and only argument
		string description = (string)args[0];  
		System.Diagnostics.Debug.WriteLine ("Running rule 'Rule_Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);
	}
	#endregion

	public static object Register(string entityID, string parentID)
	{
		// make modifications 
		// this method gets called when restoring components from saved xml and not just during initial asset placement.

		return entityID;
	}
	
	public static object UnRegister (string entityID, string parentID)
	{

		return entityID;

	}
	
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_SINGLE_DROP;}
	
	// todo: where do we return a bool indicating whether placement is valid?  I cant just hardcode
	// within Interior validity checking reqts for all component types?
	// a Validate function needs to be added to this script and for it to be called by the Interior during assetplacement and during
	// restore from saved file.
	
	public static Vector3d[] QueryCellPlacement (string entityID, string interiorID, Vector3d position, byte cellRotation)
	{
		const double TO_DEGREES = 360d / 256d;
		Vector3d scale, rotation;
		scale.x = 1;
		scale.y = 1;
		scale.z = 1;
		
		
		rotation.x = 0;
		rotation.y = (double)(cellRotation * TO_DEGREES);
		rotation.z = 0;
				
		// tile location is basically x, z pixel coordinate with y as floor level
		// we need to convert this to a celledRegion relative coordinate which will give us
		// a 3D position that represents the CENTER of that tile (not the top/left corner)
		//position = EntityAPI.CellMap_GetTilePosition3D(interiorID, tileLocation);
		Vector3d size = EntityAPI.CellMap_GetTileSize (interiorID);
		
		// assuming this generic component has it's Y position at floor (not centered in it's bbox)
		// then we need to lower position.y we return to be on the floor of the cell.		
		double floorHeight = position.y - (size.y * 0.5);
		position.y = floorHeight;
		
		// return values and dont use EntityAPI to set, since it's a Query and not an Update
		return new Vector3d[] {position, scale, rotation}; 
	}
	
	#endregion

	#region Build statistics
	
	public static void OnCustomPropertyChanged (string entityID, int index)
	{
		switch (index)
		{
			case 3: // heading
				string vehicleID = EntityAPI.GetOwnerID(entityID);
				if (string.IsNullOrEmpty(vehicleID)) return;
			
				Quaternion currentRotation = (Quaternion)EntityAPI.GetPropertyValue(vehicleID, "rotation");
				Vector3d currentHeading = currentRotation.GetEulerAngles(true);
				double currentYaw = currentHeading.y;
				double targetHeading = ((Vector3d)EntityAPI.GetCustomPropertyValue(entityID, "heading")).y;
				
				double distance;
				Vector3d direction = GetDirection(targetHeading, currentYaw, out distance);
				double halfAngle = distance * 0.5d;
				EntityAPI.SetCustomPropertyValue (entityID, "halfangle", halfAngle);
				EntityAPI.SetCustomPropertyValue (entityID, "direction", direction);
				
				EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.Rotating_Accelerating);		
				break;
			case 6: // translation destination
				// determine the heading based on the destination 
				Vector3d dir = (Vector3d)EntityAPI.GetPropertyValue(entityID, "position") - (Vector3d)EntityAPI.GetCustomPropertyValue(entityID, "destination");
			
				double halfDist = dir.Length * 0.5d;
				EntityAPI.SetCustomPropertyValue(entityID, "halfdistance", halfDist);
			
						
				EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.Translating_Accelerating);	
				break;
			default:
				break;
		}
	}
	#endregion

	// todo: since maneuver code needs to operate every tick, how do we only do it for some entities and not others
	//       where we don't need or want to update EVERYTHING every frame, but use round robbin and other strategies
	public static void OnUpdate (string entityID, double elapsedSeconds)
	{
		string vehicleID = EntityAPI.GetOwnerID(entityID);
		if (string.IsNullOrEmpty(vehicleID)) return;
		
		ManeuverState state = (ManeuverState)EntityAPI.GetCustomPropertyValue(entityID, "state");
		Vector3d position = (Vector3d)EntityAPI.GetPropertyValue(vehicleID, "position");
		Vector3d destination = (Vector3d)EntityAPI.GetCustomPropertyValue (entityID, "destination");
		Vector3d dir = position - destination;
				
		double epsilon = 0.01d;
		
		string[] engineIDs = (string[])EntityAPI.GetCustomPropertyValue(entityID, "engines");		
		string[] thrusterIDs = (string[])EntityAPI.GetCustomPropertyValue(entityID, "thrusters");
			
		// todo: are we already executing a maneuver or is there no maneuver or a new maneuver?
		double targetHeading = ((Vector3d)EntityAPI.GetCustomPropertyValue(entityID, "heading")).y;
		
					
		Quaternion currentRotation = (Quaternion)EntityAPI.GetPropertyValue(vehicleID, "rotation");
		Vector3d currentHeading = currentRotation.GetEulerAngles(true);
		double currentYaw = currentHeading.y;
		
		double distance;
		Vector3d direction = (Vector3d)EntityAPI.GetCustomPropertyValue (entityID, "direction"); 
		Vector3d currentDirection = GetDirection(targetHeading, currentYaw, out distance);
		
		double halfAngle = (double)EntityAPI.GetCustomPropertyValue(entityID, "halfangle");
		
		//System.Diagnostics.Debug.WriteLine("Target heading =" + targetHeading.ToString());
		//System.Diagnostics.Debug.WriteLine("Half Heading = " + halfAngle.ToString());
		//System.Diagnostics.Debug.WriteLine("Current Yaw = " + currentYaw.ToString());
		//System.Diagnostics.Debug.WriteLine("Direction = " + direction.y.ToString());
		//System.Diagnostics.Debug.WriteLine("Distance = " + distance.ToString());
		
		if (state == ManeuverState.Rotating_Accelerating)
		{
				
			SetAngularThrust (thrusterIDs, true);

			// todo: when using chase camera, it should always orient itself with the z-roll 
			
			if (direction.y != currentDirection.y || distance <= epsilon)
			{
				// if we're already at rest, there's no need to keep resetting all these thruster state vars
				EntityAPI.SetCustomPropertyValue (thrusterIDs[0], "breaker", false);
				EntityAPI.SetCustomPropertyValue (thrusterIDs[3], "breaker", false);
				
				EntityAPI.SetCustomPropertyValue (thrusterIDs[2], "breaker", false);
				EntityAPI.SetCustomPropertyValue (thrusterIDs[1], "breaker", false);
				
				EntityAPI.SetPropertyValue(vehicleID, "angularforce", Vector3d.Zero());
				EntityAPI.SetPropertyValue(vehicleID, "angularvelocity", Vector3d.Zero());
							
				if (position == destination)
					EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.None);
				else 
				{
					double halfDist = dir.Length * 0.5d;
					EntityAPI.SetCustomPropertyValue(entityID, "halfdistance", halfDist);
				
					EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.Translating_Accelerating);
				}
			}
			else if (distance > halfAngle) // accelerate rotation
			{
				//System.Diagnostics.Debug.WriteLine("Accelerating");
			//	Accelerate(); // todo: which thrusters fire depends on the direction of the acceleration
				// for now let's just turn on the first thruster and see what happens
				EntityAPI.SetCustomPropertyValue (thrusterIDs[0], "breaker", true);
				EntityAPI.SetCustomPropertyValue (thrusterIDs[3], "breaker", true);
						
				EntityAPI.SetCustomPropertyValue (thrusterIDs[2], "breaker", false);
				EntityAPI.SetCustomPropertyValue (thrusterIDs[1], "breaker", false);
			
				// todo: if we're already accelerating there's no need to keep assigning this force.
				Vector3d angularVelocity = (Vector3d)EntityAPI.GetPropertyValue(vehicleID, "angularvelocity");
				if (angularVelocity.y >= 0.5) // assuming we are going in the positive direction
				{				
					Vector3d force = new Vector3d(0, 0.000, 0);
					EntityAPI.SetPropertyValue(vehicleID, "angularforce", force);
				}
				else 
				{
					// todo: force needs to be grabbed from the thruster
					// NOTE: force is multiplied by elapsedSeconds in LeapFrogVerlet
					Vector3d force = new Vector3d(0, 0.0001, 0) * direction;
					EntityAPI.SetPropertyValue(vehicleID, "angularforce", force);
				}
			}
		}
		else if (state == ManeuverState.Rotating_Decelerating)
		{
			//System.Diagnostics.Debug.WriteLine("Decelerating");
		//	Decelerate(); // todo: which thrusters visually fire depends on the direction of the decleration
			// todo: would be nice to be able to set an array of PropertySpec instead of seperate calls to same Entity
			EntityAPI.SetCustomPropertyValue (thrusterIDs[0], "breaker", false);
			EntityAPI.SetCustomPropertyValue (thrusterIDs[3], "breaker", false);
			
			EntityAPI.SetCustomPropertyValue (thrusterIDs[2], "breaker", true);
			EntityAPI.SetCustomPropertyValue (thrusterIDs[1], "breaker", true);
			
			// todo: i think if i try to enable angular velocity on each axis, i will get
			//       incorrect looking rotations because axis orientations will change.  For instance
			//       if i roll 90 degrees and then try to yaw, it should yaw around the ship's new up vector not the 
			//       world up vector.
			//       This is why i should probably restrict heading to just yaw for 1.0 
			
			// todo: is the thruster powered?
			
			// todo: force needs to be modified by any damage to the thruster
			
			// if the direction has changed, we have overshot and should immediately just snap to position			
			if (direction.y != currentDirection.y)
			{
				EntityAPI.SetPropertyValue(vehicleID, "angularforce", Vector3d.Zero());
				EntityAPI.SetPropertyValue(vehicleID, "angularvelocity", Vector3d.Zero());
				
				if (position == destination)
					EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.None);
				else 
				{
					double half = dir.Length * 0.5d;
					EntityAPI.SetCustomPropertyValue(entityID, "halfdistance", half);
					EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.Translating_Accelerating);	
				}
			}
			else
			{				
				// todo: force needs to be grabbed from the thruster
				// NOTE: force is multiplied by elapsedSeconds in LeapFrogVerlet
				Vector3d force = new Vector3d(0, 0.0001, 0) * -direction;
				EntityAPI.SetPropertyValue(vehicleID, "angularforce", force);
			}	
		}
		else if (state == ManeuverState.Translating_Accelerating)
		{
			Vector3d velocity = (Vector3d)EntityAPI.GetPropertyValue(vehicleID, "velocity");
			
			// get the distance to the destination point. If distance > halfwayPointDistance keep going.
			// otherwise if we haven't flipped, start flip maneuver by setting state to .Rotating and orientation to
			// angle + 180.
			
			// if its a negative value or 0, we need to flip 
			// if we've already flipped, continue until our distance to destination is within epsilon
			double Hz = 30d;
			double distanceEpsilon = velocity.Length * Hz;
			
			if (dir.Length <= distanceEpsilon)
			{
				EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.None);
				EntityAPI.SetCustomPropertyValue (engineIDs[0], "breaker", false);
				EntityAPI.SetCustomPropertyValue (engineIDs[1], "breaker", false);
				EntityAPI.SetCustomPropertyValue (engineIDs[2], "breaker", false);
				EntityAPI.SetCustomPropertyValue (engineIDs[3], "breaker", false);
				return;
			}
			else 
			{				
				// is our heading correct? do we have to correct slightly?
				currentRotation = (Quaternion)EntityAPI.GetPropertyValue(vehicleID, "rotation");
				currentHeading = currentRotation.GetEulerAngles(true);
				currentYaw = currentHeading.y;
							
				double halfDistance = (double)EntityAPI.GetCustomPropertyValue(entityID, "halfdistance");
				
				System.Diagnostics.Debug.WriteLine ("Half Distance = " + halfDistance.ToString());
				System.Diagnostics.Debug.WriteLine("Actual Distance = " + dir.Length.ToString());
				if (dir.Length <= halfDistance)
				{
					Vector3d heading = (Vector3d)EntityAPI.GetCustomPropertyValue(entityID, "heading");
					heading.y += 180d;
					//if (currentYaw >= heading - epsilon && currentYaw <= heading + epsilon)
					//{
						EntityAPI.SetCustomPropertyValue(entityID, "heading", heading);
						EntityAPI.SetCustomPropertyValue(entityID, "state", (int)ManeuverState.Rotating_Accelerating);	
						
						EntityAPI.SetCustomPropertyValue (engineIDs[0], "breaker", false);
						EntityAPI.SetCustomPropertyValue (engineIDs[1], "breaker", false);
						EntityAPI.SetCustomPropertyValue (engineIDs[2], "breaker", false);
						EntityAPI.SetCustomPropertyValue (engineIDs[3], "breaker", false);
				
						return;
					//}
				}
			}
			// todo: thrust needs to be set in InitializeEntity()
			// todo: damage modifier, thrust and throttle should be grabbed from each engine
			// todo: i should not be setting "thrust" here.  That should be done during Initialization of each engine.
			// todo: similarly, whether an engine produces angular thrust or not should be done from within the engine script. Actually thats not right, for  lateral strafing we need to be able to change the "angular thrust" property.
			
			EntityAPI.SetCustomPropertyValue (engineIDs[0], "breaker", true);
			EntityAPI.SetCustomPropertyValue (engineIDs[1], "breaker", true);
			EntityAPI.SetCustomPropertyValue (engineIDs[2], "breaker", true);
			EntityAPI.SetCustomPropertyValue (engineIDs[3], "breaker", true);
			
			double engineCount = engineIDs.Length;
			
			
			// which engines do we need based on distance and thrust... main engines or aft facing thrusters?
			// todo: for now lets just not worry about the differences caused by having to rotate 
			// to decelerate on time.  just tur

			
			// accelerate
			// todo: i think this is wrong.  our engine.css during force production should modify "force"
//			Vector3d force = new Vector3d(0, 0, thrust * engineCount) * currentRotation;
			// NOTE: force is multiplied by elapsedSeconds in LeapFrogVerlet
			// NOTE: We DO NOT assign value for "force" or "angularforce" here. This is the helm.css not engine.css
			//       If we were to assign it here it would overwrite each individual engines contribution to force
			//       this frame.
//			EntityAPI.SetPropertyValue(vehicleID, "force", force);
			
			// decelerate - do we need to rotate first or are available thrusters enough?
			
		}
		// todo: do we need to check if we have enough fuel to reach this destination?
		
		// todo: get the damage modifier to thrust
		
		// todo: calls to OnUpdate() perhaps can be threaded
		
		// todo: helm seems to need to update every frame since it directly
		//       controls movement, but other components we don't want updates every frame.
		//       How do we divide them up?
		// todo: should i assign the rotation unit vectors in InitializeEntity()?
		
		// todo: right mouse click function to follow the selected Vehicle

		
		// are we at our current destination?
		// if we are within current epsilon of destination, snap to the destination
		
		// how much deltaV do we have? 
		
		// what is the current heading? are we already facing destination heading?
		// if we are within a certain epsilon of destination heading, snap to the destination heading and stop all rotational thrusters
		
		// todo: if angularVelocity gets too high, test if stress on ship causes damage to the structure and hull


		// 
		// calc time to fire? with linear acceleration can this be done analytically?
		
		// are we in acceleration or deceleration phase?
		
		// determine reaction time based on operator or ship's computer 
		
		// what is the half rotation angle? we will accelerate until we reach it then decelerate in opposite rotation
		// todo: we should probably compute the half angular velocity to help with that so we don't overshoot.
		
		
		// get the distance from our current position to the destination position
		
		// todo: for linear velocity and injection into an orbit, we dont want to necessarily decelerate to 0,0,0 assuming we want to model gravitation
		
	}
	
	private static void SetAngularThrust(string[] thrusterIDs, bool value)
	{
		EntityAPI.SetCustomPropertyValue(thrusterIDs[0], "angular thrust", value);
		EntityAPI.SetCustomPropertyValue(thrusterIDs[1], "angular thrust", value);
		EntityAPI.SetCustomPropertyValue(thrusterIDs[2], "angular thrust", value);
		EntityAPI.SetCustomPropertyValue(thrusterIDs[3], "angular thrust", value);
	}
	
	private static Vector3d GetDirection (double targetHeading, double currentYaw, out double distance)
	{
		double a = targetHeading - currentYaw;
		double b = a + 360;
		double c = a - 360;
		Vector3d result = Vector3d.Zero();
		
		if (Math.Abs(a) <= Math.Abs(b) && Math.Abs(a) <= Math.Abs(c)) 
		{
			if (a >= 0) 
				result = new Vector3d(0, 1, 0);
			else 
				result = new Vector3d (0, -1, 0);
			
			distance = Math.Abs(a);
		}
		else if (Math.Abs(b) <= Math.Abs(a) && Math.Abs(b) <= Math.Abs(c)) 
		{
			if (b >= 0) 
				result = new Vector3d(0, 1, 0);
			else 
				result = new Vector3d(0, -1, 0);
			
			distance = Math.Abs(b);
		}
		else if (Math.Abs(c) <= Math.Abs(a) && Math.Abs(c) <= Math.Abs(b)) 
		{
			if (c >= 0) 
				result = new Vector3d(0, 1, 0);
			else 
				result = new Vector3d (0, -1, 0);
			
			distance = Math.Abs(c);
		}
		else 
			throw new Exception();
		
		return result;
		// double direction = ((targetHeading - currentYaw + 540d) % 360d) - 180d;
		
		// if (direction >= 0d)
			// return new Vector3d(0, 1, 0);
		// else 
			// return new Vector3d(0, -1, 0);
	}
}

