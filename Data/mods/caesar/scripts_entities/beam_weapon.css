using System;
using Game01;
using Game01.GameObjects;
using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyCommon.Simulation;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;



// todo: we want to be able to compute miss or hit location prior to rendering.
//       we also want to seperate out build script from the actual run-time weapon. Build may not even be a script but just part of rules in game00.dll
// todo: i think we need a weapon build workspace where we can then save the weapons as prefabs and 
//       attach them to our vehicle.
// todo: for runtime, we should use a cost/credit system where players can only choose vehicles with loadouts that do not exceed a set limit.  This is especially true for multiplayer in v2.0
// todo: the barrel also needs to be able to fit in the correct sized turret.
// todo: the turret needs to fit on an approrpiately sized hardpoint on the hull.
// todo: maybe the build rules go in game00.dll?

// note: for explosive damage, we want to be able to use a sphere to determine splash damage.

// TODO: i think the duration and RoF of he beam should be handled here within the weapon.  The "beam.css" should only manage the length of the beam.
//       perhaps we tell it from here to "enable" = true, and "length" = x  if subtype is "beam" instead of say "bolt";
//       One issue is, our beam.kgbentity does not contain multiple billoards for "bolt".  currently, we have to know in advance.  
//       Actually, what we need is a way to build the kgbentity from a weapon designer built in game00.dll
// TODO: WEAPON BUILDER INTERFACE
//       - we should be able to grab an array of PropertySpec[] from the builder to populate the interface, then when user is done specifying parameters, it creates a .kgbentity for us that we can then save as a prefab.
public class BeamWeapon : BaseScript
{
	public static void Initialize(string scriptID)
	{
		string category = "Misc"; //"public properties";
		// create the custom properties	
		Settings.PropertySpec[] properties = new Settings.PropertySpec[8];
		// name, type, category, default value
		// name, type, category, description, default value, editor, converter
		properties[0] = new PropertySpec("description", typeof(string).Name, category,(object)"beam weapon");
		// type
		// subtype // type and subtype determines the type of damage.  game00.Rules.Combat() should accept weapon stats and return us damage for which to create Production from. (eg heat, piercing, etc)
		//category = "private variables";
		properties[1] = new PropertySpec("breaker", typeof(bool).Name, category, true);
		                                  
		properties[2] = new PropertySpec("fireelapsed", typeof(double).Name, category, 0d);
		properties[3] = new PropertySpec("cooldownelapsed", typeof(double).Name, category, 0d);

		category ="statistics";
		properties[4] = new PropertySpec("hitpointsMax", typeof(int).Name, category, 100); 
		properties[5] = new PropertySpec("hitpointscurrent", typeof(int).Name, category, 100); 
		properties[6] = new PropertySpec("fireduration", typeof(double).Name, category, 2d);
		properties[7] = new PropertySpec("cooldowntime", typeof(double).Name, category, 5d); // for ballistics and missiles, this is reload time
		
		
		category = "Statistics";
		// hitpoints
		
		// todo: should i encapsulate all of the below into a single struct?  it would make grabbing the values we need faster, but it would make examining\inspecting the properties in the GUI more difficult. For now lets just use seperate PropertySpec for each.
		// range 
		// duration
		// RoF // do we need a "charge" meter to determine when we can fire again?
		// Burst // for bolts, its how many bolts are fired in succession on a single "fire" command. does each bolt potentially uses full damage or is it the combined damage?
		// power // how much power it uses from batteries or reactor
		// damage
		
		// add the properties to the entity's script object
		EntityAPI.AddCustomProperties(scriptID, properties);
				
		// create a test rule using an inline delegate rule
		//EntityAPI.AddRule (scriptID, "description", 
		//	new SimpleRule("Name cannot be empty.", 
		//	delegate {return ((string)properties[0].DefaultValue).Length != 0; }));
		
		EntityAPI.AddRule (scriptID, "description", new SimpleRule(1, Rule_Description));				
	}
	
	public static void InitializeEntity(string entityID)
	{
		//EntityAPI.SetEntityFlag(entityID, (uint)UserConstants.AutoGenerateFootprint, true);
		
	}
	
	#region Rules
	
	private static bool Rule_Description(string entityID, object[] args)
	{
		// we get the value from the args where we know for property rules the value is first and only argument
		string description = (string)args[0];  
		System.Diagnostics.Debug.WriteLine ("Running rule 'Rule_Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);
	}
	#endregion

	public static object Register(string entityID, string parentID)
	{
		// make modifications 
		// this method gets called when restoring components from saved xml and not just during initial asset placement.
		// this means we can perform an auto-tile test here? but then how does our asset placement preview get the correct sub-model to render?
		return entityID;
	}
	
	public static object UnRegister (string entityID, string parentID)
	{

		return entityID;

	}
	
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_SINGLE_DROP;}
	
	// todo: where do we return a bool indicating whether placement is valid?  I cant just hardcode
	// within Interior validity checking reqts for all component types?
	// a Validate function needs to be added to this script and for it to be called by the Interior during assetplacement and during
	// restore from saved file.
	public static Vector3d[] QueryCellPlacement (string entityID, string interiorID, Vector3d position, byte cellRotation)
	{
		const double TO_DEGREES = 360d / 256d;
		Vector3d scale, rotation;
		scale.x = 1;
		scale.y = 1;
		scale.z = 1;
		
		
		rotation.x = 0;
		rotation.y = (double)(cellRotation * TO_DEGREES);
		rotation.z = 0;
				
		// tile location is basically x, z pixel coordinate with y as floor level
		// we need to convert this to a celledRegion relative coordinate which will give us
		// a 3D position that represents the CENTER of that tile (not the top/left corner)
		//position = EntityAPI.CellMap_GetTilePosition3D(interiorID, tileLocation);
		Vector3d size = EntityAPI.CellMap_GetTileSize (interiorID);
		
		// assuming this generic component has it's Y position at floor (not centered in it's bbox)
		// then we need to lower position.y we return to be on the floor of the cell.		
		double floorHeight = position.y - (size.y * 0.5);
		position.y = floorHeight;
		
		// return values and dont use EntityAPI to set, since it's a Query and not an Update
		return new Vector3d[] {position, scale, rotation}; 
	}
	
	#endregion

	#region Build statistics
	
	public static void OnCustomPropertyChanged (string entityID, int index)
	{
		switch (index)
		{
			default:
				break;
		}
	}
	#endregion
}

