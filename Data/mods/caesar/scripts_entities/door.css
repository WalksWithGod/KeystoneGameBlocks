using System;
using Game01;
using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class Door : BaseScript
{
	public static void Initialize(string domainObjectID)
	{
		string category = "public properties";
		// create the custom properties	
		Settings.PropertySpec[] properties = new Settings.PropertySpec[10];
		// Name,  Type, Category, Default Value 
		// Name,  Type, Category, Description, Default Value
		category = "public properties";
		properties[0] = new PropertySpec("description", typeof(string).Name, category, (object)"door");
		properties[1] = new PropertySpec("weight", typeof(double).Name, category, 0);
        properties[2] = new PropertySpec("cost", typeof(double).Name, category, 0);
		properties[3] = new PropertySpec("volume", typeof(double).Name, category, 0);
		properties[4] = new PropertySpec("surfacearea", typeof(double).Name, category, 0);
		properties[5] = new PropertySpec("hitpoints", typeof(int).Name, category, 0);
		
		category = "runtime settings";
		// security level is only useful if "lockable" = true
		// but wait, we don't need a "lockable" property because it's implied if securitylevel is > 0
		properties[6] = new PropertySpec("securitylevel", typeof(int).Name, category, 0);
		// is there value to have "state" here as a customproperty?  Really only our scripts use custom properties...
		// and for that all we need it "BlackboardData"
		// but what if instead of state we just have specific var named "opened" and another 
		// property for "locked"
		// another for "auto_lock" where a door that closes automatically sets the bool locked == true.
		// yes i think locked, open are good for customproperties but not for AIBlackboardData.
		// Remember, these public custom properties are for runtime inspection and setting by modders.
		// Then these settings can be modified during design of the floorplan.
		// So much of the problems im having finishing this stuff is i forget my original rationale and start to go against it only to re-learn my original intentions later *sigh*
		//properties[7] = new PropertySpec("state", typeof(uint).Name, category, 0); // closed, open, closing, opening, locked, unlocked, blockedClosing (some object is in the way and the door cannot close)
		// properties[7] = new PropertySpec("opened", typeof(bool).Name, category, false);
		// // TODO: do i need a "default state open" bool true or false, and do i need an "open duration"
		// properties[8] = new PropertySpec ("locked", typeof(bool).Name, category, true);
		// // if lockable is false, then "locked" will be ignored and the door will always open regardless of security level
		// // TODO: isn't "securitylevel" the only custom property we need for a door that can open/close, be locked, and whether it's currently "locked" is an AIBlackboardData parameter.
		// // and all doors should always close (not just remain open if securitylevel == 0) because this is a ship that needs to control\confine pressurization in case of damage.
		// properties[9] = new PropertySpec("lockable",typeof(bool).Name, category, true);
		
		
		category = "private variables";
		properties[7] = new PropertySpec("edgeID", typeof(int).Name, category, 0);
		properties[8] = new PropertySpec("openAnimationName", typeof(string).Name, category, "open");
		properties[9] = new PropertySpec("closeAnimationName", typeof(string).Name, category, "close");
		
		// add the properties to the entity's domain object
		EntityAPI.AddCustomProperties(domainObjectID, properties);
		
		
		// create a test rule using a Delegate rule
		//EntityAPI.AddRule (
		//	domainObjectID, "description", new SimpleRule("Name cannot be empty.", delegate {null, return ((string)properties[0].DefaultValue).Length != 0; }));
			
		
		EntityAPI.AddRule (domainObjectID, "description", new SimpleRule(1, Rule_Description));
			
		// create a test rule that uses the Validate script method below if no delegate Rule exists
		//EntityAPI.AddRule (); // todo: maybe this version is not necessary?
		
		// queryable mods
		// assign values to specific "mod" properties that the celledregion will query
		// to determine what modifications this Script will have on the parent.
		// so for a celledregion parent, maybe it modifies the map layer
		// for some other entity, maybe it modifies a crew members skill level.
		
		// so celledRegion can query the layout of this entity
		// it can query the allowed places it can be set/orientation <-- there's no need to put that in the Script explicitly
		
		
		// add consumptions - door might consume nominal electricity to open and close
		// it can also consume various forms of damage
		//EntityAPI.AssignConsumption()
		//	- and consumption is a broad term for any stimulus or product (synonymous i think)
		//    such as antimatter fuel or kinetic damage consumption
		//	- radar or other active sensor scan (and may emit a return signal)

		
		
		System.Diagnostics.Debug.WriteLine (UserConstants.TestConstant1.ToString());
	}
	
	public static void InitializeEntity(string entityID)
	{
		// this is runtime data only 
		// this data is not stored/restored on simulation start or save & exit
		// TODO: GetAIBlackboardData should just be renamed to GetBlackboardData()
		//       BlackboardData is runtime data and does not get displayed in Plugin/PropertyGrid
		//       for editing.
		KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(entityID);
		if (data == null) data = new KeyCommon.Data.UserData();
		data.SetString ("last_state", "closed");
		data.SetString("state", "closed");
		data.SetDouble ("animation_elapsed", 0d);		
		data.SetDouble ("open_delay", 2.0d);
		data.SetDouble("open_delay_elapsed", 0d);
		// TODO: SetAIBlackboardData should just be renamed to SetBlackboardData()			
		EntityAPI.SetAIBlackboardData(entityID, data);
		
	}
	
	#region Rules
	private static bool Rule_Description(string entityID, object[] args)
	{
		// we also get the value from the args
		string description = (string)args[0];  // whwere know for property rules the value is the first and only arg
		
		System.Diagnostics.Debug.WriteLine ("Running rule 'Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);	
		
	}
	#endregion

	public static object RegisterChild(string entityID, string childID)
	{
		System.Diagnostics.Debug.WriteLine ("door.css RegisterChild()");
		
		
		
		
		// make modifications 

		return entityID;
	}
	
	public static object UnRegisterChild (string entityID, string childID)
	{
		System.Diagnostics.Debug.WriteLine ("door.css UnRegisterChild()");
		
		return entityID;

	}
	
	public static object OnObserved_Value_Changed (string interiorID, string entityID, string layerName, uint index, object value)
	{
		System.Diagnostics.Debug.WriteLine ("door.css OnObserved_Value_Changed()");
		
		if (layerName == "wall style")
		{
			int edgeID = (int)EntityAPI.GetCustomPropertyValue(entityID, "edgeID");

			int[] parallels = EntityAPI.CellMap_GetEdgeAdjacents (interiorID, edgeID, true);
			// determine if these are walls or railings?
			bool hasWallLeft = EntityAPI.CellMap_EdgeHasWall(interiorID, parallels[0]);
			bool hasWallRight = EntityAPI.CellMap_EdgeHasWall(interiorID, parallels[1]);
				
			// if two parallel indices, we can use elevator style doors so enable first two sub-models and disable rest
			if (parallels[0] > -1 && parallels[1] > -1)
			{
				if (hasWallLeft && hasWallRight)
				{
					SelectVisuals(entityID, "elevator");
				}
				else if (hasWallLeft)
					SelectVisuals(entityID, "openLeft");
				else if (hasWallRight)
					SelectVisuals(entityID, "openRight");
				else 
					SelectVisuals (entityID, "openRotate");
			}
			else if (parallels[0] > -1)
			{
				if (hasWallLeft)
					SelectVisuals (entityID, "openLeft");
				else 
					SelectVisuals(entityID, "openRotate");
			}
			else if (parallels[1] > - 1)
			{
				if (hasWallRight)
					SelectVisuals (entityID, "openRight");
				else 
					SelectVisuals (entityID, "openRotate");
			}
		}
		
		return entityID;
	}
	
	private static void SelectVisuals(string entityID, string name)
	{
			switch (name)
			{
				case "elevator":
				{
					EntityAPI.SetCustomPropertyValue (entityID, "openAnimationName", "open");
					EntityAPI.SetCustomPropertyValue (entityID, "closeAnimationName", "close");
					
					string nodeID = EntityAPI.FindDescendantByName (entityID, "fullDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					nodeID = EntityAPI.FindDescendantByName (entityID, "leftDoor");
					EntityAPI.SetFlag (nodeID, "enable", true);
					nodeID = EntityAPI.FindDescendantByName (entityID, "rightDoor");
					EntityAPI.SetFlag (nodeID, "enable", true);
					break;
				}
				case "openRight":
				{
					EntityAPI.SetCustomPropertyValue (entityID, "openAnimationName", "openRight");
					EntityAPI.SetCustomPropertyValue (entityID, "closeAnimationName", "closeRight");
					
					string nodeID = EntityAPI.FindDescendantByName (entityID, "fullDoor");
					EntityAPI.SetFlag (nodeID, "enable", true);
					nodeID = EntityAPI.FindDescendantByName (entityID, "leftDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					nodeID = EntityAPI.FindDescendantByName (entityID, "rightDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					break;
				}
				case "openLeft":
				{
					EntityAPI.SetCustomPropertyValue (entityID, "openAnimationName", "openLeft");
					EntityAPI.SetCustomPropertyValue (entityID, "closeAnimationName", "closeLeft");
					
					string nodeID = EntityAPI.FindDescendantByName (entityID, "fullDoor");
					EntityAPI.SetFlag (nodeID, "enable", true);
					nodeID = EntityAPI.FindDescendantByName (entityID, "leftDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					nodeID = EntityAPI.FindDescendantByName (entityID, "rightDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					break;				
				}
				case "openRotate":
				{
					EntityAPI.SetCustomPropertyValue (entityID, "openAnimationName", "openRotate");
					EntityAPI.SetCustomPropertyValue (entityID, "closeAnimationName", "closeRotate");
					
					string nodeID = EntityAPI.FindDescendantByName (entityID, "fullDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					nodeID = EntityAPI.FindDescendantByName (entityID, "leftDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					nodeID = EntityAPI.FindDescendantByName (entityID, "rightDoor");
					EntityAPI.SetFlag (nodeID, "enable", false);
					nodeID = EntityAPI.FindDescendantByName (entityID, "rotateDoor");
					EntityAPI.SetFlag (nodeID, "enable", true);
					break;
				}
				default:
					break;
			}
	}

	// todo: verify OnAddedToParent() gets called again after a door is "moved" by the user
	// todo: verify the collider is updated as well
	public static object OnAddedToParent(string entityID, string parentID)
	{
		System.Diagnostics.Debug.WriteLine ("door.css OnAddedToParent()");
		
		// NOTE: we only need to observe during Interior floorplan design mode.  If a wall is destroyed
		// during arcade mode, we should not be notified right?
		EntityAPI.CellMap_RegisterObserver (parentID, entityID, "wall style");
		// we know doors are only placed on edges, so lets get our edgeID and cache it
		Vector3d position = (Vector3d)EntityAPI.GetPropertyValue (entityID, "position");
		Vector3d rotation;
		int edgeID;
		position = EntityAPI.CellMap_GetEdgePosition(parentID, position, out rotation, out edgeID);
		EntityAPI.SetCustomPropertyValue (entityID, "edgeID", edgeID);

		return entityID;
	}
	
	public static object OnRemovedFromParent (string entityID, string parentID)
	{
		System.Diagnostics.Debug.WriteLine ("door.css OnRemovedFromParent()");
		EntityAPI.CellMap_UnregisterObserver (parentID, entityID, "wall style");
		
	//      string wallID = EntityAPI.CellMap_GetWallEntityID(edgeID);
                //      // only one CSG_TARGET per wall so this will not cause problem with assuming this is the only CSG_SOURCE.  This IS the only CSG_SOURCE
                //      // this doesn't prevent us from implementing damage holes in doors.  we simply
                //      // provide LOD/Selector levels for the punch
                //      // This is why the punch should be it's own entity... but the problem there is
                //      // The punch then should tell it's own parent that it's a CSG_SOURCE?
                //      // Since it becomes convoluted for the Punch entity which is a child of
                //      // the door frame, to directly modify the wall right?
                //      // Hrm... it'd be somewhat nice to have the Punch be directly childed
                //      // to the wall, but... then what of the frame?  It makes adding
                //      // a door as a single grouped entity more difficult if frame, punch, door
                //      // must all be added seperately.  Removing them as well..
                //      // And what about the headache of scripting seperate scripts for
                //      // frame, door and punch?  A punch doesnt really need a domain object
                //      // as it's a graphical thing mostly... and the frame + door is nicer
                //      // as a single entity too...
                //      // but also keep in mind, PUNCH needs a seperate rendering pass
                //      //   - what if (assuming punch is a special node type that is not an entity
                //      //      similar to Geometry, LOD, Collider, Punch) if we wanted to render
                //      //     the punch seperately (or a collider volume), we set that flag and
                //      //     added the entity to two RegionCullingInfo items... one which specified
                //      //     via flag to render Mesh, Collider, Punch, etc.
                //      //       - So for now let's assume this approach, what about the moving door?
                //      //         Does it have it's own DomainObjectScript? Or does the parent frame
                //      //         Manage it?  What if the child moving door hasnt been loaded yet?
                //      //       - i htink clearly the animated door has to be a seperate entity
                //      //         afterall it can be animated/translated/rotated differently.
                //      //         I think one way around the issue of how does parent script know
                //      //         about the child (besides childIDs[] = EntityAPI.GetChildren(entityID);
                //      //         is to in fact script the door seperately.
                //      //         - and shouldnt the door itself be able to tell it's parent to
                //      //         enable/disable the CSGSource flag since if door is closed and undamaged
                //      //         it doesnt need CSG stencil operations applied.
                //      //         I think part of the answer is that when we design entities
                //      //         and their scripts, we are doing so with the knowledge that we know
                //      //         how they are constructed hierarchically and will exploit that in our scripts.
                //      //         For instance, the DoorEntity's script knows there's a child AnimatedDoor
                //      //         and that it's the first child.
                //      //         But the other thing from a DomainObjectScript point of view where i have custom
                //      //         fields like ArmorThickness, FrameStrength or whatever... is i dont want to have to
                //      //         do this twice for child doors.  I could circumvent this somewhat.. make the parent
                //      //         entity be the only interactable object and have it's picking / colliding be based on
                //      //         a box instead of geometry... but... it seems to get kludgy that way.
                //      //         but its definetly a headache to have the child door be defined (custom property wise)
                //      //         seperately.  It's as if in a sense, i dont want the child door to behave as it's own
                //      //         thing.  I dont want it scriptable at all... just the parent.
                //      //         And technically i could still allow the picker to have rules to query the child but
                //      //         to still report the picked entity as being the overall doorFrame entity.
                //      //         I think this is my answer.
                //      //         So we also need flags to ensure at runtime no other child can be added to 
                //      //         either doorframe or animated door.
                //      //         ***But what if the DoorFrame is added via XMLRead BEFORE
                //      //          the wall it wants to set the flag on?
                //      //         Recall that i wanted the DoorFrame to NOT be a child of Wall
                //      //         because i wanted the DoorFrame to be able to modify it's parent
                //      //         celledRegion's map layer. 
                //      //            - But what if the answer to this is to have the parent CelledRegion
                //      //              query the child for mods, rather than have the child mod the parent?
                //      //            This way the CelledRegion can handle modifying a flag to a wall
                //      //            and the map layer regardless of whether door or wall loads first?
                //      //
                //      //
                //      // Also consider how the GUI Button / Trigger to open a door works...
                //      // That button/trigger needs to wire to the proper door.
                //      // http://www.newerth.com/wiki/index.php/XR_Map_Triggers
                //      // http://game-engine.visual3d.net/wiki/entity-creation-models-prefabs-avatars-and-entity-types
                //      //     - in the visual3d implementation, a trigger is added as a child to an entity
                //      //       in order to associate it (just drag and drop the trigger onto it)
                //      // http://unity3d.com/support/documentation/Components/class-CapsuleCollider.html
                //      //    - i like how in unity3d, their colliders can be flagged as triggers which
                //      //     tells the physics engine to ignore them as collision objects that need physics reaction calcs
                //      //     but to still notify the app that something has entered the trigger volume of that collider
                //      //     Contrast to Unreal where triggers are seperate Entities.  Hrm...
                // CSG flags must be sent on model through plugin panel now
                //EntitiyAPI.DisableFlags(entityID, UserConstants.CSGStencilSource);
		return entityID;

	}
	
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_DOOR;}
		
	// TODO: I think the interior should host this function and have seperate use cases for
	//       different component types.  It could query a custom property in the child for what type and
	//       if there is no such property, use default placement.  Then we need to change the arguments
	//       to use 3D position instead of tileLocation.  We should also use real rotation and not byte cellRotation
	//       The conversions should be done here in the QueryCellPlacement.
	//       In fact, the very name of this function assumes being placed within an Interior celledRegion.
	public static Vector3d[] QueryCellPlacement (string entityID, string interiorID, Vector3d position, byte cellRotation)
	{
		const double TO_DEGREES = 360d / 256d;
		Vector3d scale, rotation;
		scale.x = 1;
		scale.y = 1;
		scale.z = 1;
				
		rotation.x = 0;
		rotation.y = (double)(cellRotation * TO_DEGREES);
		rotation.z = 0;
				
		// TODO: i say below pixel coordinate but isn't it a 3dimensional array coordinate?
		// tile location is basically x, z pixel coordinate with y as floor level
		// we need to convert this to an Interior relative coordinate which will give us
		// a 3D position that represents the CENTER of that tile (not the top/left corner)
		// TODO: I think this tileLocation var is actually cellLocation for components like
		//       doors and hatches that must snap to Cell dimensions, not inner tiles.
		//position = EntityAPI.CellMap_GetTilePosition3D(interiorID, tileLocation);
		// todo: this returns cell size right, not inner tile size? should be renamed
		Vector3d size = EntityAPI.CellMap_GetTileSize (interiorID);
				
		Vector3d halfSize = size * .5;
		
		//position.y += halfSize.y;
		
		switch (cellRotation)
		{
			case 0:
				position.z += halfSize .z - size.z / 32d; // half of 1/16th the width
				break;
			case 64:  // 90 degrees
				position.x += halfSize .x - size.x / 32d;
				break;
			case 128: // 180 degrees
				position.z -= halfSize .z + size.z / 32d; // half of 1/16th the width
				break;
			case 192: // 270 degrees
				position.x -= halfSize .x + size.x / 32d;
				break;
		}
		
		// return values and dont use EntityAPI to set, since it's a Query and not an Update
		return new Vector3d[] {position, scale, rotation}; 
	}
	#endregion

	#region Gameplay Functions and Methods
	// Determine if the NPC trying to access this entity, can in fact do so.
	// general purpose method to determine if any particular NPC can "access" a particular component such as a computer console or door.
	public static bool IsAccessible (string entityID, string npcID)
	{
		System.Diagnostics.Debug.WriteLine ("Script.IsAccessible() - " + npcID);
		// TODO: is door damaged and closed and cannot be opened?
		// todo: is the door destroyed and can be accessible to anybody

		int doorScore = (int)EntityAPI.GetCustomPropertyValue (entityID, "securitylevel");
		int npcScore = (int)EntityAPI.GetCustomPropertyValue (npcID, "securitylevel");

		// TODO: can the NPC attempt to "hack" this door and open it even without proper privileges?	Maybe it can hack their "securitylevel" as a sort of catch all solution	
		return npcScore >= doorScore;
		
		// todo: we need a custom property to hold door_state.Open,.Closed,.Opening, .Closing, .Damaged, .Destroyed, .Locked, .UnLocked
		//       or do these only need to exist in blackboarddata?
	}
	
	// Have the component be "used" (consumed) by the npc 
	public static bool Use (string entityID, string npcID)
	{
		// for a door, this means opening the door and waiting for it's state to switch to "opened" prior to traversing through it.
		// if the door is opening, how is the npc notified when the opening has completed?
		
		// what if it's already in "use" by another npc?  I suppose if we check the door's state, we can determine if we need to "use" it.
		// todo: should i get rid of "state" and just call it bool opened
		
		KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(entityID);
		if (data == null) throw new Exception();
		
		bool closed = data.GetString ("state") == "closed";
		if (closed) UseDoor(entityID);
		
				
		string description = (string)EntityAPI.GetCustomPropertyValue (entityID, "description");
		System.Diagnostics.Debug.WriteLine ("Script.Use() - NPC = '" + npcID + "' Target = '" + description + "' + id = '" + entityID + "'");
		return true;
	}
	
	private static void UseDoor(string doorID)
	{
		// animate the door open if it's not already animating
		
		// set door state to "opening"
		// TODO: "state" should be in blackboard data i think.  its only used during runtime.
//		UserConstants.DoorState state =(UserConstants.DoorState)(int)EntityAPI.GetCustomPropertyValue("state");
//		state = UserConstants.DoorState.Opening;
		
//		EntityAPI.SetCustomPropertyValue(doorID, "state", (int)state);
		// store time that opening began (actually this must be done in OnUpdate() when first frame after change of state to "opening" begins)
		// so we must set "last state" in the AI data object store.
		
		KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(doorID);
		if (data == null) throw new Exception();
		
		
		data.SetString ("state", "open");
		
		EntityAPI.SetAIBlackboardData (doorID, data);
	}
	#endregion
	
	// Updates the build statistics
	public static void UpdateStats (string entityID)
	{
		// configuring the list of property grid is no problem
		// however what is a problem is configuring the list in some drop down.
		// This must be client side, but then server side enforced in a rule validation delegate.
		//
		// We know that our propertySpec's have room for an event handler and I think that maybe we should 
		// see if we can't trigger those events and then provide for a way for the Plugin/PropertyGrid
		// to update a drop down list afterwards....
		
	}	
	
	public static void OnUpdate (string entityID, double elapsedSeconds)
	{
		KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(entityID);
		if (data == null) throw new Exception();
		
		//System.Diagnostics.Debug.WriteLine ("Door.OnUpdate() - Updating.");
		float lengthInSeconds = AnimationAPI.Animation_GetLength (entityID, "open");
		string state = data.GetString("state");
		double anim_elapsed = data.GetDouble ("animation_elapsed");
		

		if (state == "open")
		{
			System.Diagnostics.Debug.WriteLine ("Door.OnUpdate() - playing Open door animation.");
			// start "open" animation
			string openAnimationName = (string)EntityAPI.GetCustomPropertyValue (entityID, "openAnimationName");
			AnimationAPI.Animation_Play(entityID, openAnimationName, false);
			
			data.SetDouble ("animation_elapsed", 0d);
			data.SetString("state", "opening");
		}
		else if (state == "opening")
		{
			if (anim_elapsed < lengthInSeconds)
				anim_elapsed += elapsedSeconds;
			else 
			{
				anim_elapsed = 0;
				data.SetString ("state", "opened");
			}
			
			data.SetDouble ("open_delay_elapsed", 0d);
			data.SetDouble("animation_elapsed", anim_elapsed);	
		}
		else if (state == "opened")
		{
			// TODO: verify there are no other NPCs in the doorway!
			// close door only after x elapsed seconds
			if (data.GetDouble("open_delay_elapsed") >= data.GetDouble("open_delay"))
			{
				//if (EntityAPI.GetEntitiesInArea())
				//{
				//	
				//}
				string closeAnimationName = (string)EntityAPI.GetCustomPropertyValue (entityID, "closeAnimationName");
				AnimationAPI.Animation_Play (entityID, closeAnimationName, false);
				data.SetString ("state", "closing");
				anim_elapsed = 0;
				data.SetDouble("animation_elapsed", anim_elapsed);
			}
			else
			{
				double delay = data.GetDouble("open_delay_elapsed") + elapsedSeconds;
				data.SetDouble ("open_delay_elapsed", delay);
			}
		}
		else if (state == "closing") 
		{
			data.SetDouble ("open_delay_elapsed", 0d);
			if (anim_elapsed < lengthInSeconds)
			{
				anim_elapsed += elapsedSeconds;
				data.SetDouble("animation_elapsed", anim_elapsed);	
			}
			else 
			{
				// have we run the full animation?  If so, set state to "closed"
				data.SetString ("state", "closed");
				anim_elapsed = 0;
				data.SetDouble("animation_elapsed", anim_elapsed);	
			}
		}
		else
		{
			anim_elapsed += elapsedSeconds;
			data.SetDouble("animation_elapsed", anim_elapsed);	
		}
		
		
		// consume - does it consume a local battery built into the door or mechanical access in case of power failure?
		
		// produce
		
		EntityAPI.SetAIBlackboardData (entityID, data);
		
	}
	
	public static bool Validate (string domainObjectID, string propertyName, object value)
	{
		switch (propertyName)
		{
			// build properties
			case "quality": // construction & craftsmanship quality (typically user doesn't select this
			                // it's determined by the stats of the builder and whether the player or the 
							// builder himself tries to save money
							// and create a cheaper vehicle.
							// A particular builder may have a max quality, but that quality can always wind up being less
							// if the builder thinks he can take advantage of the player and he wont notice.
							// within reason, some components may not all be up to the highest quality even if the
							// builder is not intentionally trying to be a crook.  It may be a bad batch of materials
							// or some automation diagnostics not quite working right.  So maybe there's some margin of error
							// the player gets to play with and if they want guarantee, it could add 50 - 1000% more to the cost.
							// (like ordering a ferrari vs an assembly line car)
				break;
			case "material":
				break;
			case "thickness": // this will replace light, medium, heavy, extra heavy, etc.
				break;
				
			// runtime properties
			case "turnon":
				break;
				
			default:  // not every property has to have any validation code.  Or it may have been handled by a custom rule object
				break;
		}
		return true;
	}	
}

