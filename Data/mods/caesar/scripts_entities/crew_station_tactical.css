using System;
using Game01;
using Game01.GameObjects;

using KeyCommon.Simulation;

using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class Tactical : BaseScript
{
	public static void Initialize(string scriptID)
	{
		string category = "Misc"; //"public properties";
		// create the custom properties	
		Settings.PropertySpec[] properties = new Settings.PropertySpec[8];
		// name, type, category, default value
		// name, type, category, description, default value, editor, converter
		properties[0] = new PropertySpec("description", typeof(string).Name, category,(object)"tactical station");
		properties[1] = new PropertySpec("operator", typeof(string).Name, category, null);

		category = "statistics";
		properties[2] = new PropertySpec("weight", typeof(double).Name, category, 0);
        properties[3] = new PropertySpec("cost", typeof(double).Name, category, 0);
		properties[4] = new PropertySpec("volume", typeof(double).Name, category, 0);
		properties[5] = new PropertySpec("surfacearea", typeof(double).Name, category, 0);
		properties[6] = new PropertySpec("hitpoints", typeof(int).Name, category, 0);
		
		category = "contacts";
		properties[7] = new PropertySpec("contacts", typeof(SensorContact[]).Name, category, null);
		properties[7].IsSerializable = false;

		
		// weapons - available weapons need to be configured during InitializeEntity() i think
		
		
		// add the properties to the entity's script object
		EntityAPI.AddCustomProperties(scriptID, properties);
				
		// create a test rule using an inline delegate rule
		//EntityAPI.AddRule (scriptID, "description", 
		//	new SimpleRule("Name cannot be empty.", 
		//	delegate {return ((string)properties[0].DefaultValue).Length != 0; }));
		
		EntityAPI.AddRule (scriptID, "description", new SimpleRule(1, Rule_Description));				
	}
	
	// InitializeEntity() is useful for setting ai blackboard data 
	// but we can't rely on it for finding and cacheing other Entity IDs because we don't know the order in which they are deserialized.
	public static void InitializeEntity(string entityID)
	{

		KeyCommon.Data.UserData data = new KeyCommon.Data.UserData(); 
		
		data.SetBool("cache_required", true);
		data.SetDouble ("fireelapsed", 0d);
		data.SetDouble ("sensor_contact_prune_hz", 5d);
		data.SetDouble("sensor_contact_last_prune", 0d);
		
		EntityAPI.SetAIBlackboardData(entityID, data);
	}
	
	
	
	#region Rules
	
	private static bool Rule_Description(string entityID, object[] args)
	{
		// we get the value from the args where we know for property rules the value is first and only argument
		string description = (string)args[0];  
		System.Diagnostics.Debug.WriteLine ("Running rule 'Rule_Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);
	}
	#endregion

	public static object Register(string entityID, string parentID)
	{
		// make modifications 
		// this method gets called when restoring components from saved xml and not just during initial asset placement.
		// this means we can perform an auto-tile test here? but then how does our asset placement preview get the correct sub-model to render?
		return entityID;
	}
	
	public static object UnRegister (string entityID, string parentID)
	{

		return entityID;

	}
	
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_SINGLE_DROP;}
		
	// todo: where do we return a bool indicating whether placement is valid?  I cant just hardcode
	// within Interior validity checking reqts for all component types?
	// a Validate function needs to be added to this script and for it to be called by the Interior during assetplacement and during
	// restore from saved file.
	
	public static Vector3d[] QueryCellPlacement (string entityID, string interiorID, Vector3d position, byte cellRotation)
	{
		const double TO_DEGREES = 360d / 256d;
		Vector3d scale, rotation;
		scale.x = 1;
		scale.y = 1;
		scale.z = 1;
		
		
		rotation.x = 0;
		rotation.y = (double)(cellRotation * TO_DEGREES);
		rotation.z = 0;
				
		// tile location is basically x, z pixel coordinate with y as floor level
		// we need to convert this to a celledRegion relative coordinate which will give us
		// a 3D position that represents the CENTER of that tile (not the top/left corner)
		//position = EntityAPI.CellMap_GetTilePosition3D(interiorID, tileLocation);
		Vector3d size = EntityAPI.CellMap_GetTileSize (interiorID);
		
		// assuming this generic component has it's Y position at floor (not centered in it's bbox)
		// then we need to lower position.y we return to be on the floor of the cell.		
		double floorHeight = position.y - (size.y * 0.5);
		position.y = floorHeight;
		
		// return values and dont use EntityAPI to set, since it's a Query and not an Update
		return new Vector3d[] {position, scale, rotation}; 
	}
	
	#endregion

	#region Build statistics
	
	public static void OnCustomPropertyChanged (string entityID, int index)
	{
		switch (index)
		{
			case 1: // operator name
			{
				// NOTE: for now, operators are assigned during Edit mode. Eventually the first officer script
				//       will assign operators as needed
				// get the operatorID from the name. Names of Entities descended from another Entity or Container need to be unique for this to work/
				// Although currently we do not enforce this so it will return the first match
				string vehicleID = EntityAPI.GetOwnerID(entityID);
				if (string.IsNullOrEmpty(vehicleID)) return;
				
				KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(entityID);
				string name = (string)EntityAPI.GetCustomPropertyValue(entityID, "operator");
				if (!string.IsNullOrEmpty(name)) 
				{
					string operatorID = EntityAPI.FindDescendantByName(vehicleID, name);
					data.SetString("operator", operatorID);
				}
				data.SetBool("cache_required", true);
				break;
			}
			default:
				break;
		}
	}
	#endregion

	// todo: i should pass the UserData to OnUpdate() as well as perhaps the custom properties which avoids having to
	//       make calls to get them.  I will still probably have to make calls to assign new values to custom properties
	public static void OnUpdate (string entityID, double elapsedSeconds)
	{
		// perhaps here we can interpolate the contacts new position since sensors operate at a lower frequency and Update() occurs every frame
		string vehicleID = EntityAPI.GetOwnerID(entityID);
		if (string.IsNullOrEmpty(vehicleID)) return;
					
		KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(entityID);
		
		// if this is the first call to OnUpdate(), cache the operatorID, turret, sensors, weapons, and launchers
		bool cacheRequired = data.GetBool ("cache_required");
		if (cacheRequired) 
		{
			string operatorName = (string)EntityAPI.GetCustomPropertyValue(entityID, "operator");
			System.Diagnostics.Debug.WriteLine("crew_station_tactical.css.OnUpdate() - operatorName == " + operatorName);
						
			if (!string.IsNullOrEmpty(operatorName))
			{
				string oID = EntityAPI.FindDescendantByName(vehicleID, operatorName);
				data.SetString("operator", oID);
			}
			else 
				data.SetString("operator", null);
			
			CacheComponents(entityID, data);
			data.SetBool("cache_required", false);
		}
		
		// NOTE: operatorID can point to an NPC or a computer component		
		string operatorID = data.GetString("operator");
		if (string.IsNullOrEmpty(operatorID)) 
		{
			//todo: how is the turret aimed/moving without an operator and no target set?
			System.Diagnostics.Debug.WriteLine("crew_station_tactical.css.OnUpdate() - operator is NULL");
			data.SetBool("cache_required", true);
			return;
		}
		// todo: i think "contacts" property is never cleared so new contacts just get added via "union" operation to the existing list.  
		//       This means destroyed contacts that are removed from the Scene still stay in the "contacts" list and because the refCount
		//       of the destroyed contact seems to not be reaching 0, it's last position can still be queried.
		// todo: ships need a way to consume radar in a "passive" mode without emitting radar on their own so they can run silent.
		//		- this could just be a "passive = true" mode on the radar sensor itself... or might as well just assume its always on.
		// NOTE: contacts are sent to the tactical station by the production of microwaves in sensor_radar.css and then the consumption of microwaves by Vehicles
		// TODO: i probably need more rules on the consumption to determine if a vehicle is gamewise, undetected using RPG rules even if it does "consume" the microwaves.
		
		// NOTE: SensorContacts are added to this tactical station custom properties when detected.  
		// Recall that it is the sensor Entity that emits things like microwaves and that Vehicles (aka ships) that
		// "consume" microwaves will then create the SensorContact struct and add it to the tactical station of the
		// "owner" Entity (aka Vehicle/Ship) of the sensor that emitted the microwaves.
		SensorContact[] contacts = (SensorContact[])EntityAPI.GetCustomPropertyValue(entityID, "contacts");
		if (contacts == null)
		{
			//System.Diagnostics.Debug.WriteLine("crew_station_tactical.css.OnUpdate() - entityID: " + entityID + "' NO CONTACTS");
			return;
		}

		contacts = PruneContacts(contacts, data, elapsedSeconds);
		EntityAPI.SetCustomPropertyValue(entityID, "contacts", contacts);
			
		string targetID = null;
		for (int i = 0; i < contacts.Length; i++)
		{
			//if (contacts[i].IsTarget)
			//{
				// contacts[i].ThreatLevel
				targetID = contacts[i].ContactID; // for testing we will just assume all contacts are targets and we will fire at the first one
				break;
			//}
			// launchers are basically omnidirectional. They dont need to be aimed before firing, they just need a target lock from ship's sensors passed to its missile's guidance system.
			
			// for assigning weapons, we could first assume that all weapons (besides launchers) are on turrets.  
			//		- so we dont really need to cache turrets. We would just string turretID = EntityAPI.GetParent(weaponID)

			// turrets can host multiple weapons, but they can only target the same contact.
			
			
			
			// in dominion wars, ships seem to target one enemy at a time, using phasers and torpedos until its destroyed before moving to the next target.
			// it's not very sophisticated, but it works.
			
			
			// one way to maybe get away from this writer's block, is to make the turrets themselves, our main focus.  Turrets get assigned the target, then
			// when the turret isAimed, we fire the weapons attached to it. Fire() is handled in game01.Rules.Combat 
			// for client/server aspects, we should just use a fixed amount of seconds before Fire() can be called based on how long it will take to aim the turret.
			
			
			// fire() can potentially create a message to the server, where the server determines outcome.
			
			
			// todo: perhaps game01.Combat.Prioritize(contacts) can determine threat levels for us.
			//       It is an RPG rule mechanism afterall, not really "AI".
			
			// of all contacts, determine which are "targets" and not friendly or merely unidentified
			// how many and which weapons do we allocate to each target?  Depends i guess on the threat level.  Threat level can also be dependant on proximity.
			
			// we should allow player to target friendlies in acts of piracy or rebellion.  The crew on board may react very hostile to the player if he makes these sorts of orders
			
			// when do we remove contacts? do we refresh them completley each tick so that if they are evasive or out of range, we lose their contact info?
			// but it would be nice to have a ghost prediction render of the contact for at least a short time
		}
		
		if (string.IsNullOrEmpty(targetID)) return;
		
		// aim at target and fire when ready
		string[] turrets = data.GetStringArray("turrets");
		if (turrets == null) return;
		
		string[] barreledWeapons = data.GetStringArray("weapons");
		if (barreledWeapons == null) return;
		
		
		
		
		
		// // TODO: TEMP TESTING FOR BEAM BILLBOARD
		// string[] currentWeapons2 = GetCurrentTurretWeapons(turrets[0], barreledWeapons);
		// if (currentWeapons2 == null) return;
		// string beamID2 = EntityAPI.FindDescendantByName(currentWeapons2[0], "beam");
		// // set the range of the beam.  The .y component scales the length of the beam. The x component scales the width to match bore size of the barrel
		// double boreSize = 4;// should grab the barrel bounding box and use the height for the bore size
		// double range = 200; // distanceToTarget or range if a miss. For more accurate distance to target, we might need to do a raycast if a "hit" occurs.
		// //                    in fact, if a hit occurs as determined by the server, it should return to us an impactPoint and any sub-Entity that may have been specifically hit.
		// //                    Actually, it should contain all the hit information including any interior crew and/or components damaged and what kind of reaction occured such as any explosion.
		// //                    So omputing "range" here is not how it will ultimately work i think.  But we have proven that simply scaling the beam works as desired.
		// // NOTE: we do not scale or move the vertices of the Billboard element, we simply apply scaling to the beam model or entity.
		// //       This works because the unit billboard min.y is not centered around 0.5, its at 0.0
		 // double length = range;
		 // double width = boreSize; 
		 // Vector3d scale = new Vector3d(width, length, 1d);
		 // EntityAPI.SetPropertyValue (beamID2, "scale", scale);
		 // string pointLightID = EntityAPI.FindDescendantByName(beamID2, "pointlight end");
		
		// // since the pointlight is child of the beam and will inherit any rotation, we only need to adjust the local space z value of the pointlight's position.
		// Vector3d pointLightEndPosition = EntityAPI.GetPositionLocalSpace(pointLightID);
		// // todo: prefabs need to be resaved after setting InheritScale = false for start/end pointlights
		// pointLightEndPosition.z = length; // todo: perhaps length - (pointLightRange / 2d)
		// EntityAPI.SetPositionLocalSpace(pointLightID, pointLightEndPosition);
		// EntityAPI.SetFlag(beamID2, "enable", true);
		// return;
		// // END TEMP HACK

		
		// todo: how do we set the operator of a station?  for starters, an NPC controlled vehicle
		//       Even for player controlled vehicle, the first officer should assign NPCs to stations
		//       Can i assign the crew in the right mouse click menu 
		//       We could have the npc's script "use" a station after they are spawned.
		//       if the crew station operator is null, it assigns itself to the station's "operator" property
		//       It can search for the appropriate station by "name" or "description"
		//       If the captain or first officer, etc, does not exist (eg. dead) than how do we assign operators?
		//       One of the crew (at least) must do it.  The selection for each station should be based on each NPCs attributes
		//       and other factors (rank, faction, XP, etc).  First iteration can be just pure random.
		//       What if we cheat and have the stations themselves find operators? For instance AIAPI.FindOperator(entityID);
		//       Its the same problem as determining which NPC is "in charge."  Someone must be assigned to the "captain's chair" if it exists.
		//                  - WE COULD MAKE THE CAPTAIN'S CHAIR INDESTRUCTABLE and always assign operators.
		//       For this reason, one NPC should be able to function as operator at multiple stations if necessary. It carries a performance penalty however.
		//       Orders being given should have a cooldown period as well.  Perhaps 1 order per station every 10 seconds. If the operator is at two stations, an extra
		//       10 second penalty occurs.
		//       What about an "Admiral" that doesn't necessarily command a single Vehicle but rather a fleet?
		//       Should each ship belong to a faction?  Then we could have a faction script generate and assign crew to vehicles in it's fleet.
		//       When player starts a campaign or mission, the factions should be created and their ships as well.
		//       A campaign perhaps can be thought of a series of missions that must be completed, but perhaps in a branching structure so its not linear.
		//              we can hide the mission structure so the player does not make any association to it being juust a branching set of missions.
		//              perhaps we can dynamically generate some missins?
		// TODO: but when commanding officers die, they must promote someone to a field commission at least? so then this code goes back to something other than a station...
		for (int i = 0; i < turrets.Length; i++)
		{
			// assign target to turret.  Turret will accept an EntityID and use that to find the position in space to target
			EntityAPI.SetCustomPropertyValue(turrets[i], "targetID", targetID);
			//System.Diagnostics.Debug.WriteLine("crew_station_tactical.OnUpdate() - TARGET SET " + targetID);
			bool isAimed = (bool)EntityAPI.GetCustomPropertyValue(turrets[i], "isAimed");
			if (isAimed)
			{
				//System.Diagnostics.Debug.WriteLine("crew_station_tactical.OnUpdate() - IsAimed == TRUE");
				
				// get the weapons associated with this turret (we could have rule that only one weapon can exist, but can have multiple barrels)
				string[] currentWeapons = GetCurrentTurretWeapons(turrets[i], barreledWeapons);
				if (currentWeapons == null) continue;
				
				for (int j = 0; j < currentWeapons.Length; j++)
				{
					string beamID = EntityAPI.FindDescendantByName(currentWeapons[j], "beam");
					bool isFiring = EntityAPI.GetFlag(beamID, "enable");
					if (isFiring)
					{
						double elapsed = (double)EntityAPI.GetCustomPropertyValue(currentWeapons[j], "fireelapsed");
						elapsed += elapsedSeconds;
						
						if (elapsed >= (double)EntityAPI.GetCustomPropertyValue(currentWeapons[j], "fireduration"))
						{
							elapsed = 0d;
							EntityAPI.SetCustomPropertyValue(currentWeapons[j], "cooldownelapsed", 0d);
														
							EntityAPI.SetFlag (beamID, "enable", false);
						}
						EntityAPI.SetCustomPropertyValue(currentWeapons[j], "fireelapsed", elapsed);
						continue;
					}
					else 
					{
						// track the cooldown period
						double elapsed = (double)EntityAPI.GetCustomPropertyValue(currentWeapons[j], "cooldownelapsed");
						elapsed += elapsedSeconds;						
						if (elapsed >= (double)EntityAPI.GetCustomPropertyValue(currentWeapons[j], "cooldowntime"))
						{
							string stationID = entityID;
							GameAPI.PerformRangedAttack(stationID, currentWeapons[j], targetID);
		
							//System.Diagnostics.Debug.WriteLine("crew_station_tactical.OnUpdate() - Firing beam: " + beamID);
							elapsed = 0d;
							// todo: set the end pointlight position and the beam scale to target positin														
							EntityAPI.SetFlag (beamID, "enable", true);
						}
						else 
						{
							EntityAPI.SetFlag (beamID, "enable", false);
						}
						
						EntityAPI.SetCustomPropertyValue(currentWeapons[j], "cooldownelapsed", elapsed);
					}
					// can the weapon be fired? (damaged, "breaker" =false)
					
					// are the weapon(s) associated with this target not in cooldown or within their RoF?
					
					// TODO: below about game01 is wrong.  We are using GameAPI.PerformRangedAttack() 
					// we wait for the results to execute and for it to result in changed properties here in Tactical.css and we perform appropriate animations and fx including enabling of the beam itself for a specified duration.  
					
					
					// result = game01.Rules.Combat.OnFire(weapon, target); todo: we need for OnFire() to send a game message to the server and wait for results
					//  
					// maybe assigning of Target and FireWhenReady are the same message and the server sends the results when both conditions are met?
					
					// does the server packet contain production and if so, where do we handle the production?
					
					// todo: maybe multiple barrel weapons should be treated as a single entity with multiple sub-models.  Then testing for cooldown and such only has to be done once.
				}
			}
			
		}
		
		// does this station have a list<tasks> // tasks would be commands from the Captain or First Officer
		
		// do various weapons currently have assigned targets?  These would exist sorted by priorty in CustomPropertyValue?
		// 	- check the status of assigned targets
		//  - do we have more weapons free to focus on existing targets?
		//	- are existing targets prioritized? do we need to reprioritize based on threatLevel?
		// else, do our sensors find any new potential targets?
		
		// we've decided to fire, but with what weapons and what if any, sub-targetID
		// do we have to align the turret first? 
		// we can assign "targetID" to turret and the turret can just auto-align itself automatically, and here we can EntityAPI.GetCustomPropertyValue(turretID, "isAimed");
		// we may need to use an epsilon since if both vehcile and target are moving, exact alignment might be too difficult to achieve.  
		// But it shouldn't be a problem because we use RPG rules to determine hit, not physical alignment.
		
		
		// we need to classify weapons into ones that are already assigned targets and those that are free to assign a target
		// we also need to classify those that are on turrets. (except launchers)
		// 	- missiles attached to some launchers might not be useable because they are anti-capital ship and not anti-fighter for instance
		
		// helm may need to be given tasks to compliment tactcical's tasks.
	}
	
	private static string[] GetCurrentTurretWeapons (string turretID, string[]weaponIDs)
	{
		System.Collections.Generic.List<string> results = new System.Collections.Generic.List<string>();
		for (int i = 0; i < weaponIDs.Length; i++)
		{
			string parentID = EntityAPI.GetParentID(weaponIDs[i]);
			if (turretID == parentID)
				results.Add(weaponIDs[i]);
		}
		
		return results.ToArray();
	}
	
	// todo: should this be moved to Game01.Rules.Combat?
	private static void Fire(string weaponID, string targetID, KeyCommon.Data.UserData data)
	{
		// is there a malfunction?
		
		// if the fire hit successfully, fill out a Production struct
		// this needs to include the productID and unitValue and sent to the consumer (aka target)
		
		// we need to assign armor values to the target and not just hitpoints
		
		// animate the laser if we are firing. That should be done by the beam itself during OnRender()
		
	}
	
	private static SensorContact[] PruneContacts(SensorContact[] contacts, KeyCommon.Data.UserData data, double elapsedSeconds)
	{
		if (contacts == null || contacts.Length == 0) return contacts;
		
		// update the elapsed time the contact has existed in the contacts list, but only prune at specific Hz
		for (int i = 0; i < contacts.Length; i++)
		{
			contacts[i].Age += elapsedSeconds;
		}
		
		double hz = data.GetDouble ("sensor_contact_prune_hz");
		double pruneElapsed = data.GetDouble("sensor_contact_last_prune");
		pruneElapsed += elapsedSeconds;
		data.SetDouble("sensor_contact_last_prune", pruneElapsed);
		
		if (pruneElapsed < hz) return contacts;
		
		// remove stale contacts and destroyed contacts
		System.Collections.Generic.List<SensorContact> tmp = new System.Collections.Generic.List<SensorContact>();
		for (int i = 0; i < contacts.Length; i++)
			tmp.Add(contacts[i]);
		
		for (int i = 0; i < tmp.Count; i++)
		{
			if (tmp[i].Age >= 5d)
				contacts = RemoveContact(contacts, tmp[i]);
		}
		
		data.SetDouble("sensor_contact_last_prune", 0d);
		
		// todo: i think the weapon (eg turret) needs to update it's IsAimed too when the target changes including when target = null
		//       the "IsAimed" data.Bool should revert to false if the target changes.  If the target is null, we should move turret to rest position
		
		return contacts;
	}
	
	private static SensorContact[] RemoveContact(SensorContact[] contacts, SensorContact element)
	{
		int loc = 0;
		bool found = false;
		foreach (SensorContact t in contacts)
		{
			if (t.Equals(element))
			{
				found = true;
				break;
			}
			loc++;
		}
		if (!found)
		{
			return contacts;
		}

		System.Collections.Generic.List<SensorContact> tmp = new System.Collections.Generic.List<SensorContact>();
		for (int i = 0; i < contacts.Length; i++)
		{
			if (i != loc) tmp.Add(contacts[i]);
		}
		if (tmp.Count > 0)
		{
			contacts = tmp.ToArray();
		}
		else
		{
			contacts = null;
		}	
		
		return contacts;
	}
	
	private static void CacheComponents(string entityID, KeyCommon.Data.UserData data)
	{
		string vehicleID = EntityAPI.GetOwnerID(entityID);
		// todo: we might be able to re-initialize during "refit" 

		// cache sensors
		// we need to enable/disable sensors
		string[] sensors = EntityAPI.GetComponentsOfType(vehicleID, (uint)Enums.COMPONENT_TYPE.SENSOR_RADAR); // sensors will update themselves and we can grab the contact data from them. 
		data.SetStringArray("sensors", sensors);

		// todo: at runtime, we can probably call game00.dll and pass in the IDs of all sensors to build a consolidated list of contacts with no duplicates.
		// each sensor can still maintain lists of contacts so if one sensor fails, the remaining sensors still have it, but game00.dll will allow us to get list which we can also
		// pass a filter so that we only get enemey, friendly, unkowns, or all, etc and sorted by threat or distance
		
		// todo: have contacts changed?  do we need to re-assign targets?
		// todo: which contacts are disabled or destroyed?  remember, in future versions multiple friendlies may be firing on same targets and may achieve kills
				
				
		// cache turrets
		string[] turrets = EntityAPI.GetComponentsOfType(vehicleID, (uint)Enums.COMPONENT_TYPE.HULL_FULL_TURRET);
		if (turrets != null)
		{
			for (int i = 0; i < turrets.Length; i++)
			{
				string turretName = (string)EntityAPI.GetPropertyValue(turrets[i], "name");
				System.Diagnostics.Debug.WriteLine("crew_station_tactical.CacheComponents() - Found turret " + turretName + " with ID=" + turrets[i] );
			}
		}
		data.SetStringArray("turrets", turrets);
		
		// turrets need a maxspeed of rotation and any rotation limits.
		
		// TODO: how do we know which weapons are on which turret if applicable and whether we are aimed correctly to fire?
		// 		well, we can check weapon.Parent and see if its a FULL_TURRET or HALF_TURRET
		//      if it's parent is a turret, we can query if the turret is aimed or still rotating or unavailable due to firing arc issue or disabled/damaged
		string[] barreledWeapons = EntityAPI.GetComponentsOfType(vehicleID, (uint)Enums.COMPONENT_TYPE.WEAPON_LASER); //, (uint)Enums.COMPONENT_TYPE.WEAPON_TURBO_LASER);
		if (barreledWeapons != null)
		{
			for (int i = 0; i < barreledWeapons.Length; i++)
			{
				string weaponName = (string)EntityAPI.GetPropertyValue(barreledWeapons[i], "name");
				System.Diagnostics.Debug.WriteLine("crew_station_tactical.CacheComponents() - Found weapon " + weaponName + " with ID=" + barreledWeapons[i] );
			}
		}
		data.SetStringArray("weapons", barreledWeapons);

		// does each weapon store elapsed since last fired?  
		// as well as "isFiring"
		// or does this script store all that?
		// does the weapon have a firing arc it must comply with?
		// for turrets, we would use the min/max angles for rotation and min/max azimuth
		
		// cache missile launchers
		// NOTE: missiles have a minimum and maximum range (range for maximum can be assumed to be delta-V)
		string[] launchers = EntityAPI.GetComponentsOfType(vehicleID, (uint)Enums.COMPONENT_TYPE.WEAPON_MISSILE_LAUNCHER);
		data.SetStringArray("launchers", launchers);
		
		// we need to track which weapons are assigned to which target and even sub-Entity of their respective targets
		// we also need to maintain targets from frame to frame.  
		
		// is our weapon disabled/damaged?
		// is the energy output, accuracy, RoF or range impacted?

		
		// is our weapon within firing range of target?

		// is it tactical's job to determine targeting priorities particularly when there aren't enough weapons for each target?
		// for instance, point defense against incoming missiles might be needed.
		
		// if a target or this ship is engaged in evasive maneuvers, target locks may be lost
		
		// do we need to determine the operators reaction time and proficiency?
		
		// on each weapon fire, is there a chance of malfunction? (factor in damage and also apply wear and tear after each firing)
	
		// sticking with our production/consumption model, when we find there is damage, we create the production on a case by case basis and then allow the consumer to respond to it.
		
		// our tactical station operator needs to update customproperty on turret to target an EntityID.  
		//	- actually its the this tactical station script that does it, but uses the operators skill and proficiency and reaction time to handle operations.
		
		// then when the angle is correct, fire the beam.  On "fire" we go to game00.Rules.Combat.CalcHitOrMiss() 
		// then we enable the beam Entity and let it run a render cycle with "isFiring" = true and adding the elapsed firing time to it.
		// the Beam needs a distance parameter so we can move the endpoint vertices.  We will not use scaling of the z axis.
	}
}

