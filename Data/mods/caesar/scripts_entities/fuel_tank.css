using System;
using Game01;
using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyCommon.Simulation;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class FuelTank : BaseScript
{
	public static void Initialize(string domainObjectID)
	{
		string category = "public properties/misc";
		// create the custom properties	
		Settings.PropertySpec[] properties = new Settings.PropertySpec[16];
		// name, type, category, default value
		// name, type, category, description, default value, editor, converter
		properties[0] = new PropertySpec("description", typeof(string).Name, category,(object)"fuel tank");
		category = "public properties/statistics";
		properties[1] = new PropertySpec("weight", typeof(double).Name, category, 0.0);
        properties[2] = new PropertySpec("cost", typeof(double).Name, category, 0.0);
		properties[3] = new PropertySpec("volume", typeof(double).Name, category, 0.0);
		properties[4] = new PropertySpec("surfacearea", typeof(double).Name, category, 0.0);
		properties[5] = new PropertySpec("hitpoints", typeof(int).Name, category, 0);
		properties[6] = new PropertySpec("fuel capacity", typeof(double).Name, category, 0.0);
		properties[7] = new PropertySpec("remaining", typeof(double).Name, category, 0.0);
		properties[8] = new PropertySpec("damage", typeof(int).Name, category, 0); // hitpoints lost
		// pressure rating
		// tank pressure ; // the current pressure inside the tank.
		                   // we can maybe also assume that when fuel is drained from
						   // the tank by consuming devices, that the pressure is maintained by
						   // adding an inert gas.
	
		// Fuel links should be part of the engineering screen and entities maintained by the celledregion itself
		//	- status (ok/leak rate)
		//  - repair
		//  - valve open/closed
		// 
		
		category = "Build";
		properties[9] = new PropertySpec("capacity", typeof(double).Name, category, 100.0);
		properties[10] = new PropertySpec("fuel type", typeof(string).Name, category, "hydrogen");
		properties[11] = new PropertySpec("materials quality", typeof(string).Name, category, "", "", "", typeof (MaterialQualityConverter).AssemblyQualifiedName);
		properties[12] = new PropertySpec("craftsmanship", typeof(string).Name, category, "", "", "", typeof (CraftsmanshipConverter).AssemblyQualifiedName);
		properties[13] = new PropertySpec("tech level", typeof(int).Name, category, "", 7, "", typeof (TechLevelConverter).AssemblyQualifiedName);
		
		category = "private variables";
		// todo: minimum tech level defined in rule  
				
		// runtime statistics
		category= "Operations";
		// todo: i think subscribers is probably unneeded once i get links working but for now
		// we'll use a subscribers list
		properties[14] = new PropertySpec("subscribers", typeof(string[]).Name, category, null);
		properties[15] = new PropertySpec("repair", typeof(float).Name, category, 0.0f);

		
		
		// add the properties to the entity's domain object
		EntityAPI.AddCustomProperties(domainObjectID, properties);
		
				
		EntityAPI.AddRule (domainObjectID, "description", new SimpleRule(1, Rule_Description));
		
		// read only property rules
		EntityAPI.AddRule (domainObjectID, "cost", new SimpleRule(2, Rule_ReadOnly));
		EntityAPI.AddRule (domainObjectID, "weight", new SimpleRule(2, Rule_ReadOnly));
		EntityAPI.AddRule (domainObjectID, "volume", new SimpleRule(2, Rule_ReadOnly));
		EntityAPI.AddRule (domainObjectID, "surface area", new SimpleRule(2, Rule_ReadOnly));
		EntityAPI.AddRule (domainObjectID, "hitpoints", new SimpleRule(2, Rule_ReadOnly));
		EntityAPI.AddRule (domainObjectID, "damage", new SimpleRule(2, Rule_ReadOnly));
		EntityAPI.AddRule (domainObjectID, "remaining", new SimpleRule(2, Rule_ReadOnly));
		
				
		// queryable mods
		// assign values to specific "mod" properties that the celledregion will query
		// to determine what modifications this domainobject will have on the parent.
		// so for a celledregion parent, maybe it modifies the map layer
		// for some other entity, maybe it modifies a crew members skill level.
		
		// so celledRegion can query the layout of this entity
		// it can query the allowed places it can be set/orientation <-- there's no need to put that in the DomainObject explicitly
				
				
		// add fuel distribution to consumers which uses production mechanism
		EntityAPI.AssignProductionHandler(domainObjectID, Production_Update);

		// add consumption potential of fuel from another source so that we can refill the tank when depleted
		//EntityAPI.CreateConsumption(domainObjectID, "fuel", (uint)UserConstants.Product.Fuel, Consumption_Fuel);
		
		// create any stores.  Is this necessary?  The idea is that most production is emitted and used
		// or lost.  But a store defines a place where production can be stored and then used later.
		// A battery for example doesn't produce, but it can store production.
		// Obsolete? - i think the decision to use storage as a type of production which distributes
		// but which will stop functioning when remaining fuel is gone.
		//EntityAPI.CreateStore(domainObjectID, productID, capacity);
				
	}
	
	public static void InitializeEntity(string entityID)
	{
		EntityAPI.SetEntityFlag(entityID, (uint)UserConstants.AutoGenerateFootprint, true);
	}
	
	#region Rules
	private static bool Rule_ReadOnly (object[] args)
	{
		return false; 
	}
	
	private static bool Rule_Description(object[] args)
	{
		// we get the value from the args where we know for property rules the value is first and only argument
		string description = (string)args[0];  
		System.Diagnostics.Debug.WriteLine ("Running rule 'Rule_Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);
	}
		
	public static bool Validate (string domainObjectID, string propertyName, object value)
	{
		switch (propertyName)
		{
			// build properties
			case "quality": // construction & craftsmanship quality (typically user doesn't select this
			                // it's determined by the stats of the builder and whether the player or the 
							// builder himself tries to save money
							// and create a cheaper vehicle.
							// A particular builder may have a max quality, but that quality can always wind up being less
							// if the builder thinks he can take advantage of the player and he wont notice.
							// within reason, some components may not all be up to the highest quality even if the
							// builder is not intentionally trying to be a crook.  It may be a bad batch of materials
							// or some automation diagnostics not quite working right.  So maybe there's some margin of error
							// the player gets to play with and if they want guarantee, it could add 50 - 1000% more to the cost.
							// (like ordering a ferrari vs an assembly line car)
				break;
			case "material":
				break;
			case "thickness": // this will replace light, medium, heavy, extra heavy, etc.
				break;
				
			// runtime properties
			case "turnon":
				break;
				
			default:  // not every property has to have any validation code.  Or it may have been handled by a custom rule object
				break;
		}
		return true;
	}
	#endregion

	public static object RegisterChild(string entityID, string childID)
	{
		// make modifications 

		return entityID;
	}
	
	public static object UnRegisterChild (string entityID, string childID)
	{

		return entityID;

	}
	
	public static object OnAddedToParent(string entityID, string parentID)
	{
		// make modifications 

		return entityID;
	}
	
	public static object OnRemovedFromParent (string entityID, string parentID)
	{

		return entityID;

	}
	
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_SINGLE_DROP;}
	
	public static Vector3d[] QueryCellPlacement (string celledRegionID, Vector3i tileLocation, byte cellRotation)
	{
		const double TO_DEGREES = 360d / 256d;
		Vector3d position, scale, rotation;
		scale.x = 1;
		scale.y = 1;
		scale.z = 1;
		
		
		rotation.x = 0;
		rotation.y = (double)(cellRotation * TO_DEGREES);
		rotation.z = 0;
				
		// tile location is basically x, z pixel coordinate with y as floor level
		// we need to convert this to a celledRegion relative coordinate which will give us
		// a 3D position that represents the CENTER of that tile (not the top/left corner)
		position = EntityAPI.CellMap_GetTilePosition3D(celledRegionID, tileLocation);
		Vector3d size = EntityAPI.CellMap_GetTileSize (celledRegionID);
		
		// assuming this generic component has it's Y position at floor (not centered in it's bbox)
		// then we need to lower position.y we return to be on the floor of the cell.		
		double floorHeight = position.y - (size.y * 0.5);
		position.y = floorHeight;
		
		// return values and dont use EntityAPI to set, since it's a Query and not an Update
		return new Vector3d[] {position, scale, rotation}; 
	}
	
	#endregion


	#region Build statistics
	
	public static void OnCustomPropertyChanged (string entityID, int index)
	{
	
		// when a build property changes, run BuildUpdate() to recompute statS?
		// Not exactly.  We instead set a flag that the "stats" are dirty 
		// this way future property changes dont result in multiple calls to update stats.
		// 
		switch (index)
		{
			case 0:
			case 1:
			case 2:
				break;
			case 9:
			case 10:
			case 11:
			case 12:
			case 13:
				EntityAPI.SetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY ,true);
				break;
			default:
				break;
		}
	}
	
	public static void OnUpdate (string entityID, double elapsedSeconds)
	{
		// clear previously produced units from last tick
		// produce
		// retreive unit produced during previous tick
		// run the consumer
		if (EntityAPI.GetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY) == true)
		{
			UpdateStats (entityID);
		}
	}
	
	private static void UpdateStats (string entityID)
	{
		// const double litersperhour = 3.78541;
		// const double literspersecond = litersperhour / (60 * 60);
		// int tl = (int)EntityAPI.GetCustomPropertyValue (entityID, "tech level");
		
		// // for fuel tanks, higher craftsmanship and materials quality means
		// // it can be filled to higher capacity at the same volume by increasing
		// // the pressurization.  
		// float craftsmanship = UserFunctions.GetCraftsmanshipCoefficient ((string)EntityAPI.GetCustomPropertyValue (entityID, "craftsmanship"));
		// float materialsquality = UserFunctions.GetMaterialsQualityCoefficient((string)EntityAPI.GetCustomPropertyValue (entityID, "materials quality"));
		
		
		// double thrust = (double)EntityAPI.GetCustomPropertyValue (entityID, "thrust");
		// double weight = 0.325 * thrust + 4000.0;
		// weight = UserFunctions.CalcComponentModifiedWeight (weight, tl, materialsquality);
		
		// double cost = weight * 25.0; // cost automatically increases or decreases with quality materials by calculating
		                             // // cost after calculating the modified weight.
		// cost = UserFunctions.CalcComponentModifiedCost (cost, tl, craftsmanship);
		// double volume = UserFunctions.CalcComponentVolume(weight);
		// double fuel = 0.5 * thrust * literspersecond;  // hydrogen or h20,  hydrogen provides slightly better consumption 
		// fuel = UserFunctions.CalcComponentsModifiedFuelConsumption (fuel, craftsmanship);
				
		
		// double surfacearea = UserFunctions.CalcComponentSurfaceArea (volume);
		// int hitpoints = UserFunctions.CalcComponentHitpoints(surfacearea);
		
		// // todo: condense into a single call
		// EntityAPI.SetCustomPropertyValue (entityID, "cost", cost);
		// EntityAPI.SetCustomPropertyValue (entityID, "weight", weight);
		// EntityAPI.SetCustomPropertyValue (entityID, "volume", volume);
		// EntityAPI.SetCustomPropertyValue (entityID, "fuel usage", fuel);
		// EntityAPI.SetCustomPropertyValue (entityID, "surfacearea", surfacearea);
		// EntityAPI.SetCustomPropertyValue (entityID, "hitpoints", hitpoints);
		
		EntityAPI.SetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY ,false);
	}	
	#endregion
	
	#region Run-time
	// Fuel tanks use the "production" mechanism to distribute fuel to subscribed components.
	// In the case of a fuel tank inside a ship used to power engines, the fuel tank produces
	// fuel that is consumed by the interior celled region itself.  Then it is the celled region
	// which distributes fuel based on tile mask flags that indicate whether there is a tank pipe 
	// for which to "flow" the fuel to a consuming component such as an engine.
	// In this way a proper simulation of fuel flow is achieved and "fuel lines" can be cut
	// by destroying sections of the ship that lay between a tank and a consuming device.
	// todo: do we assume damaged lines are automatically valve sealed when damaged?
	//       or must an engineer or repair technician do it manually?
	//       fuel leak fires? hydrogen could cause major explosion?
	public static Production[] Production_Update (string entityID, double elapsedSeconds)
	{
		// http://orbitalvector.com/Deep%20Space%20Propulsion/Fission%20Rockets/Fission%20Rockets.htm
		// http://news.discovery.com/space/zooms/project-bifrost-interstellar-space-fission-120120.html
		// http://www.projectrho.com/public_html/rocket/enginelist.php
		
		
		// if not installed in a vehicle, no production
		string vehicleID = EntityAPI.GetOwner (entityID);
		if (string.IsNullOrEmpty(vehicleID)) return null;
		
		// is this tank entity destroyed?
		
		// is our remaining fuel at 0?
		object totalFuel = EntityAPI.GetCustomPropertyValue (entityID, "remaining");
		if (totalFuel == null || (double)totalFuel == 0.0) return null;
		
		
		Production[] result = new Production[1];
		
		// fuel distribution to all linked systems only involves sending one
		// "production" result to the Ship Container entity which will take care of
		// deducting the correct amount of fuel as it distributes to all linked consuming
		// devices.
		
		// fuel (gets applied to the owner vehicle)
		result[0].SourceEntityID = entityID;
		result[0].ProductID = (uint)UserConstants.Product.Fuel;
		result[0].UnitValue = (double) totalFuel;  
		result[0].UnitCount = 1; // infinite production can be distributed to all consumers with no regard for priority since there is enough to supply all relevant consumers.
		result[0].DistributionMode = DistributionType.Container; // todo: or maybe Container and then
		                                                         // the container if it's celledregion it can 
																 // distribute using it, else if its something else
																 // it can use some other method.  Leave it 
																 // DistributionType.Container ?
																 // Afterall, we dont have a celledRegion script
																 // but we do have a ship.css script where we can
																 // define consumption of power/fuel/life support
																 // as well as gas/air born pathogens/etc
			
		
		
		
		
		return result;
	}
	
	// A fuel tank is replenished by consumping fuel from another fuel producing component.
	public static Consumption Consumption_Fuel (string entityID, Production production, double elapsedSeconds)
	{
		Consumption result;

		
		return result;
	}
	
	
	
	public static void OnRender (string contextID, string entityID, string modelID, string shaderID, 
	Vector3d cameraSpacePosition, double elapsedSeconds)
	{
	}
	
	#endregion
}
