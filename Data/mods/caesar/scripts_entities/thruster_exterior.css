using System;
using Game01;
using KeyCommon.Simulation;
using Keystone.Types;
using Keystone.CSG;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class Exterior_Engine : BaseScript
{
	public static void Initialize(string domainObjectID)
	{
		string category = "public properties";
		// create the custom properties	
		Settings.PropertySpec[] properties = new Settings.PropertySpec[2];
		// name, type, category, default value
		// name, type, category, description, default value, editor, converter
		properties[0] = new PropertySpec("description", typeof(string).Name, category, "exterior thruster");

		category = "private variables";

		
		category= "operations";
		properties[1] = new PropertySpec("on", typeof(bool).Name, category, false);
		
		
		// add the properties to the entity's domain object
		EntityAPI.AddCustomProperties(domainObjectID, properties);
				
		// create a test rule using an inline delegate rule
		//EntityAPI.AddRule (domainObjectID, "description", 
		//	new SimpleRule("Name cannot be empty.", 
		//	delegate {return ((string)properties[0].DefaultValue).Length != 0; }));
		
		EntityAPI.AddRule (domainObjectID, "description", new SimpleRule(1, Rule_Description));
		// uses SI derived units, thus for thrust it is the "newton" 
		// http://en.wikipedia.org/wiki/SI_derived_unit
				
		// queryable mods
		// assign values to specific "mod" properties that the celledregion will query
		// to determine what modifications this domainobject will have on the parent.
		// so for a celledregion parent, maybe it modifies the map layer
		// for some other entity, maybe it modifies a crew members skill level.
		
		// so celledRegion can query the layout of this entity
		// it can query the allowed places it can be set/orientation <-- there's no need to put that in the DomainObject explicitly
				
		// force production handler runs every physics tick
		EntityAPI.AssignForceProductionHandler(domainObjectID, Force_Production_Update);
		
		// regular production handler runs at seperate hz (possibly once per frame)
		EntityAPI.AssignProductionHandler(domainObjectID, Production_Update);

		// crytek cryengine - local spawnParams = {};
		//spawnParams.class = "BasicEntity";
		//spawnParams.archetype=props.Archetype;
		//spawnParams.name = self:GetName().."_spawnedentity_"..self.spawncount;
		//spawnParams.flags = 0;
		//spawnParams.orientation = {x=0,y=0,z=0};
		//spawnParams.position=self:GetPos();
		//spawnParams.scale = nil;
		//local spawnedEntity = System.SpawnEntity(spawnParams);

		// if this engine, spawns a "hardpoint" that is a specific entity
		// and which this engine assigns itself as "owner", 
	}
	
	#region Rules
	private static bool Rule_ReadOnly (object[] args)
	{
		return false; 
	}
	
	private static bool Rule_Description(object[] args)
	{
		// we get the value from the args where we know for property rules the value is first and only argument
		string description = (string)args[0];  
		System.Diagnostics.Debug.WriteLine ("Running rule 'Rule_Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);
	}
	#endregion

	public static object RegisterChild(string entityID, string childID)
	{
		// make modifications 
		
		return entityID;
	}
	
	public static object UnRegisterChild (string entityID, string childID)
	{

		return entityID;

	}
	
	public static object OnAddedToParent(string entityID, string parentID)
	{
		// here we do some per Entity modifications such as setting entity flags
		
		return entityID;
	}
	
	public static object OnRemovedFromParent (string entityID, string parentID)
	{

		return entityID;

	}
	
	#region PlacementTool related
	public static uint QueryPlacementBrushType () { return (uint)UserConstants.BRUSH_TYPE.BRUSH_SINGLE_DROP;}
	
	#endregion

	#region Build statistics
	
	public static void OnCustomPropertyChanged (string entityID, int index)
	{
		
		// when a build property changes, run BuildUpdate() to recompute statS?
		// Not exactly.  We instead set a flag that the "stats" are dirty 
		// this way future property changes dont result in multiple calls to update stats.
		// 
		switch (index)
		{
			case 0:
			case 1:
			case 2:
				break;
			case 8:
			case 9:
			case 10:
			case 11:
			case 12:
				EntityAPI.SetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY ,true);
				break;
			default:
				break;
		}
	}
	
	public static void OnUpdate (string entityID, double elapsedSeconds)
	{
		// clear previously produced units from last tick
		// produce
		// retreive unit produced during previous tick
		// run the consumer
		if (EntityAPI.GetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY) == true)
		{

		}

		// read flag to determine if we have fuel
		
		// read property if we're on
		
		// http://www.youtube.com/watch?v=r9Xhjmg3Wf8 <-- really nice rumbly powerful looking / sounding engine thrust plumes
		// get state of the plume emitter flags so we know whether to continue ramping up
		// or cool down, register new if just turning on, unregister if plume is now out.
		// are we damaged and should emit black smoke?
		// compute's the bbox center and then moves the center.z = center.z - (center.depth / 2);
		// FXAPI.Register( helper.computeexternalposition(entityID), vector3d offset, length, radius, color, etc);
		
		// external plume emitter management
		// external flare management
		
		// register / unregister sound - wait, actually ithink
		// rather than AudioAPI.Register() for these 3d sounds we implement a sound node that hosts
		// an audio clip resource and the sound node can track the playback of the sound and the 3d audio
		// as camera moves.  
		// AudioAPI.Register(); // todo: like our hexalfares, can we set sound's paths in custom properties?
		// 	// http://castle-engine.sourceforge.net/x3d_implementation_sound.php
	//
		
		// are we destroyed and need to explode on the inside of the ship?
		
	}
	
	#endregion
	
	#region Run-time
	public static Production[] Production_Update (string entityID, double elapsedSeconds)
	{
		return null;
	}
	
	public static Production[] Force_Production_Update (string entityID, double elapsedSeconds)
	{
		// http://orbitalvector.com/Deep%20Space%20Propulsion/Fission%20Rockets/Fission%20Rockets.htm
		// http://news.discovery.com/space/zooms/project-bifrost-interstellar-space-fission-120120.html
		// http://www.projectrho.com/public_html/rocket/enginelist.php
		//
		// TODO: a fission rocket engine
		// consumes water, but intially it must be filled with radioactive 
		// fuel and then regulated with control rods (control rods can be damaged)
		// - thus a fission rocket consumes internal fuel as well 
		//		- but i think the idea is that the rocket consumes its internal fuel and when it runs out the entire thing must essentially be refurbished or just replaced.  After 15 years you'll likely
		// not even want to replace it.  You're better off buying a new engine.
		// - this internal fuel is needed before the reactor can be turned on.  
		// - this internal fuel 
		// or more detailed if/else which allows for some heat
		// to still be emitted if cooling down
		
		// if not installed in a vehicle, no production
		string vehicleID = EntityAPI.GetOwner (entityID);
		if (string.IsNullOrEmpty(vehicleID)) return null;
		
		// and we have consumed power from previous tick, we can produce thrust
		bool hasFuel = EntityAPI.GetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_NO_FUEL);
		if (hasFuel == false) 
		{
			// intitiate shutdown?  
			// set ON = false.
			// set THROTTLE = 0.0
			// unregister plume emitter if it was active (we can use flags for determining this)
			return null;
		}
		// if the engine is turned off, no production
		object val = EntityAPI.GetCustomPropertyValue (entityID, "on");
		if (val == null || (bool)val == false) return null;
		
		// if throttle is 0.0, no production
		val = EntityAPI.GetCustomPropertyValue (entityID, "throttle");
		if (val == null) return null;
		float throttle = (float)val;
		if (throttle == 0.0f) return null;
		
		// if thrust amount build option == 0.0, no production
		val = EntityAPI.GetCustomPropertyValue (entityID, "thrust");
		if (val == null) return null;
		double maxthrust = (double)val;
		if (maxthrust == 0.0) return null;
		
		Production[] result = new Production[1];
		
			
		// modify thrust by damage above certain threshold
		double modifiedThrust = maxthrust;
		
		// thrust (gets applied to the owner vehicle)
		result[0].SourceEntityID = entityID;
		result[0].ProductID = (uint)UserConstants.Product.Thrust;
		result[0].UnitValue = modifiedThrust;  
		result[0].UnitCount = 1; // infinite production can be distributed to all consumers with no regard for priority since there is enough to supply all relevant consumers.
		result[0].DistributionMode = DistributionType.Container; 
		// our FilterTest just needs to fit the signature
		result[0].DistributionFilter = FilterTest;
				
		// todo: wouldn't it be better to use a property here?  This way a production distribution list
		// can be viewed through GUI.  Now in the case of production that goes to a vehicle, we can
		// just add a 3 = owner_vehicle distribution mode that will automatically handle this and no 
		// distribution list for thrust needed at all.
		result[0].Consumers = new string[]{vehicleID};  
		// TODO: here can we add a DistributionFilter function?
		//       The problem is, we would need to run alot of EntityAPI functions i suspect
		//       to get access to the entity properties we need.
		//       Take a product match filter for example, we want to test the result[0].ProductID
		//       with an entity.domainObject.Consumers.ContainsKey(productID)
		// TODO: an example involving sensor contacts needs to involve distance tests,
		//       and skill tests for the sensors and the sensor operator if any,
		//       because if these filter functions are written here, then using api functions
		//       will be required and the downside there is, it requires a lookup to get the entity
		//       each time... although... i think i will optimize our EntityAPI to always cache the
		//       last used Entity so that any one script only incurs that hit once.
		// TODO: so lets try to figure out with gravity and a single star
		//       a way to test our FILTER function.
		//       Let's disregard what the script needs to contain for now and we'll just return
		//       TRUE;
		//

		
		// light (detectable)
		
		// heat (damage for craft that gets too close and infrared detectable based on output level)
		
		// blast (damage)
		
		
		return result;
	}
	
	public static bool FilterTest (Production production)
	{
		return true;
	}
	
	
	
	public static void OnRender (string contextID, string entityID, string modelID, string shaderID, 
	Vector3d cameraSpacePosition, double elapsedSeconds)
	{
	}
	
	#endregion
}

