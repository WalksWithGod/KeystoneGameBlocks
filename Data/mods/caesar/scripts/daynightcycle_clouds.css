using System;
using Game01.GameObjects;
using KeyCommon.Simulation;
using KeyCommon.Traversal;
using Keystone.Types;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyScript.Rules;
using Settings;

public class DayNightCycle_Clouds : BaseScript
{
	public static void Initialize(string domainObjectID)
	{
		string category = "public properties";
		Settings.PropertySpec[] properties = new Settings.PropertySpec[9];
		properties[0] = new PropertySpec("description", typeof(string).Name, category, "day/night cycle clouds");

		properties[1] = new PropertySpec("windpower", typeof(Vector2f).Name, category, new Vector2f(0.001f, 0.001f));
		properties[2] = new PropertySpec("outerwindfactor", typeof(float).Name, category, 0.5f);
		
		properties[3] = new PropertySpec("cloudstranslationinner", typeof(Vector2f).Name, category, Vector2f.Zero());
		properties[4] = new PropertySpec("cloudstranslationouter", typeof(Vector2f).Name, category, Vector2f.Zero());
		
		properties[5] = new PropertySpec("cloudsnightcolor", typeof(Vector3f).Name, category, new Vector3f(0.175f, 0.175f, 0.2f));
		properties[6] = new PropertySpec("cloudsdaycolor", typeof(Vector3f).Name, category, new Vector3f(0.9f, 0.9f, 0.9f));

		properties[7] = new PropertySpec("cloudssize", typeof(Vector2f).Name, category, new Vector2f(1.8f, 3.75f));
		properties[8] = new PropertySpec("layersopacity", typeof(Vector2f).Name, category, new Vector2f(1f, 0.85f));
		
		// add the properties to the entity's domain object
		EntityAPI.AddCustomProperties(domainObjectID, properties);
	}
	
	public static void InitializeEntity(string entityID)
	{	
		// set stats flag as dirty so OnUpdate() will call UpdateStats() first time through
		EntityAPI.SetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY ,true);
		
		// Entity FLAGS (as opposed to Component flags) should be set here as they are per entity
		EntityAPI.SetEntityFlag(entityID, (uint)UserConstants.ExplicitEvents, true);
		EntityAPI.SetEntityFlag(entityID, (uint)UserConstants.EF_Dynamic, false);
	}
	
	public static object RegisterChild(string entityID, string childID)
	{
		// make modifications 

		return entityID;
	}
	
	public static object UnRegisterChild (string entityID, string childID)
	{

		return entityID;

	}
	
	public static object OnAddedToParent(string entityID, string parentID)
	{
		// make modifications 

		return entityID;
	}
	
	public static object OnRemovedFromParent (string entityID, string parentID)
	{

		return entityID;
	}
	
	
	#region GUI // http://www.antlr.org/wiki/display/ST/Examples
	public static string GUILayout_GetMarkup (string entityID, PickResultsBase pick)
	{
		return "<html><body>TODO: ATMOSPHERE</body></html>";
			
	}
	
	// <summary>
	// Handler for all link clicks within the layout.
	// </summary>
	// <param name="entityID"></param>
	// <param name="name">Name of specific button that triggered the event.</param>
	public static void GUILayout_LinkClick(string entityID, string name)
	{
		System.Diagnostics.Debug.WriteLine("GUILayout_LinkClick() - '" + name + "'");

		switch (name)
		{
			default:
				System.Diagnostics.Debug.WriteLine("GUILayout_LinkClick() - Unexpected link '" + name + "'");
				break;
		}
	}
	
	// <summary>
	// Handler for all button clicks within the layout.
	// </summary>
	// <param name="entityID"></param>
	// <param name="name">Name of specific button that triggered the event.</param>
	public static void GUILayout_ButtonClick(string entityID, string name)
	{
		System.Diagnostics.Debug.WriteLine("GUILayout_ButtonClick() - '" + name + "'");

		switch (name)
		{
			default:
				System.Diagnostics.Debug.WriteLine("GUILayout_ButtonClick() - Unexpected button '" + name + "'");
				break;
		}
	}

	// <summary>
	// Handler for all checkbox clicks within the layout.
	// </summary>
	// <param name="entityID"></param>
	// <param name="name">Name of specific button that triggered the event.</param>
	public static void GUILayout_CheckBoxClick(string entityID, string name)
	{
		System.Diagnostics.Debug.WriteLine("GUILayout_CheckBoxClick() - '" + name + "'");

		switch (name)
		{
			default:
				System.Diagnostics.Debug.WriteLine("GUILayout_CheckBoxClick() - Unexpected checkbox '" + name + "'");
				break;
		}
	}
	
	// <summary>
	// Handler for all textbox clicks within the layout.
	// </summary>
	// <param name="entityID"></param>
	// <param name="name">Name of specific button that triggered the event.</param>
	public static void GUILayout_TextBoxClick(string entityID, string name)
	{
		System.Diagnostics.Debug.WriteLine("GUILayout_TextBoxClick() - '" + name + "'");

		switch (name)
		{
			default:
				System.Diagnostics.Debug.WriteLine("GUILayout_TextBoxClick() - Unexpected textbox '" + name + "'");
				break;
		}
	}
	
	// <summary>
	// Handler for all textbox keypresses within the layout.
	// </summary>
	// <param name="entityID"></param>
	// <param name="name">Name of specific button that triggered the event.</param>
	public static void GUILayout_TextBoxKeyPress(string entityID, string name)
	{
		System.Diagnostics.Debug.WriteLine("GUILayout_TextBoxKeyPress() - '" + name + "'");

		switch (name)
		{
			default:
				System.Diagnostics.Debug.WriteLine("GUILayout_TextBoxKeyPress() - Unexpected textbox '" + name + "'");
				break;
		}
	}	
	#endregion
	
	#region Rules
	private static bool Rule_Description(object[] args)
	{
		// we also get the value from the args
		string description = (string)args[0];  // whwere know for property rules the value is the first and only arg
		
		System.Diagnostics.Debug.WriteLine ("Running rule 'Description'.  Testing value '" + description + "'");
		return !string.IsNullOrEmpty(description);		
	}	
	#endregion

	#region PlacementTool related
	public static uint QueryPlacementBrushType() {return (uint)UserConstants.BRUSH_TYPE.BRUSH_SINGLE_DROP;}	
	#endregion
	
	#region Build statistics
	// Updates the build statistics
	public static void UpdateStats (string entityID)
	{
		// configuring the list of proeprty grid is no problem
		// however what is a problem is configuring the list in some drop down.
		// This must be client side, but then server side enforced in a rule validation delegate.
		//
		// We know that our propertySpec's have room for an event handler and I think that maybe we should 
		// see if we can't trigger those events and then provide for a way for the Plugin/PropertyGrid
		// to update a drop down list afterwards....
		
		EntityAPI.SetCustomFlagValue (entityID, (uint)UserConstants.CustomFlags.CF_STATS_DIRTY ,false);
	}	
	#endregion
	
	#region Run-time	
	public static void OnUpdate (string entityID, double elapsedSeconds)
	{
		// NOTE: if simulation is paused, graphics can still render, but this
		//       OnUpdate() will not be called.
		// NOTE: If simulation is NOT paused, this OnUpdate() will be called
		//       as many times per entity to satisfy fixed timestep settings!
		//       Thus it is important to keep this function optimized!
		// NOTE: We shouldn't be too afraid of complex entities like engines & hardpoints 
		//       for exterior thrusters because even though this does represent 
		//       relatively complex ship design, it is still a very modest, and
		//       controlled, and contained way of extending the game as a platform.
		//       It's like in Tribes.  Ultimately the modding was still grounded
		//       by the rules of the system.  The system rules were immuteable.
		//       That is the most important thing to remember about this approach.  
		//       The system rules must make sense, they must contrain freedom,
		//       or else it ends up being like Unity3d.  




	}
	
	
	// public static void OnRender (string contextID, string entityID, string modelID, string shaderID, 
								// Vector3d cameraSpacePosition, Vector3d[] cameraSpaceBoundingBoxVertices, double elapsedSeconds)
	// {
		// string parentID = (string)EntityAPI.GetParentID(entityID);
		
		// // get custom property values from parent
		// object tmp = EntityAPI.GetCustomPropertyValue (parentID, "sunposition");
		// if (tmp == null) return;
		
		// Vector3d sunPosition = (Vector3d)tmp;
		// float turbidity = (float)EntityAPI.GetCustomPropertyValue (parentID, "turbidity");
		// float sunAltitude = (float)EntityAPI.GetCustomPropertyValue (parentID, "altitude");
		// float sunTheta = (float)EntityAPI.GetCustomPropertyValue (parentID, "suntheta");
		// float sunRise = (float)EntityAPI.GetCustomPropertyValue (parentID, "sunrise");
		// float sunIntensity = (float)EntityAPI.GetCustomPropertyValue (parentID, "sunintensity");
		
		// float[] xyYzenithColor = (float[])EntityAPI.GetCustomPropertyValue (parentID, "zenithcolor");
		// UserSkyMath.xyYCoeffs distribCoeffs = (UserSkyMath.xyYCoeffs)EntityAPI.GetCustomPropertyValue (parentID, "distribcoeffs"); 		
				
		// // get custom local property values
		// Vector2f windPower = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "windpower");
		// float outerWindFactor = (float)EntityAPI.GetCustomPropertyValue (entityID, "outerwindfactor"); // factor of inner windPower
		// Vector2f cloudsTranslationInner = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "cloudstranslationinner");
		// Vector2f cloudsTranslationOuter = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "cloudstranslationouter");
		// Vector3f cloudsNightColor = (Vector3f)EntityAPI.GetCustomPropertyValue (entityID, "cloudsnightcolor");
		// Vector3f cloudsDayColor = (Vector3f)EntityAPI.GetCustomPropertyValue (entityID, "cloudsdaycolor");
		// Vector2f cloudsSize = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "cloudssize");
		// Vector2f layersOpacity = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "layersopacity");
		
		// // cloud size
		// VisualFXAPI.SetShaderParameterVector2(shaderID, "_cloudsSize", cloudsSize);
        // VisualFXAPI.SetShaderParameterVector2(shaderID, "_layersOpacity", layersOpacity);
			
			
        // // Clouds movement  
		// string sceneID = (string)EntityAPI.GetEntitySceneID (entityID); 
		// float timeScaling = (float)GameAPI.GetTimeScaling (sceneID);
        // Vector2f windEffectInner =  windPower * (float)(elapsedSeconds * timeScaling);
        // Vector2f windEffectOuter =  windEffectInner * outerWindFactor;
        // cloudsTranslationInner += windEffectInner;
        // cloudsTranslationOuter += windEffectOuter;

        // VisualFXAPI.SetShaderParameterVector2(shaderID, "_cloudsTranslation[1]", cloudsTranslationInner);
        // VisualFXAPI.SetShaderParameterVector2(shaderID, "_cloudsTranslation[0]", cloudsTranslationOuter);

		// // store the cloud translations so we can add new translation to it next frame
		// EntityAPI.SetCustomPropertyValue(entityID, "cloudstranslationinner", cloudsTranslationInner);
		// EntityAPI.SetCustomPropertyValue(entityID, "cloudstranslationouter", cloudsTranslationOuter);
			
        // // Clouds coloring
		// float dayState = UserSkyMath.Saturate(UserSkyMath.Lerp(sunAltitude, (float)(Math.PI * 1f / (6f - turbidity * .5f)), sunRise));
        // float[] atmoCol = UserSkyMath.AtmosphereColor(turbidity, sunTheta, xyYzenithColor, distribCoeffs);
        // Vector3f atmoColVec = new Vector3f(atmoCol[0], atmoCol[1], atmoCol[2]);

        // atmoColVec = Vector3f.Lerp(cloudsNightColor, atmoColVec, sunIntensity);
        // atmoColVec = Vector3f.Lerp(cloudsDayColor, atmoColVec, dayState);
        // VisualFXAPI.SetShaderParameterVector3(shaderID, "_cloudsColor", atmoColVec);
	// }
	
	// permutating clouds
	public static void OnRender (string contextID, string entityID, string modelID, string shaderID, 
								Vector3d cameraSpacePosition, double elapsedSeconds)
	{
		string parentID = (string)EntityAPI.GetParentID(entityID);
		
		// get custom property values from parent
		object tmp = EntityAPI.GetCustomPropertyValue (parentID, "sunposition");
		if (tmp == null) return;
		
		Vector3d sunPosition = (Vector3d)tmp;
		float turbidity = (float)EntityAPI.GetCustomPropertyValue (parentID, "turbidity");
		float sunTheta = (float)EntityAPI.GetCustomPropertyValue (parentID, "suntheta");
		Vector2f cloudsTranslationInner = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "cloudstranslationinner");
		Vector2f cloudsTranslationOuter = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "cloudstranslationouter");
		
		float cloudVelocity = 16.0f;
        //float CloudCover = -0.1f;
        //float CloudSharpness = 0.25f;
        //float numTiles = 16.0f;

		float[] xyYzenithColor = (float[])EntityAPI.GetCustomPropertyValue (parentID, "zenithcolor");
		UserSkyMath.xyYCoeffs distribCoeffs = (UserSkyMath.xyYCoeffs)EntityAPI.GetCustomPropertyValue (parentID, "distribcoeffs"); 		
		// get custom local property values
		// Vector2f windPower = (Vector2f)EntityAPI.GetCustomPropertyValue (entityID, "windpower");
			
        // Clouds movement  
		string sceneID = (string)EntityAPI.GetEntitySceneID (entityID); 
		float timeScaling = (float)GameAPI.GetTimeScaling (sceneID);
		
		cloudsTranslationInner.x += (float)elapsedSeconds / 25f; // * cloudVelocity;
		
        VisualFXAPI.SetShaderParameterFloat(shaderID, "time", cloudsTranslationInner.x);

		// store the cloud translations so we can add new translation to it next frame
		EntityAPI.SetCustomPropertyValue(entityID, "cloudstranslationinner", cloudsTranslationInner);
		EntityAPI.SetCustomPropertyValue(entityID, "cloudstranslationouter", cloudsTranslationOuter);
		
        // Permutating Clouds coloring 
		// TODO: for permutating clouds, I think i should be grabbing the atmoColor that is modified by SunIntensity
		//       rather than just passing AtmosphereColor withou sunIntensity scaling
        float[] atmoCol = UserSkyMath.AtmosphereColor(turbidity, sunTheta, xyYzenithColor, distribCoeffs);

			
		VisualFXAPI.SetShaderParameterFloatArray (shaderID, "SunColor", atmoCol);
	}
	#endregion
	
	
}