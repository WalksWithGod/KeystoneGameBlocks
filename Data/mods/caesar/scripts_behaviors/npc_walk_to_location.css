using System;
using Keystone.Types;
using KeyScript;
using KeyScript.Interfaces;
using KeyScript.Delegates;
using KeyScript.Host;
using KeyCommon.Traversal;

public class NPC_Walk_To_Location : BaseScript // TODO: should this inheret from a different BaseScript like a NPCBehaviorBase base script?
                                        // and shouldn't Execute return a BehaviorTreeResult enum value?
{
	// TODO: what is Validate for?
	public static bool Validate (string entityID, double elapsedSeconds)
	{
		//System.Diagnostics.Debug.WriteLine (string.Format("Entity {0}", entityID));
		return true;
	}
	
	public static void Enter (string entityID, double elapsedSeconds)
	{
	}
	

	// todo: should this method actually be called "Perform" just as it in the Action class?  
	public static BehaviorResult Execute (string entityID, double elapsedSeconds)
	{
		// TODO: AIBlackboardData data must be initialized with all the AIBlackboardData variables by the NPC's standard entity script.
		// TODO: really, before this execute is called, the blackboard data should already exist and we shouldn't have to check for null here
		KeyCommon.Data.UserData data = EntityAPI.GetAIBlackboardData(entityID);
		if (data == null) return BehaviorResult.Fail;
		
		// NOTE: if we've reached this script in the sequence, then many checks we should not have to do.
		//       We should be able to just grab the current pointIndex, and if it's -1, set it to 0 and start
		//       steering to that point.
				 
		
		// TODO: are we recovering from a paused game?  The elapsedSeconds needs to be reset.
		//       That should maybe be the job for a separate node.
				
		
		// is the following .SetAIBlackboardData call necessary?  or is data a reference that updates in our property value too?
		EntityAPI.SetAIBlackboardData (entityID, data);
		return BehaviorResult.Success;
	}
	
	public static void Exit (string entityID, double elapsedMilliseconds)
	{
	}
}
