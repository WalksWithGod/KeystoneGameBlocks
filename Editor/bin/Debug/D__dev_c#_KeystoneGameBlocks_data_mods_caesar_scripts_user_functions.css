using System;
using Keystone.Types;

public class UserFunctions
{
	public static int GetTechLevel (string techlevel)
	{
		for (int i = 0; i < UserConstants.TechLevels.Length; i++)
			if (UserConstants.TechLevels[i] == techlevel)
				return i;
		
		return 0;
	}
	
	public static float GetMaterialsQualityCoefficient (string materialsQuality)
	{
		for (int i = 0; i < UserConstants.MaterialsQuality.Length; i++)
			if (UserConstants.MaterialsQuality[i] == materialsQuality)
				return (i + 1) / UserConstants.MaterialsQuality.Length;
		
		return 0;
	}

	public static float GetCraftsmanshipCoefficient (string craftsmanship)
	{
		for (int i = 0; i < UserConstants.Craftsmanship.Length; i++)
			if (UserConstants.Craftsmanship[i] == craftsmanship)
				return (i + 1) / UserConstants.Craftsmanship.Length;
		
		return 0;
	}
	
	// Increases or decreases final weight of component based on the quality of the materials used.
	// Higher quality materials decrease weight because less materials are needed to ensure 
	// specific tolerances are met.
	// Lower quality materials increases weight because more materials are needed to reach the same
	// levels of tolerance.
	public static double CalcComponentModifiedWeight (double baseWeight, int techlevel, float materialsquality)
	{

		return baseWeight * materialsquality;
	}
	
	public static double CalcComponentModifiedCost (double baseCost, int techlevel, float craftsmanship)
	{

		return baseCost + (baseCost * (craftsmanship - 0.5)) ;
	}
	
	public static double CalcComponentVolume(double weight)
	{
		return weight / 50.0;
	}
	
	public static double CalcComponentVolume(BoundingBox box, int techlevel, float craftsmanship)
	{
		double baseVolume = box.Width * box.Height * box.Depth;
		
		// tech levels apply 0.0 - 1.0 modifier to final volume where higher tech level results in smaller volume
		// craftsmanship applies 0.0 - 1.0 modifier to final volume where better craftsmanship result in smaller volume
		return baseVolume;
	}
	
	public static double CalcComponentWeight(double volume, int techlevel, float craftsmanship)
	{
		return volume * 50.0;
	}
	
	public static double CalcComponentSurfaceArea(double volume)
	{
		double result;
		result = Math.Pow (volume, 1/3);
		result = Math.Pow (result, 2);
		result *= 6;
		result = Math.Round(result, 2);
		return result;
	}
	
	// Calculate Hitpoints for non structural ship parts
	public static int CalcComponentHitpoints (double surfaceArea)
	{
		int result = (int)Math.Round(surfaceArea);
		
		if (result < 1 ) result = 1;
		
		return result;
	}
	
	public static double CalcComponentsModifiedFuelConsumption (double baseconsumption, float craftsmanship)
	{
		return baseconsumption;
	}
}
