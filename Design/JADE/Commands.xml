<?xml version="1.0" encoding="utf-8"?>
<ArrayOfCommandInfo xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_x = abs -3) returns 3</Text>
      </ExampleInfo>
    </Examples>
    <Description>Absolute value of a real number</Description>
    <Command>abs</Command>
    <Syntax>abs x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (_acc = accTime)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the current time acceleration factor</Description>
    <Command>accTime</Command>
    <Syntax>accTime</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Arccosine of a number, result in degrees</Description>
    <Command>acos</Command>
    <Syntax>acos x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>action</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier action ["eject", vehicle soldier])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Make a unit to perform an action. Use the Operation Flashpoint: Actions List</Description>
    <Command>action</Command>
    <Syntax>unit action action</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>action</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (array = actionKeys "ReloadMagazine")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns a list of dikCodes of buttons assigned to the given user action.</Description>
    <Command>actionKeys</Command>
    <Syntax>actionKeys action</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>action</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>action</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>maxKeys</Name>
        <Type>Integer</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (text = actionKeysImages "ReloadMagazine")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns a list of button images or names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes.</Description>
    <Command>actionKeysImages</Command>
    <Syntax>actionKeysImages action</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>action</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>action</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (list = actionKeysNames "ReloadMagazine")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns a list of button names assigned to the given user action. A maximum of maxKeys keys is listed. You can find the action names in config class ControllerSchemes.</Description>
    <Command>actionKeysNames</Command>
    <Syntax>actionKeysNames action</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>addon1</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (activateAddons ["BISOFP"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Activates the listed addons. The list of active addons is initialized during this function.</Description>
    <Command>activateAddons</Command>
    <Syntax>activateAddons [addon1, ...]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>keyname</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (activateKey "M04")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>activateKey</Command>
    <Syntax>activateKey keyname</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object - unit or object to assign the action to - OFP &amp; ArmA</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[title, filename]</Name>
        <Type>Array - the title which is displayed in the action menu. Path to the script that is called when the action is activated. Relative to the mission folder - OFP</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[action, script,(arguments,priority, showWindow, hideOnUse, shortcut)]</Name>
        <Type>Array - ArmA</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>addAction</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - Event handlers</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>code</Name>
        <Type>String - code that should be executed once the event occurs</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= EHkilled = player addEventHandler ["killed", {_this exec "playerKilled.sqs"}]</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= this addEventHandler ["killed", {hint format["%1 killed by %2",_this select 0, _this select 1]}]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>addEventHandler</Command>
    <Syntax>unit addEventHandler [type, code]</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>score</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player addLiveStats 10)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Xbox Live MP only: Adds score to the Xbox Live Statistics score for the given unit (or the commander unit of the given vehicle).</Description>
    <Command>addLiveStats</Command>
    <Syntax>unit addLiveStats score</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object - unit to add the magazines to</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>magazineName</Name>
        <Type>String - magazine name. See the topic</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player addMagazine "M16")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>addMagazine</Command>
    <Syntax>unit addMagazine magazineName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object - vehicle to add the magazines to</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>magazineName</Name>
        <Type>String - magazine name. See the topic</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>count</Name>
        <Type>Integer - number of magazines to add</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (truck addMagazineCargo ["M16",5])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add magazines to the cargo space of vehicles, which can be taken out by infantry units. Once the magazine cargo space is filled up, any further addMagazineCargo commands are ignored.</Description>
    <Command>addMagazineCargo</Command>
    <Syntax>vehicle addMagazineCargo [magazineName, count]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>magazineName</Name>
        <Type>String - magazine name. See the topic</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>count</Name>
        <Type>Integer - number of magazines to add</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (addMagazinePool ["M16",20])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add magazines to the magazine pool, of which the player may choose in the following mission. Available in campaigns only.</Description>
    <Command>addMagazinePool</Command>
    <Syntax>addMagazinePool [magazineName, count]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>rating</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (addRating 2000)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add a number to the rating of a unit. This command is usually used to reward for completed mission objectives. The rating is given at the end of the mission and is automatically adjusted when killing enemies or friendlies. When the rating gets below zero, the unit is considered "renegade" and is an enemy to everyone.Negative values will remove from the rating.</Description>
    <Command>addRating</Command>
    <Syntax>unit addRating rating</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>score</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player addScore 10)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add a number to the score of a unit. This score is shown in multiplayer in the "I" screen.Negative values will remove from the score.</Description>
    <Command>addScore</Command>
    <Syntax>unit addScore score</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Add a unit into the list of units available for team switch.</Description>
    <Command>addSwitchableUnit</Command>
    <Syntax>addSwitchableUnit person</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>center</Name>
        <Type>Position ?</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>radius</Name>
        <Type>Number ?</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= wp = grp addWaypoint [ position player, 0]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>addWaypoint</Command>
    <Syntax>group addWaypoint [center, radius]</Syntax>
    <ReturnValue>Array - a waypoint with format [group, index]</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object - unit to add the weapon to</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weaponName</Name>
        <Type>String - weapon name. See the topic</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player addWeapon "M16")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add a weapon to a unit. Infantry units can only carry a specific number of weapons, once the weapon slots are filled, any further addWeapon commands are ignored.</Description>
    <Command>addWeapon</Command>
    <Syntax>unit addWeapon weaponName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object - vehicle to add the weapons to</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weaponName</Name>
        <Type>String - weapon name. See the topic</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>count</Name>
        <Type>Integer - number of weapons to add.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (truck addWeaponCargo ["M16",5])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add weapons to the cargo space of vehicles, which can be taken out by infantry units. Once the weapon cargo space is filled up, any further addWeaponCargo commands are ignored.</Description>
    <Command>addWeaponCargo</Command>
    <Syntax>vehicle addWeaponCargo [weaponName, count]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>weaponName</Name>
        <Type>Object - weapon name. See the topic</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>count</Name>
        <Type>Integer - number of weapons to add</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (addWeaponPool ["M16",5])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add weapons to the weapon pool, of which the player may choose in the following mission. Available in campaigns only.</Description>
    <Command>addWeaponPool</Command>
    <Syntax>addWeaponPool [weaponName, count]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(alive player) : exit)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if given vehicle or person is alive (i.e. not dead or destroyed).</Description>
    <Command>alive</Command>
    <Syntax>alive unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Obsolete command. Does nothing.</Description>
    <Command>allowDammage</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>courage</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (group1 allowFleeing 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>allowFleeing</Command>
    <Syntax>unit allowFleeing courage</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unitArray</Name>
        <Type>Array - array with elements of type Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>allow</Name>
        <Type>Boolean - true allows the units to enter, false denies them</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([soldier1, soldier2] allowGetin true)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set if the units given in the list are allowed to enter vehicles.</Description>
    <Command>allowGetIn</Command>
    <Syntax>unitArray allowGetIn allow</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weaponName</Name>
        <Type>String - muzzle name. See the topic</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check how many rounds are left in the currently loaded magazine of the given weapon.</Description>
    <Command>ammo</Command>
    <Syntax>unit ammo weaponName</Syntax>
    <ReturnValue>Integer</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>a test condition or a variable that return a Boolean value</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>a test condition or a variable that return a Boolean value</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (if (alive player) and (enemycount==0) then {hint "you win"})</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns "true" only if both conditions are true</Description>
    <Command>and</Command>
    <Syntax>a and b</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>animation</Name>
        <Type>String - name of the animation. This is the class-name of the animation defined in the addons config.cpp.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>animationPhase</Name>
        <Type>Integer - range 0 (start point of the animation) to 1 (end point of the animation). The speed, in which the animation is processed, is defined in the addons config.cpp and cannot be changed during running missions.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (building animate ["maindoor", 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Process a linear animations on an object. Such animations are only used in user-made addons, they can be defined in the addons config.cpp.</Description>
    <Command>animate</Command>
    <Syntax>object animate [animation, phase]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>animation</Name>
        <Type>String - name of the animation. This is the class-name of the animation defined in the addons config.cpp.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return the phase of the given animation on the given object, which is set by the animate command.</Description>
    <Command>animationPhase</Command>
    <Syntax>object animationPhase animation</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>man</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_state = animationState player)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the name of the current primary animation.</Description>
    <Command>animationState</Command>
    <Syntax>animationState man</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Arcsine of a number, result in degrees.</Description>
    <Command>asin</Command>
    <Syntax>sin x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>condition</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (assert (_x&gt;0))</Text>
      </ExampleInfo>
    </Examples>
    <Description>Tests a condition and if the condition is false, halts the program.</Description>
    <Command>assert</Command>
    <Syntax>assert condition</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Assign a unit as cargo of a vehicle. Used together with orderGetIn to order subordinate units to get in as cargo into a specific vehicle. Before usage of this command a subordinate unit hasnt got the option to get into the cargo space of the vehicle.</Description>
    <Command>assignAsCargo</Command>
    <Syntax>unit assignAsCargo vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Assign a unit as commander of a vehicle. Used together with orderGetIn to order subordinate units to get in as commander of a specific vehicle. Before usage of this command a subordinate unit hasnt got the option to get into the commander place of the vehicle.</Description>
    <Command>assignAsCommander</Command>
    <Syntax>unit assignAsCommander vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Assign a unit as driver of a vehicle. Used together with orderGetIn to order subordinate units to get in as driver of a specific vehicle. Before usage of this command a subordinate unit hasnt got the option to get into the driver place of the vehicle.</Description>
    <Command>assignAsDriver</Command>
    <Syntax>unit assignAsDriver vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Assign a unit as gunner of a vehicle. Used together with orderGetIn to order subordinate units to get in as gunner of a specific vehicle. Before usage of this command a subordinate unit hasnt got the option to get into the gunner place of the vehicle.</Description>
    <Command>assignAsGunner</Command>
    <Syntax>unit assignAsGunner vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _target = assignedTarget T72</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the target assigned to the vehicle.</Description>
    <Command>assignedTarget</Command>
    <Syntax>assignedTarget vehicle</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>team</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier2 assignTeam "RED")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>assignTeam</Command>
    <Syntax>vehicle assignTeam team</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Arctangens of a number, result in degrees.</Description>
    <Command>atan</Command>
    <Syntax>atan x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>y</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Arctangens of x/y. Used to determine the angle of a vector [x,y]. Result in degrees.</Description>
    <Command>atan2</Command>
    <Syntax>x atan2 y</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Equivalent to atan</Description>
    <Command>atg</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= if (not attackEnabled soldier) then {soldier setCombatMode "Careless"}</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return whether leader can issue attack commands.</Description>
    <Command>attackEnabled</Command>
    <Syntax>attackEnabled group</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return the behaviour of a unit.</Description>
    <Command>behaviour</Command>
    <Syntax>behaviour unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (? (benchmark&gt;2000) : setViewDistance 2000)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the value of "3D Performance" in OFP Preferences (flashpoint.cfg). This can be used to estimate the computer performance to adapt CPU and GPU demanding settings like view distance dynamically in missions.</Description>
    <Command>benchmark</Command>
    <Syntax>benchmark</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _box = boundingBox abrams</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns a bounding box of given object in model coordinate space.</Description>
    <Command>boundingBox</Command>
    <Syntax>boundingBox object</Syntax>
    <ReturnValue>Array - An array with the extreme points of the model. Format: minX, minZ, minY], [maxX, maxZ, maxY</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Breaks block out of scope named name. Nil is returned.</Description>
    <Command>breakOut</Command>
    <Syntax>breakOut name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Breaks block to scope named name. Nil is returned.</Description>
    <Command>breakTo</Command>
    <Syntax>breakTo</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>building</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>index</Name>
        <Type>Integer</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>building</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>index</Name>
        <Type>Integer</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>buildingPos</Command>
    <Syntax>building buildingPos index</Syntax>
    <ReturnValue>Position</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the action assigned to a control of the currently active user dialog. Can be used for buttons and active texts. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>buttonAction</Command>
    <Syntax>buttonAction idc</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>code</Name>
        <Type>String - code body that should be executed when the button/active text is clicked</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (buttonSetAction [100, {player exec "reply.sqs"}])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the action of a control of the currently active user dialog. Can be used for buttons and active texts. See Dialog Control for more information about user dialogs.</Description>
    <Command>buttonSetAction</Command>
    <Syntax>buttonSetAction [idc, code]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (? (cadetMode) : ai_soldier setSkill 0.1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if the player is currently playing in cadet or veteran mode.</Description>
    <Command>cadetMode</Command>
    <Syntax>cadetMode</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>argument</Name>
        <Type>Array - Optional. Argument that is passed to the function in the "_this" variable.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>body</Name>
        <Type>String - A function loaded with loadFile or preprocessFile, or a function body provided directly as a string.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>call</Command>
    <Syntax>argument call body</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object - object of type "camera" or "seagull"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>command</Name>
        <Type>String - one of "manual on", "manual off", "inertia on", "inertia off", "landed" and "airborne" corresponding to the description above.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _camera camCommand "manual on"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>camCommand</Command>
    <Syntax>camera camCommand command</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number - time in seconds during which the changes shall be done</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately.</Description>
    <Command>camCommit</Command>
    <Syntax>camera camCommit time</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number - time in seconds during which the changes shall be done</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Smoothly conduct the changes that were assigned to a camera within the given time. If the time is set to zero, the changes are done immediately.</Description>
    <Command>camCommitPrepared</Command>
    <Syntax>camera camCommitPrepared time</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Checks if the conduction of the last camCommit call already finished.</Description>
    <Command>camCommitted</Command>
    <Syntax>camCommitted camera</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - either "camera", "seagull" or any other class name of OFP vehicles.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position - position to create the object at</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _cam = "camera" camCreate (position player)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Create a camera or a seagull object on the given position. Also other objects can be created this way, but vehicles created with camCreate cannot be entered. Any units created with camCreate will remain static. With difference to createVehicle, objects are created without consideration of the collision detection with surrounding objects, thus the objects are spawned exactly at the given position.camCreate is conducted immediately, the command doesnt wait for camCommit.</Description>
    <Command>camCreate</Command>
    <Syntax>type camCreate position</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (camDestroy _cam)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Destroy an object created with camCreate.camDestroy is conducted immediately, the command doesnt wait for camCommit.</Description>
    <Command>camDestroy</Command>
    <Syntax>camDestroy object</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - the effect type. One of "Internal", "External", "Fixed", "FixedWithZoom" and "Terminate"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>String - position of the effect. One of "TOP", "LEFT", "RIGHT", "FRONT" and "BACK" ("BACK" is normally used)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_cam cameraEffect ["internal", "BACK"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Switch to the given camera or object with the given effect. If you want to switch the screen directly to the first-person, aiming, third-person or group view of an object, use switchCamera instead.The effect type "Terminate" is used to exit the current camera view and switch back to the players view.Needs the call of camCommit to be conducted.</Description>
    <Command>cameraEffect</Command>
    <Syntax>camera cameraEffect [type, position]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>entity</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return camera interest for given entity.</Description>
    <Command>cameraInterest</Command>
    <Syntax>cameraInterest entity</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the vehicle to which the camera is attached.</Description>
    <Command>cameraOn</Command>
    <Syntax>cameraOn</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return root of campaign description.ext entries hierarchy.</Description>
    <Command>campaignConfigFile</Command>
    <Syntax>campaignConfigFile</Syntax>
    <ReturnValue>Config</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPreload 5</Text>
      </ExampleInfo>
    </Examples>
    <Description>Preload the scene for the prepared camera. Time gives timeout, zero means no (infinite) timeout.</Description>
    <Command>camPreload</Command>
    <Syntax>camera camPreload time</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  camPreloaded _camera</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks whether the camera has finished preloading.</Description>
    <Command>camPreloaded</Command>
    <Syntax>camPreloaded camera</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>bank</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareBank -0.1</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera bank angle.</Description>
    <Command>camPrepareBank</Command>
    <Syntax>camera camPrepareBank bank</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>direction</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareDir 150</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera heading.</Description>
    <Command>camPrepareDir</Command>
    <Syntax>camera camPrepareDir direction</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>dive</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareDive -0.1</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera dive angle.</Description>
    <Command>camPrepareDive</Command>
    <Syntax>camera camPrepareDive dive</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>focusRange</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareFocus [50, 1]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>camPrepareFocus</Command>
    <Syntax>camera camPrepareFocus focusRange</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>fieldOfView</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareFov 0.1</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera field of view (zoom).</Description>
    <Command>camPrepareFov</Command>
    <Syntax>camera camPrepareFov fieldOfView</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>fovRange</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareFovRange [0.1, 0.5]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera field of view range for auto zooming.</Description>
    <Command>camPrepareFovRange</Command>
    <Syntax>camera camPrepareFovRange fovRange</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPreparePos getPos player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera position (format Position).</Description>
    <Command>camPreparePos</Command>
    <Syntax>camera camPreparePos position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  _camera camPrepareRelPos [10,5]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera position relative to the current position of the currect target (see camPrepareTarget).</Description>
    <Command>camPrepareRelPos</Command>
    <Syntax>camera camPrepareRelPos position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array - target location in format Position</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _camera camPrepareTarget getPos player</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= _camera camPrepareTarget player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Prepares the camera target to a position or to a target.</Description>
    <Command>camPrepareTarget</Command>
    <Syntax>camera camPrepareTarget position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>camSetBank</Command>
    <Syntax>camera camSetBank bank</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>direction</Name>
        <Type>Integer - direction in degrees, range 0 to 360</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_cam camSetDir 90)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the direction of the given camera.Needs the call of camCommit to be conducted.</Description>
    <Command>camSetDir</Command>
    <Syntax>camera camSetDir direction</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>camSetDive</Command>
    <Syntax>camera camSetDive dive</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>focusRange</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_camera camSetFocus [50, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>focusRange is in format [distance,blur]. Sets the camera focus blur. It does not automatically commit changes.</Description>
    <Command>camSetFocus</Command>
    <Syntax>camera camSetFocus focusRange</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>level</Name>
        <Type>Integer - zoom level, range 0.01 to 2 (see description above)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_cam camSetFov 0.7)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the zoom level (field of view) of the given camera. The default zoom level is 0.7, 0.01 is the nearest and 2 the farest zoom value. The angle of the field of view is the FOV*120 degrees.Needs the call of camCommit to be conducted.</Description>
    <Command>camSetFov</Command>
    <Syntax>camera camSetFov level</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>start</Name>
        <Type>Integer - zoom level, range 0 to 1 (see description above)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_cam camSetFovRange [0.1,0.7])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the zoom level (field of view) start and end values for automatical zooming. The default zoom level is 0.7, 0 is the nearest and 1 the most far zoom value.Needs the call of camCommit to be conducted.</Description>
    <Command>camSetFovRange</Command>
    <Syntax>camera camSetFovRange [start,end]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera" or "seagull"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position - position to set the object to</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_cam camSetPos [2300,1000,130])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the position of the given camera or seagull.Needs the call of camCommit to be conducted.</Description>
    <Command>camSetPos</Command>
    <Syntax>camera camSetPos position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position - relative position</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set the position of the given camera relative to its target set with camSetTarget.Needs the call of camCommit to be conducted.</Description>
    <Command>camSetRelPos</Command>
    <Syntax>camera camSetRelPos position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object - target location</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>camera</Name>
        <Type>Object - object of type "camera"</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array - target location in format Position</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _camera camSetTarget player</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= _camera camSetTarget [2540,1503,26]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the target object or position where the given camera should point at. Needs the call of camCommit to be conducted.</Description>
    <Command>camSetTarget</Command>
    <Syntax>camera camSetTarget target</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>set</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set / clear using of night vision during cutscenes.</Description>
    <Command>camUseNVG</Command>
    <Syntax>camUseNVG set</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(canFire tank) : player sideChat "Tank disabled!")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if the given vehicle is still able to fire. This command checks only the damage value, not the ammo!</Description>
    <Command>canFire</Command>
    <Syntax>canFire vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(canMove tank) : player sideChat "Hes nailed on the ground! Now hurry!")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if the given vehicle is still able to move. This command checks only the damage value, not the amount of fuel!</Description>
    <Command>canMove</Command>
    <Syntax>canMove vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(canStand player) : player groupChat "My legs! They hit my legs!")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if the given soldier is able to stand up.</Description>
    <Command>canStand</Command>
    <Syntax>canStand soldier</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(captive general) : general setCaptive true)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if the given unit is captive. "captive" means that enemies will not shoot at the unit.</Description>
    <Command>captive</Command>
    <Syntax>captive unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>b</Name>
        <Type>Anything</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>See switch do</Description>
    <Command>case</Command>
    <Syntax>case b</Syntax>
    <ReturnValue>Switch Type</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples />
    <Description>Processes code when an Exception_Type</Description>
    <Command>catch</Command>
    <Syntax>try-block catch code</Syntax>
    <ReturnValue>Anything</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>The ceil value of x.</Description>
    <Command>ceil</Command>
    <Syntax>ceil x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Checks whether cheats are enabled (whether the designers version is running).</Description>
    <Command>cheatsEnabled</Command>
    <Syntax>cheatsEnabled</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (?((side _unit)==civilian) : hint "This is a civilian unit!")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>civilian</Command>
    <Syntax>civilian</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (clearMagazineCargo truck)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Remove all magazines from the given vehicles magazine cargo space.</Description>
    <Command>clearMagazineCargo</Command>
    <Syntax>clearMagazineCargo vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Remove all magazines from the magazine pool, of which the player may choose in the following missions. Available in campaigns only.</Description>
    <Command>clearMagazinePool</Command>
    <Syntax>clearMagazinePool</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Clean up the content of radio protocol history.</Description>
    <Command>clearRadio</Command>
    <Syntax>clearRadio</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (clearWeaponCargo truck)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Remove all weapons from the given vehicles weapon cargo space.</Description>
    <Command>clearWeaponCargo</Command>
    <Syntax>clearWeaponCargo vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Remove all weapons from the weapon pool, of which the player may choose in the following missions. Available in campaigns only.</Description>
    <Command>clearWeaponPool</Command>
    <Syntax>clearWeaponPool</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (closeDialog 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Close the currently active user dialog.</Description>
    <Command>closeDialog</Command>
    <Syntax>closeDialog idc</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_display closeDisplay IDC_OK)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Close given display.</Description>
    <Command>closeDisplay</Command>
    <Syntax>display closeDisplay exitcode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?((combatMode grp1)=="BLUE") : grp1 setCombatMode "GREEN")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the combat mode of the given unit. See setCombatMode for more information about combat modes.</Description>
    <Command>combatMode</Command>
    <Syntax>combatMode group</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ((commander tank) action ["getout",tank])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the commander of a vehicle.</Description>
    <Command>commander</Command>
    <Syntax>commander vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ESoldier1 commandFire WSoldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>commandFire</Command>
    <Syntax>unit commandFire target</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>followedunit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 commandFollow soldier2)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit to follow the given other unit (via the radio).</Description>
    <Command>commandFollow</Command>
    <Syntax>unit commandFollow followedunit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne commandFSM ["move.fsm", position player, player])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Orders a unit to process command defined by FSM file (via the radio).</Description>
    <Command>commandFSM</Command>
    <Syntax>unit(s) commandFSM [fsm name, position, target]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (commandGetOut unitOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Orders the unit to get out from the vehicle (via the radio).</Description>
    <Command>commandGetOut</Command>
    <Syntax>commandGetOut unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array (format Position)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 commandMove (position "Marker1"))</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit(s) to move to the given location (via the radio).</Description>
    <Command>commandMove</Command>
    <Syntax>unit commandMove position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (commandStop soldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit(s) to stop (via the radio). A stop command will never finish, the unit will never be ready.</Description>
    <Command>commandStop</Command>
    <Syntax>commandStop unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ESoldier1 commandTarget WSoldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit(s) to target the given target (via the radio).</Description>
    <Command>commandTarget</Command>
    <Syntax>unit commandTarget target</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array (format Position)</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne commandWatch markerPos "MarkerMoveOne"</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= [s1,s2] commandWatch player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Orders the unit to watch the given position or target (via the radio).</Description>
    <Command>commandWatch</Command>
    <Syntax>unit commandWatch position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>comment</Name>
        <Type>String - the comment that youd like to write here</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= script.sqs (comment "This is a commented line")</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= function.sqf (comment "This is a commented line";)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>comment</Command>
    <Syntax>comment comment</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>expression</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _function = "a = a + 1"; _compiled = compile _function; call _compiled;</Text>
      </ExampleInfo>
    </Examples>
    <Description>Compile expression.</Description>
    <Command>compile</Command>
    <Syntax>compile expression</Syntax>
    <ReturnValue>Code</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[text1, text2, ...]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (txt = composeText ["First line", image "data\isniper.paa", lineBreak, "Second line"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a structured text by joining the given structured or plain texts.</Description>
    <Command>composeText</Command>
    <Syntax>composeText [text1, text2, ...]</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return root of config entries hierarchy.</Description>
    <Command>configFile</Command>
    <Syntax>configFile</Syntax>
    <ReturnValue>Config</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>config</Name>
        <Type>Config</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns name of config entry.</Description>
    <Command>configName</Command>
    <Syntax>configName config</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>A non-existing control. This value is not equal to anything, including itself.</Description>
    <Command>controlNull</Command>
    <Syntax>controlNull</Syntax>
    <ReturnValue>Control</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Cosine of a number, argument in degrees.</Description>
    <Command>cos</Command>
    <Syntax>cos x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>condition</Name>
        <Type>Code</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>count</Command>
    <Syntax>condition count array</Syntax>
    <ReturnValue>Integer</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player countEnemy list triggerOne</Text>
      </ExampleInfo>
    </Examples>
    <Description>Count how many units in the array are considered enemy to the given unit.</Description>
    <Command>countEnemy</Command>
    <Syntax>unit countEnemy array</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array - array with elements of type Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player countFriendly list triggerOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Count how many units in the array are considered friendly to the given unit.</Description>
    <Command>countFriendly</Command>
    <Syntax>unit countFriendly array</Syntax>
    <ReturnValue>Integer</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>side</Name>
        <Type>Side</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array - array with elements of type Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (west countSide list triggerOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Count how many units in the array belong to given side.</Description>
    <Command>countSide</Command>
    <Syntax>side countSide array</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - vehicle class type</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array - array with elements of type Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Tank" countType list triggerOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Count how many units in the array are of given type. Other than typeOf this command also works with parent classes like "Air", "Tank" and "Car". For a full class reference see :Category:ArmA Classes</Description>
    <Command>countType</Command>
    <Syntax>type countType array</Syntax>
    <ReturnValue>Integer</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array - array with elements of type Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player countUnknown list triggerOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Count how many units in the array are unknown to the given unit.</Description>
    <Command>countUnknown</Command>
    <Syntax>unit countUnknown array</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (agent = createAgent ["SoldierWB", position player, [], 0, "FORM"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>createAgent</Command>
    <Syntax>createAgent [type, position, markers, placement, special]</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>side</Name>
        <Type>Side</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= center = createCenter east</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a new AI center for the given side. A center is something each side needs to have to be able to communicate. By default, all centers for units which are present in the mission are created before the mission is started. This command can be used to initialize a side which has no units present in the Mission.sqm, so that you can spawn groups and units for it.</Description>
    <Command>createCenter</Command>
    <Syntax>createCenter side</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>className</Name>
        <Type>String - class name used in the description.ext / resource.cpp</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Create a dialog which is defined either in the missions description.ext, in the campaigns description.ext or in the global resource.cpp. The given name has to be the class name used in one of these files. If already another dialog is opened, the desired dialog is created as child dialog of the already opened one.</Description>
    <Command>createDialog</Command>
    <Syntax>createDialog className</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>parent</Name>
        <Type>Display</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_display createDisplay "RscObserver")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Create child display of given display and load from resource "name".</Description>
    <Command>createDisplay</Command>
    <Syntax>parent createDisplay name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>side</Name>
        <Type>Side</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= group = createGroup east</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a new AI group for the given center (side). The center must already be in the Mission.sqm or have been initialized with createCenter.</Description>
    <Command>createGroup</Command>
    <Syntax>createGroup side</Syntax>
    <ReturnValue>Group</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[side, position, idStatic, vehicle]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= point = createGuardedPoint [ east, [0, 0], -1, vehicle player ]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Adds a point guarded by the given side. If idStatic is not negative, the position of a static object with the given id is guarded. If the given vehicle is valid, the starting position of the vehicle is guarded, otherwise the given position is guarded.</Description>
    <Command>createGuardedPoint</Command>
    <Syntax>createGuardedPoint [side, position, idStatic, vehicle]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[name, position]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= marker= createMarker [Marker1, position player ]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a new marker at the given position. The marker name has to be unique.</Description>
    <Command>createMarker</Command>
    <Syntax>createMarker [name, position]</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[name, position]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= marker= createMarkerLocal [Marker1, position player ]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a new marker at the given position. The marker name has to be unique.</Description>
    <Command>createMarkerLocal</Command>
    <Syntax>createMarkerLocal [name, position]</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[type, position, markers, placement]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= mine = createMine ["MineMine", position player, [], 0]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a mine of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The mine is placed inside a circle with this position as its center and placement as its radius.</Description>
    <Command>createMine</Command>
    <Syntax>createMine [type, position, markers, placement]</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[type, position, markers, placement]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soundSource = createSoundSource ["LittleDog", position player, [], 0]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a sound source of the given type (type is the name of the subclass of CfgVehicles). If the markers array contains several marker names, the position of a random one is used, otherwise, the given position is used. The sound source is placed inside a circle with this position as its center and placement as its radius.</Description>
    <Command>createSoundSource</Command>
    <Syntax>createSoundSource [type, position, markers, placement]</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String Unknown</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position Placement Position</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>typeAccuracy</Name>
        <Type>Number Unknown</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>posAccuracy</Name>
        <Type>Number Unknown</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Create a target. Not yet functioning.</Description>
    <Command>createTarget</Command>
    <Syntax>obj createTarget [type, position, typeAccuracy, posAccuracy ]</Syntax>
    <ReturnValue>Target</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[type, position]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>createTrigger</Command>
    <Syntax>createTrigger [type, position]</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - type of the unit that should be created</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position - position to create the unit at</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Group - group were the unit will belong to. This group has to exist already! It is not possible to use grpNull as argument.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>init</Name>
        <Type>String - commands that are executed when the unit has been created. The unit is stored in the this variable. The default value is "".</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>skill</Name>
        <Type>Number - range 0 to 1. 0 is the lowest skill, 1 the highest. The default value is 0.5. If this argument is set, init must be set too.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>rank</Name>
        <Type>String - one of "PRIVATE", "CORPORAL", "SERGEANT", "LIEUTNANT", "CAPTAIN", "MAJOR" and "COLONEL". If this argument is set, init and skill must be set too.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("SoldierWB" createUnit [position player, group player])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Create an interacting AI soldier.</Description>
    <Command>createUnit</Command>
    <Syntax>type createUnit [position, group, init*, skill*, rank*] * optional, if one is set, all precedent arguments have to be set too</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - vehicle/object class name</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position - position to create the vehicle at</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_jeep = "Jeep" createVehicle (position player))</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>createVehicle</Command>
    <Syntax>type createVehicle position</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array (format Position)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _tank = "M1Abrams" createVehicleLocal getMarkerPos "tankFactory"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates an empty vehicle of the given type. See CfgVehicles for possible type values. Vehicle is not transferred through network in MP games.</Description>
    <Command>createVehicleLocal</Command>
    <Syntax>type createVehicleLocal pos</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player in (crew tank))</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the crew of the given vehicle.</Description>
    <Command>crew</Command>
    <Syntax>crew vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ctrlActivate _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Launch actions attached to given (button based) control.</Description>
    <Command>ctrlActivate</Command>
    <Syntax>ctrlActivate control</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlCommit 2)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Commit control animation.</Description>
    <Command>ctrlCommit</Command>
    <Syntax>control ctrlCommit time</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_done = ctrlCommitted _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if the control animation is finished.</Description>
    <Command>ctrlCommitted</Command>
    <Syntax>ctrlCommited control</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>enable</Name>
        <Type>Boolean - true to enable the dialog, false to disable it</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ctrlEnable [100,false])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable or disable a control of the currently active user dialog. Disabled controls cannot be clicked onto. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>ctrlEnable</Command>
    <Syntax>ctrlEnable [idc, enable]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>enable</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ctrlEnable [100, false]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable / disable the control with id idc of topmost user dialog.</Description>
    <Command>ctrlEnable control</Command>
    <Syntax>control ctrlEnable enable</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(ctrlEnabled 100) : ctrlEnable [100,true])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if a control on the currently active user dialog is enabled. Disabled controls cannot be clicked onto. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>ctrlEnabled</Command>
    <Syntax>ctrlEnabled idc</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_enabled = ctrlEnabled 100)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return if control with id idc of topmost user dialog is enabled.</Description>
    <Command>ctrlEnabled control</Command>
    <Syntax>ctrlEnabled control</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_scale = ctrlFade _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the current fade factor of control.</Description>
    <Command>ctrlFade</Command>
    <Syntax>ctrlFade control</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_map ctrlMapAnimAdd [1, 0.1, getMarkerPos "anim1"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Adds the next frame to the map animation. The format of frame is [time, zoom, position], the format of position is Position2D.</Description>
    <Command>ctrlMapAnimAdd</Command>
    <Syntax>map ctrlMapAnimAdd frame</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples />
    <Description>Clears the map animation.</Description>
    <Command>ctrlMapAnimClear</Command>
    <Syntax>ctrlMapAnimClear control</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Plays the map animation.</Description>
    <Command>ctrlMapAnimCommit</Command>
    <Syntax>ctrlMapAnimCommit control</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Checks whether the map animation has finished.</Description>
    <Command>ctrlMapAnimDone</Command>
    <Syntax>ctrlMapAnimDone control</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the current scale of the map control.</Description>
    <Command>ctrlMapScale</Command>
    <Syntax>ctrlMapScale control</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_display = ctrlParent _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns container of the given control.</Description>
    <Command>ctrlParent</Command>
    <Syntax>ctrlParent control</Syntax>
    <ReturnValue>Display</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_pos = ctrlPosition _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the current position of control as [x, y] array.</Description>
    <Command>ctrlPosition</Command>
    <Syntax>ctrlPosition control</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_scale = ctrlScale _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the current scale of the control.</Description>
    <Command>ctrlScale</Command>
    <Syntax>ctrlScale control</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array (format Color)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetActiveColor [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets text color of given control when control is selected.</Description>
    <Command>ctrlSetActiveColor</Command>
    <Syntax>display ctrlSetActiveColor color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array (format Color)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetBackgroundColor [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets background color of given control.</Description>
    <Command>ctrlSetBackgroundColor</Command>
    <Syntax>display ctrlSetBackgroundColor color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[handler name, function]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetEventHandler ["KeyDown", ""])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets given event handler of given control.</Description>
    <Command>ctrlSetEventHandler</Command>
    <Syntax>control ctrlSetEventHandler [handler name, function]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>fade</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFade 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets wanted transparency for control animation.</Description>
    <Command>ctrlSetFade</Command>
    <Syntax>control ctrlSetFade fade</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ctrlSetFocus _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the input focus on given control.</Description>
    <Command>ctrlSetFocus</Command>
    <Syntax>ctrlSetFocus control</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFont "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the main font of given control.</Description>
    <Command>ctrlSetFont</Command>
    <Syntax>control ctrlSetFont name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH1 "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H1 font of given HTML control.</Description>
    <Command>ctrlSetFontH1</Command>
    <Syntax>control ctrlSetFontH1 name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH1B "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H1 bold font of given HTML control.</Description>
    <Command>ctrlSetFontH1B</Command>
    <Syntax>control ctrlSetFontH1B name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH2 "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H2 font of given HTML control</Description>
    <Command>ctrlSetFontH2</Command>
    <Syntax>control ctrlSetFontH2 name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH2B "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H2 bold font of given HTML control.</Description>
    <Command>ctrlSetFontH2B</Command>
    <Syntax>control ctrlSetFontH2B name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH3 "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H3 font of given HTML control.</Description>
    <Command>ctrlSetFontH3</Command>
    <Syntax>control ctrlSetFontH3 name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH3B "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H3 bold font of given HTML control.</Description>
    <Command>ctrlSetFontH3B</Command>
    <Syntax>control ctrlSetFontH3B name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH4 "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H4 font of given HTML control.</Description>
    <Command>ctrlSetFontH4</Command>
    <Syntax>control ctrlSetFontH4 name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH4B "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H4 bold font of given HTML control.</Description>
    <Command>ctrlSetFontH4B</Command>
    <Syntax>control ctrlSetFontH4B name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH5 "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H5 font of given HTML control.</Description>
    <Command>ctrlSetFontH5</Command>
    <Syntax>control ctrlSetFontH5 name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH5B "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H5 bold font of given HTML control.</Description>
    <Command>ctrlSetFontH5B</Command>
    <Syntax>control ctrlSetFontH5B name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH6 "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H6 font of given HTML control.</Description>
    <Command>ctrlSetFontH6</Command>
    <Syntax>control ctrlSetFontH6 name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontH6B "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H6 bold font of given HTML control.</Description>
    <Command>ctrlSetFontH6B</Command>
    <Syntax>control ctrlSetFontH6B name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeight 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the main font size of given control.</Description>
    <Command>ctrlSetFontHeight</Command>
    <Syntax>control ctrlSetFontHeight height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeightH1 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H1 font size of given HTML control.</Description>
    <Command>ctrlSetFontHeightH1</Command>
    <Syntax>control ctrlSetFontHeightH1 height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeightH2 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H2 font size of given HTML control.</Description>
    <Command>ctrlSetFontHeightH2</Command>
    <Syntax>control ctrlSetFontHeightH2 height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeightH3 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H3 font size of given HTML control.</Description>
    <Command>ctrlSetFontHeightH3</Command>
    <Syntax>control ctrlSetFontHeightH3 height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeightH4 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H3 font size of given HTML control.</Description>
    <Command>ctrlSetFontHeightH4</Command>
    <Syntax>control ctrlSetFontHeightH4 height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeightH5 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H5 font size of given HTML control.</Description>
    <Command>ctrlSetFontHeightH5</Command>
    <Syntax>control ctrlSetFontHeightH5 height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>height</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontHeightH6 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets H6 font size of given HTML control.</Description>
    <Command>ctrlSetFontHeightH6</Command>
    <Syntax>control ctrlSetFontHeightH6 height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Sets P font size of given HTML control.</Description>
    <Command>ctrlSetFontP height</Command>
    <Syntax>control ctrlSetFontP height</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Sets P font of given HTML control.</Description>
    <Command>ctrlSetFontP name</Command>
    <Syntax>control ctrlSetFontP name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetFontPB "TahomaB")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets P bold font of given HTML control.</Description>
    <Command>ctrlSetFontPB</Command>
    <Syntax>control ctrlSetFontPB name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetForegroundColor [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets background color of given control. Color is in format Color.</Description>
    <Command>ctrlSetForegroundColor</Command>
    <Syntax>display ctrlSetForegroundColor color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[x, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetPosition [0.5, 0.5])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets wanted position for control animation.</Description>
    <Command>ctrlSetPosition</Command>
    <Syntax>control ctrlSetPosition [x, y]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>scale</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlScale 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets wanted scale for control animation.</Description>
    <Command>ctrlSetScale</Command>
    <Syntax>control ctrlSetScale scale</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>structured text</Name>
        <Type>Structured Text</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _control ctrlSetStructuredText parseText "First line&lt;img image=data\isniper.paa /&gt;&lt;br /&gt;Second line"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the structured text which will be displayed in structured text control.</Description>
    <Command>ctrlSetStructuredText</Command>
    <Syntax>control ctrlSetStructuredText structured text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String - text or image path, depending on the control type</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ctrlSetText [100, "Hello world"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set the text of a control of the currently active user dialog. This command can be used for static texts, buttons, edit lines and active texts as well as for images, where you can use it to set the image path. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>ctrlSetText</Command>
    <Syntax>ctrlSetText [idc, text]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Sets the text that will be shown in given control.</Description>
    <Command>ctrlSetText control</Command>
    <Syntax>control ctrlSetText text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetTextColor [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets text color of given control. Color is in format Color.</Description>
    <Command>ctrlSetTextColor</Command>
    <Syntax>display ctrlSetTextColor color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetTooltip "tooltip")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets tooltip text of given control.</Description>
    <Command>ctrlSetTooltip</Command>
    <Syntax>display ctrlSetTooltip text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetTooltipColorBox [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets tooltip border color of given control. Color is in format Color.</Description>
    <Command>ctrlSetTooltipColorBox</Command>
    <Syntax>display ctrlSetTooltipColorBox color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetTooltipColorShade [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets tooltip background color of given control. Color is in format Color.</Description>
    <Command>ctrlSetTooltipColorShade</Command>
    <Syntax>display ctrlSetTooltipColorShade color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>display</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlSetTooltipColorText [1, 0, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets tooltip text color of given control. Color is in format Color.</Description>
    <Command>ctrlSetTooltipColorText</Command>
    <Syntax>display ctrlSetTooltipColorText color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>show</Name>
        <Type />
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ctrlShow [100,false])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set if a control of the currently active user dialog is shown or not. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>ctrlShow</Command>
    <Syntax>ctrlShow [idc, show]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control ctrlShow false)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Show / hide given control.</Description>
    <Command>ctrlShow control</Command>
    <Syntax>control ctrlShow show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_ok = ctrlShown _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns whether given control is shown.</Description>
    <Command>ctrlShown</Command>
    <Syntax>ctrlShown control</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ctrlText 100)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the text of a control of the currently active user dialog. This command can be used on static texts, buttons, edit lines and active texts as well as for images, where it returns the image path. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>ctrlText</Command>
    <Syntax>ctrlText idc</Syntax>
    <ReturnValue>String - The text or image path is returned, dependant on the control type.</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_text = ctrlText _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the text shown in given control.</Description>
    <Command>ctrlText control</Command>
    <Syntax>ctrlText control</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_type = ctrlType _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns value representing type of control.</Description>
    <Command>ctrlType</Command>
    <Syntax>ctrlType</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Integer - control ID</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ctrlVisible 100)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns if a control of the currently active user dialog is shown or not. Read Dialog Control for more information about user dialogs and controls.</Description>
    <Command>ctrlVisible</Command>
    <Syntax>ctrlVisible idc</Syntax>
    <ReturnValue>Boolean - true if the control is shown, false if not</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>currentCommand</Command>
    <Syntax>currentCommand vehicle</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String - the class name of the object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See GUI Interaction for more information about these values.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speed</Name>
        <Type>Number - time in seconds in which the object will be faded in. If no speed is given, an assumed value is set.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Display an object defined in the missions description.ext, the campaigns description.ext or the global resource.cpp.</Description>
    <Command>cutObj</Command>
    <Syntax>cutObj [name, type, speed*] * optional</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String - the class name of the resource</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See GUI Interaction for more information about these values.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speed</Name>
        <Type>Number - time in seconds in which the resource will be faded in. If no speed is given, an assumed value is set.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Display a resource defined in the missions description.ext, the campaigns description.ext or the global resource.cpp.</Description>
    <Command>cutRsc</Command>
    <Syntax>cutRsc [name, type, speed*] * optional</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String - the text to be displayed</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String - one of "PLAIN", "PLAIN DOWN", "BLACK", "BLACK FADED", "BLACK OUT", "BLACK IN", "WHITE OUT" and "WHITE IN". See GUI Interaction for more information about these values.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speed</Name>
        <Type>Number - time in seconds in which the text will be faded in. If no speed is given, an assumed value is set.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Display a text background.</Description>
    <Command>cutText</Command>
    <Syntax>cutText [text, type, speed*] * optional</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (? ((damage player)&gt;0.1) : player groupChat "Im hurt! Medic!")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the damage value of an object.</Description>
    <Command>damage</Command>
    <Syntax>damage object</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the actual mission date and time as an array [year, month, day, hour, minute].</Description>
    <Command>date</Command>
    <Syntax>date</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the current ingame time in hours.</Description>
    <Command>daytime</Command>
    <Syntax>daytime</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Dump argument type and value to debugging output. Note: this command has no real use in the retail version, because it does nothing.</Description>
    <Command>debugLog</Command>
    <Syntax>debugLog anything</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>see switch.</Description>
    <Command>default</Command>
    <Syntax>default a</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Convert a number from radians to degrees.</Description>
    <Command>deg</Command>
    <Syntax>deg x</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>side</Name>
        <Type>Side</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= deleteCenter east</Text>
      </ExampleInfo>
    </Examples>
    <Description>Destroys the AI center of the given side.</Description>
    <Command>deleteCenter</Command>
    <Syntax>deleteCenter side</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Delete a collection.</Description>
    <Command>deleteCollection</Command>
    <Syntax>deleteCollection object</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Group</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= deleteGroup groupname</Text>
      </ExampleInfo>
    </Examples>
    <Description>Destroys the given AI group.</Description>
    <Command>deleteGroup</Command>
    <Syntax>deleteGroup group</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>identity</Name>
        <Type>String - name of the saved identity</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (deleteIdentity "playerIdentity")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Delete an identity (created with saveIdentity) from the campaigns progress file.</Description>
    <Command>deleteIdentity</Command>
    <Syntax>deleteIdentity identity</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= deleteMarker "Marker1"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Destroys the given marker.</Description>
    <Command>deleteMarker</Command>
    <Syntax>deleteMarker name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= deleteMarkerLocal "Marker1"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Destroys the given marker.</Description>
    <Command>deleteMarkerLocal</Command>
    <Syntax>deleteMarkerLocal name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>status</Name>
        <Type>String - name of the saved status</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (deleteStatus "playerStatus")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Delete a status (created with saveStatus) from the campaigns progress file.</Description>
    <Command>deleteStatus</Command>
    <Syntax>deleteStatus status</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Target</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= deleteTarget target1</Text>
      </ExampleInfo>
    </Examples>
    <Description>Delete a target.</Description>
    <Command>deleteTarget</Command>
    <Syntax>deleteTarget target</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Delete an object. Note that only units inserted in the mission editor and units created during the games progress can be deleted by this command. Island objects and player units cant be removed.</Description>
    <Command>deleteVehicle</Command>
    <Syntax>deleteVehicle object</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (deleteWaypoint [grp, 2])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Removes the waypoint.</Description>
    <Command>deleteWaypoint</Command>
    <Syntax>deleteWaypoint waypoint</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(dialog) : createDialog "Dialog1")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>dialog</Command>
    <Syntax>dialog</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the direction an object is facing.</Description>
    <Command>direction</Command>
    <Syntax>direction object</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object - AI unit</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>section</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 disableAI "AUTOTARGET")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>disableAI</Command>
    <Syntax>unit disableAI section</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>disableUserInput</Command>
    <Syntax>disableUserInput state</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control = _display displayCtrl 101)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return child control with specified idc.</Description>
    <Command>displayCtrl</Command>
    <Syntax>display displayCtrl idc</Syntax>
    <ReturnValue>Control</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>A non-existing display. This value is not equal to anything, including itself.</Description>
    <Command>displayNull</Command>
    <Syntax>displayNull</Syntax>
    <ReturnValue>Display</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control displaySetEventHandler ["KeyDown", ""])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets given event handler of given display.</Description>
    <Command>displaySetEventHandler</Command>
    <Syntax>display displaySetEventHandler [handler name, function]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>team</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (dissolveTeam "RED")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Dissolves the given team. All members become members of the main team. Possible team values are: "RED", "GREEN", "BLUE" or "YELLOW".</Description>
    <Command>dissolveTeam</Command>
    <Syntax>dissolveTeam team</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj1 or pos1</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>obj2 or pos2</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ?((player distance generator)&lt;10) : player exec "activateGenerator.sqs"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the distance in meters between two objects or positions.</Description>
    <Command>distance</Command>
    <Syntax>obj1 or pos1 distance obj2 or pos2</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Repeat code while condition is true.</Description>
    <Command>do</Command>
    <Syntax>while do code</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>exp</Name>
        <Type>Switch Type</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= switch (_a) do {case 1: {block}; case 2 : {block}; default {block};}</Text>
      </ExampleInfo>
    </Examples>
    <Description>See switch do</Description>
    <Command>switch</Command>
    <Syntax>switch exp</Syntax>
    <ReturnValue>Anything</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ESoldier1 doFire WSoldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>doFire</Command>
    <Syntax>unit doFire target</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>followedunit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 doFollow soldier2)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit to follow the given other unit (without radio messages).</Description>
    <Command>doFollow</Command>
    <Syntax>unit doFollow followedunit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit(s)</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[fsm name, position, target]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne doFSM ["move.fsm", position player, player])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Orders a unit to process command defined by FSM file (silently).</Description>
    <Command>doFSM</Command>
    <Syntax>unit(s) doFSM [fsm name, position, target]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (doGetOut unitOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Orders a unit to get out from the vehicle (silently).</Description>
    <Command>doGetOut</Command>
    <Syntax>doGetOut unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array (format Position)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 doMove (position "Marker1"))</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit(s) to move to the given position (without radio messages).</Description>
    <Command>doMove</Command>
    <Syntax>unit doMove position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (doStop soldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit to stop (without radio messages).</Description>
    <Command>doStop</Command>
    <Syntax>doStop unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (ESoldier1 doTarget WSoldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Order the given unit to target the given target (without radio messages).</Description>
    <Command>doTarget</Command>
    <Syntax>unit doTarget target</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array (format Position)</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Order the given unit to watch the given position or target (without radio messages).</Description>
    <Command>doWatch</Command>
    <Syntax>unit doWatch position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[position1, position2, color]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Draw an arrow on the map.</Description>
    <Command>drawArrow</Command>
    <Syntax>map drawArrow [position1, position2, color]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[center, a, b, angle, color, fill]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Draw an ellipse on the map.</Description>
    <Command>drawEllipse</Command>
    <Syntax>map drawEllipse [center, a, b, angle, color, fill]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[texture, color, position, width, height, angle, text, shadow]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Draw an Icon on the map.</Description>
    <Command>drawIcon</Command>
    <Syntax>map drawIcon [texture, color, position, width, height, angle, text, shadow]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[position1, position2, color]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Draw a line on the map.</Description>
    <Command>drawLine</Command>
    <Syntax>map drawLine [position1, position2, color]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[center, a, b, angle, color, fill]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Draw a Rectangle on the map.</Description>
    <Command>drawRectangle</Command>
    <Syntax>map drawRectangle [center, a, b, angle, color, fill]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ((driver tank) action ["getout",tank])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the driver of a vehicle.</Description>
    <Command>driver</Command>
    <Syntax>driver vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array - Particle Array in format ParticleArray.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (drop ["cl_basic", "", "Billboard", 1, 1, [-3.5*(sin(direction xural)),-3.5*(cos(direction xural)),0], [random 0.1,random 0.1,random 0.5], 1, 0.005, 0.0042, 0.7, [0.3,3], 0.5,0.5,0.5,0],[0.7,0.7,0.7,0.5],[0.9,0.9,0.9,0, [0,1,0,1,0,1], 0.2, 0.2, "", "", xural])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>drop</Command>
    <Syntax>drop array</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (?((side _unit)==east) : hint "This is an eastern unit!")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Pre-defined variable for the eastern side</Description>
    <Command>east</Command>
    <Syntax>east</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (echo "Text in logfile")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sends any text into the debugger console or the logfile. Present in internal version only, not working in the retail version.</Description>
    <Command>echo</Command>
    <Syntax>echo text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the effective commander (who really commands) of the vehicle.</Description>
    <Command>effectiveCommander</Command>
    <Syntax>effectiveCommander vehicle</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>ifCode</Name>
        <Type>Code</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>elseCode</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= if (a&gt;b) then {c=0} else {c=1}</Text>
      </ExampleInfo>
    </Examples>
    <Description>Construct an array that can be processed by then.</Description>
    <Command>else</Command>
    <Syntax>ifCode else elseCode</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _freePositions = (vehicle player) emptyPositions "cargo"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>emptyPositions</Command>
    <Syntax>vehicle emptyPositions position</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne enableAI "Move")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>enableAI</Command>
    <Syntax>unit enableAI section</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>enable</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= group1 enableAttack true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set if leader can issue attack commands.</Description>
    <Command>enableAttack</Command>
    <Syntax>group enableAttack enable</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Enables the execution of a custom camera sequence after the players death, coded in the script onPlayerKilled.sqs.</Description>
    <Command>enableEndDialog</Command>
    <Syntax>enableEndDialog</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>enabled</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= enableEnvironment false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable/disable environmental effects (ambient life + sound).</Description>
    <Command>enableEnvironment</Command>
    <Syntax>enableEnvironment enabled</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>state</Name>
        <Type>Boolean - true to enable the radio, false to disable it</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (enableRadio false)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable and disable radio messages to be heard and shown in the left lower corner of the screen. That can be helpful during cutscenes.</Description>
    <Command>enableRadio</Command>
    <Syntax>enableRadio state</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>enable</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_vehicle enableReload false)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable / disable reload right after magazine is empty.</Description>
    <Command>enableReload</Command>
    <Syntax>object enableReload enable</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>enable</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Enable / disable team switch.</Description>
    <Command>enableTeamSwitch</Command>
    <Syntax>enableTeamSwitch enable</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Enemy side (enemy to all units).</Description>
    <Command>enemy</Command>
    <Syntax>enemy</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>state</Name>
        <Type>Boolean - true to turn the engine on, false to turn it off</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?!(isEngineOn jeep) : jeep engineOn true)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Activates and deactivates the engine of a vehicle.</Description>
    <Command>engineOn</Command>
    <Syntax>vehicle engineOn state</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number - estimated time in seconds, or one of {param1, param2, ...}</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (?("OBJ1" objectStatus "DONE") : estimatedTimeLeft 600)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the "time left" value that is shown in the "Game in Progress" screen during multiplayer sessions. This command works in MP only.If you set param1, param2 or following in the missions description.ext, you can use those values instead of time.</Description>
    <Command>estimatedTimeLeft</Command>
    <Syntax>estimatedTimeLeft time</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>argument</Name>
        <Type>Any Value - the argument which should be passed to the script. To pass multiple arguments, use an array.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>fileName</Name>
        <Type>String - the name of the script. It should be given relatively to the mission folder, campaign scripts subfolder or global scripts folder and is searched there in the same order. If you refer to a script packed together with an addon, the path should look like this</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([player, jeep] exec "getin.sqs")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Execute a script. The argument is passed to the script in the "_this" variable. Learn more about scripts under Script</Description>
    <Command>exec</Command>
    <Syntax>argument exec fileName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= var = player execVM "test.sqf"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>execVM</Command>
    <Syntax>argument execVM filename</Syntax>
    <ReturnValue>Script</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>exit</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>if</Name>
        <Type>If Type</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>code</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>If the result of condition is true, code is evaluated, and current block with result of code</Description>
    <Command>exitWith</Command>
    <Syntax>if exitWith code</Syntax>
    <ReturnValue>Anything</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Let x be a number, then exp (x) is equal to e to the power of x (or e^x)</Description>
    <Command>exp</Command>
    <Syntax>exp x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return expected destination of unit as an array with format: [position, planningMode, forceReplan].</Description>
    <Command>expectedDestination</Command>
    <Syntax>expectedDestination person</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  exportLandscapeXYZ myLandscape</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>exportLandscapeXYZ</Command>
    <Syntax>exportLandscapeXYZ filename</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number - the time in seconds</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>volume</Name>
        <Type>Number - music volume range 0 to 1. 0 is silent, 1 is the loudest. 0.5 is set by default.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (5 fadeMusic 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Changes the music volume smoothly within the given time.</Description>
    <Command>fadeMusic</Command>
    <Syntax>time fadeMusic volume</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (5 fadeRadio 0.1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Causes a smooth change in the radio volume. The change duration is given by time, the target volume by volume. The default radio volume is 1.0.</Description>
    <Command>fadeRadio</Command>
    <Syntax>time fadeRadio volume</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number - the time in seconds</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>volume</Name>
        <Type>Number - sound volume range 0 to 1. 0 is silent, 1 is the loudest. 0.5 is set by default.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (5 fadeSound 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Changes the sound volume smoothly within the given time.</Description>
    <Command>fadeSound</Command>
    <Syntax>time fadeSound volume</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Always false.</Description>
    <Command>false</Command>
    <Syntax>false</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (fillWeaponsFromPool soldier)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Adds magazines from the campaign pool to the given unit, depending on his weapons.</Description>
    <Command>fillWeaponsFromPool</Command>
    <Syntax>fillWeaponsFromPool unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Any Value</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= [0, 1, 2] find 1 .... result is 1</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= if ((magazines player) find "Strela" &gt; -1) then {hint "I got a Strela"}</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>find</Command>
    <Syntax>array find x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[position, hidePosition, maxDist]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the object where the object should search for cover.</Description>
    <Command>findCover</Command>
    <Syntax>object findCover [position, hidePosition, maxDist]</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idd</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_display = findDisplay 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Find display by its IDD (which is defined in the description.ext or config).</Description>
    <Command>findDisplay</Command>
    <Syntax>findDisplay idd</Syntax>
    <ReturnValue>Display</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Find the nearest enemy from the specified position.</Description>
    <Command>findNearestEnemy</Command>
    <Syntax>object findNearestEnemy position</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Finish world initialization before mission is launched.</Description>
    <Command>finishMissionInit</Command>
    <Syntax>finishMissionInit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (finite 10/0 .... result is false)</Text>
      </ExampleInfo>
    </Examples>
    <Description>true</Description>
    <Command>finite</Command>
    <Syntax>finite x</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object - unit thats supposed to fire</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weapon</Name>
        <Type>String - name of the weapon to be fired</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldier fire "M16"</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= soldier fire ["throw","SmokeShell","SmokeShell"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Forces a unit to fire the given weapon.</Description>
    <Command>fire</Command>
    <Syntax>unit fire weapon</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_flag = flag soldier)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the flag the unit is carrying.</Description>
    <Command>flag</Command>
    <Syntax>flag unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>anyFlag</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_person = flagowner flagOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the owner of a flag.</Description>
    <Command>flagOwner</Command>
    <Syntax>flagOwner anyFlag</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (? (fleeing east_unit) : player sideChat "We have won!")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks if a unit is fleeing.</Description>
    <Command>fleeing</Command>
    <Syntax>fleeing unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples />
    <Description>Returns the next lowest integer in relation to x.</Description>
    <Command>floor</Command>
    <Syntax>floor</Syntax>
    <ReturnValue>Integer</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>aircraft</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>altitude</Name>
        <Type>Number - flying altitude in meters</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (helicopter flyInHeight 40)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the flying altitude for aircraft relatively to the ground surface. Avoid too low altitudes, as helicopters and planes wont evade trees and obstacles on the ground. The default flying altitude is 100 meters.</Description>
    <Command>flyInHeight</Command>
    <Syntax>aircraft flyInHeight altitude</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the current fog.</Description>
    <Command>fog</Command>
    <Syntax>fog</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the fog forecast.</Description>
    <Command>fogForecast</Command>
    <Syntax>fogForecast</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>for</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Enforces mission termination.</Description>
    <Command>forceEnd</Command>
    <Syntax>forceEnd</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (forceMap true)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Displays the map on the screen during a mission.</Description>
    <Command>forceMap</Command>
    <Syntax>forceMap state</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speed</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Force the speed of the given object.</Description>
    <Command>forceSpeed</Command>
    <Syntax>object forceSpeed speed</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>command</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Executes the given command on every item of an array. The array items are represented by _x. All commands are executed within one frame, so this command might cause performance loss when used on very large arrays or with very complex commands.</Description>
    <Command>forEach</Command>
    <Syntax>command forEach array</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>string</Name>
        <Type>String - a string containing references to the variables listed below in the array. The references appear in form of %1, %2 etc.</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>var1</Name>
        <Type>Any Value - variable referenced by %1</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>var2</Name>
        <Type>Any Value - variable referenced by %2, and so on</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>format</Command>
    <Syntax>format [string, var1, var2 ...]</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= formation group player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the current formation of a group.</Description>
    <Command>formation</Command>
    <Syntax>formation grp</Syntax>
    <ReturnValue>String -  returns either "COLUMN", "STAG COLUMN", "WEDGE", "ECH LEFT", "ECH RIGHT", "VEE" or "LINE"</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples />
    <Description>Return the direction unit watching in formation.</Description>
    <Command>formationDirection</Command>
    <Syntax>formationDirection person</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return leader of the formation.</Description>
    <Command>formationLeader</Command>
    <Syntax>formationLeader person</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return list of units (drivers) in the formation.</Description>
    <Command>formationMembers</Command>
    <Syntax>formationMembers person</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return position of unit in the formation</Description>
    <Command>formationPosition</Command>
    <Syntax>formationPosition person</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return the current task of the unit in the formation.</Description>
    <Command>formationTask</Command>
    <Syntax>formationTask person</Syntax>
    <ReturnValue>String: (EXCLUDED, MOVE, COVER, ?)</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[format, arg1, arg2, ...]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= txt = formatText ["Image: %1", image "data\isniper.paa"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a structured text by replacing %1, %2, etc. in format with plain or structured texts given as arguments.</Description>
    <Command>formatText</Command>
    <Syntax>formatText [format, arg1, arg2, ...]</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the formation leader of a given unit. This is often the same as the group leader, but not always, for example in cases when a unit is ordered to follow another unit.</Description>
    <Command>formLeader</Command>
    <Syntax>formLeader unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Friendly side (friendly to all units).</Description>
    <Command>friendly</Command>
    <Syntax>friendly</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>for "_var"</Name>
        <Type>For Type</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= for var</Text>
      </ExampleInfo>
    </Examples>
    <Description>Continue sequence of for var command.</Description>
    <Command>from</Command>
    <Syntax>for "_var" from b</Syntax>
    <ReturnValue>For Type</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ?(fuel (vehicle player) == 0) : hint "The vehicle is out of fuel!"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks how much fuel is left in the gas tank of a vehicle.</Description>
    <Command>fuel</Command>
    <Syntax>fuel vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>config</Name>
        <Type>Config</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_array = getArray (configFile &gt;&gt; "CfgVehicles" &gt;&gt; "Thing" &gt;&gt; "threat"))</Text>
      </ExampleInfo>
    </Examples>
    <Description>Extract array from config entry.</Description>
    <Command>getArray</Command>
    <Syntax>getArray config</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the object damage in the range from 0 to 1.</Description>
    <Command>getDammage</Command>
    <Syntax>getDammage obj</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the object heading in the range from 0 to 360.</Description>
    <Command>getDir</Command>
    <Syntax>getDir obj</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>enemy</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the hiding position in format Position. If enemy is null it is some position in front of the object or enemy position.</Description>
    <Command>getHideFrom</Command>
    <Syntax>object getHideFrom enemy</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String - marker name</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the color of a given map marker.</Description>
    <Command>getMarkerColor</Command>
    <Syntax>getMarkerColor marker</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String - marker name</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>getMarkerPos</Command>
    <Syntax>getMarkerPos marker</Syntax>
    <ReturnValue>Array - (format Position3D)</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String - marker name</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the size of a given marker.</Description>
    <Command>getMarkerSize</Command>
    <Syntax>getMarkerSize marker</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String - marker name</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the type of a given marker.</Description>
    <Command>getMarkerType</Command>
    <Syntax>getMarkerType marker</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>config</Name>
        <Type>Config</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_value = getNumber (configFile &gt;&gt; "CfgVehicles" &gt;&gt; "Thing" &gt;&gt; "maxSpeed"))</Text>
      </ExampleInfo>
    </Examples>
    <Description>Extract number from config entry.</Description>
    <Command>getNumber</Command>
    <Syntax>getNumber config</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the object position in format Position.</Description>
    <Command>getPos</Command>
    <Syntax>getPos obj</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= getPosASL player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the object position in format PositionASL.</Description>
    <Command>getPosASL</Command>
    <Syntax>getPosASL obj</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speedMode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>getSpeed</Command>
    <Syntax>object getSpeed speedMode</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= myTruck getVariable "myVariable";</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the value of variable in the variable space of given object.</Description>
    <Command>getVariable</Command>
    <Syntax>object getVariable name</Syntax>
    <ReturnValue>Any Value</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Group - the group/unit, of which you want to select a waypoint</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>number</Name>
        <Type>Integer - 0 equals the starting position of the group, the waypoints are numbered 1, 2, ... An easy way to remember which number to take</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the position of a selected waypoint of a given group. Waypoints include only those which were placed in the mission editor.</Description>
    <Command>getWPPos</Command>
    <Syntax>getWPPos [group, number]</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit(s)</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>glanceAt</Command>
    <Syntax>unit(s) glanceAt position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String - the message that should be sent</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne globalChat "Show this text")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Make a unit send a text message over the global radio channel.</Description>
    <Command>globalChat</Command>
    <Syntax>unit globalChat text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>message</Name>
        <Type>String - the name of the message class in the description.ext</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne globalRadio "messageOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Make a unit send a message over the global radio channel. The message is defined in the description.ext of the mission and may contain text and sound.</Description>
    <Command>globalRadio</Command>
    <Syntax>unit globalRadio message</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>label</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>goto</Command>
    <Syntax>goto label</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= playerGrp = group player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the group a unit is assigned to.</Description>
    <Command>group</Command>
    <Syntax>group unit</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String - the message that should be sent</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne groupChat "Show this text")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Make a unit send a text message over the group radio channel.</Description>
    <Command>groupChat</Command>
    <Syntax>unit groupChat text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>message</Name>
        <Type>String - the name of the message class in the description.ext</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne groupRadio "messageOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Make a unit send a message over the group radio channel. The message is defined in the description.ext of the mission and may contain text and sound.</Description>
    <Command>groupRadio</Command>
    <Syntax>unit groupRadio message</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>A non-existing group. This value is not equal to anything, including itself.</Description>
    <Command>grpNull</Command>
    <Syntax>grpNull</Syntax>
    <ReturnValue>Group</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ((gunner tank) action ["getout",tank])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the gunner of a vehicle.</Description>
    <Command>gunner</Command>
    <Syntax>gunner vehicle</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>halt</Command>
    <Syntax>halt</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? (handshit player == 1) : player globalChat "Ouch! Dont shoot at my hands dammit!"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks if a soldiers hands are hit, which results in inaccurate aiming.</Description>
    <Command>handsHit</Command>
    <Syntax>handsHit soldier</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weapon</Name>
        <Type>String - the name of the weapon to check for.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ?!(player hasWeapon "M16") : player addWeapon "M16"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks if a unit has the given weapon.</Description>
    <Command>hasWeapon</Command>
    <Syntax>unit hasWeapon weapon</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>scriptedHideBehind</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= unit hideBehindScripted true</Text>
      </ExampleInfo>
    </Examples>
    <Description>When set to true it disables the default engine hiding behavior.</Description>
    <Command>hideBehindScripted</Command>
    <Syntax>object hideBehindScripted scriptedHideBehind</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= hideBody player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Hides the body of the given person.</Description>
    <Command>hideBody</Command>
    <Syntax>hideBody person</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>The number of objects in hierarchy.</Description>
    <Command>hierarchyObjectsCount</Command>
    <Syntax>hierarchyObjectsCount</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String - the message to write on the screen may consist of any characters. \n indicates a line break.</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Outputs a hint message on the left upper corner of the screen together with a clinging sound. The text may contain several lines.</Description>
    <Command>hint</Command>
    <Syntax>hint text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>hintC</Command>
    <Syntax>hintC text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= hintCadet "Press W to move forward"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>hintCadet</Command>
    <Syntax>hintCadet text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_control htmlLoad "briefing.html")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Load HTML from file to given control.</Description>
    <Command>htmlLoad</Command>
    <Syntax>control htmlLoad filename</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>condition</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= if (a&gt;b) then {a=b}</Text>
      </ExampleInfo>
    </Examples>
    <Description>First part of if command.</Description>
    <Command>if</Command>
    <Syntax>if condition</Syntax>
    <ReturnValue>If Type</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples />
    <Description>Creates a structured text containing the given image.</Description>
    <Command>image</Command>
    <Syntax>image filename</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>in</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>fireplace</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>burn</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= fireplaceOne inflame true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Control fireplace burning. Set inflame to true (on) or false (off).</Description>
    <Command>inflame</Command>
    <Syntax>fireplace inflame true</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>fireplace</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_it = inflamed fireplaceOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if fireplace is inflamed (burning) or not.</Description>
    <Command>inflamed</Command>
    <Syntax>inflamed fireplace</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[handler name, function]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Sets given event handler of in-game UI.</Description>
    <Command>inGameUISetEventHandler</Command>
    <Syntax>inGameUISetEventHandler [handler name, function]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>config</Name>
        <Type>Config</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns base entry of config entry.</Description>
    <Command>inheritsFrom</Command>
    <Syntax>inheritsFrom config</Syntax>
    <ReturnValue>Config</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Initialize the ambient life.</Description>
    <Command>initAmbientLife</Command>
    <Syntax>initAmbientLife</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[object, lod name]</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[begin, end]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([tank, "VIEW"] intersect 1500, 1500, 2], [1550, 1500, 2)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Find named selection in object which is in specified lod intersected by given section of a line.</Description>
    <Command>intersect</Command>
    <Syntax>[object, lod name] intersect [begin, end]</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_it = isEngineOn carOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns true if engine is on, false if it is off.</Description>
    <Command>isEngineOn</Command>
    <Syntax>isEngineOn vehicle</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns true if the specified person is subgroup leader.</Description>
    <Command>isFormationLeader</Command>
    <Syntax>isFormationLeader person</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return whether the person is hidden (reached the hiding position).</Description>
    <Command>isHidden</Command>
    <Syntax>isHidden person</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return whether the vehicle has set the hideBehindScripted true.</Description>
    <Command>isHideBehindScripted</Command>
    <Syntax>isHideBehindScripted vehicle</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>keyName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_ok = isKeyActive "M04")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>isKeyActive</Command>
    <Syntax>isKeyActive keyName</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>typeName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= vehicle player isKindOf "Tank"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks whether the object is of the given type.</Description>
    <Command>isKindOf</Command>
    <Syntax>object isKindOf typeName</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (marked = isMarkedForCollection truck)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Checks whether the object is marked for weapons collection.</Description>
    <Command>isMarkedForCollection</Command>
    <Syntax>isMarkedForCollection object</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>variable</Name>
        <Type>String or Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Tests whether the variable is null. The function returns true if the variable is null and false if its not.</Description>
    <Command>isNil</Command>
    <Syntax>isnil variable</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>isNull</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check if given person is a human player.</Description>
    <Command>isPlayer</Command>
    <Syntax>isPlayer person</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unitArray</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= [unitOne, unitTwo] join player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Join all units in the array to given group. Notes: Total number of group members must not exceed 12 (in OFP!). This function is unsupported in MP in version 1.33 and before, now it has to be executed where the given unit is local.</Description>
    <Command>join</Command>
    <Syntax>unitArray join group</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_unit kbAddDatabase "chat.txt")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Register knowledge base database to given person.</Description>
    <Command>kbAddDatabase</Command>
    <Syntax>person kbAddDatabase filename</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_unit kbAddDatabase "chat.txt")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Register target list knowledge base database to given person.</Description>
    <Command>kbAddDatabaseTargets</Command>
    <Syntax>person kbAddDatabaseTargets filename</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[name, filename(, task type)]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Register conversation topic to given person.</Description>
    <Command>kbAddTopic</Command>
    <Syntax>person kbAddTopic [name, filename(, task type)]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check if conversation topic was registered to given person.</Description>
    <Command>kbHasTopic</Command>
    <Syntax>person kbHasTopic name</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>topicname</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Unregister conversation topic from given person.</Description>
    <Command>kbRemoveTopic</Command>
    <Syntax>person kbRemoveTopic topicname</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[receiver, topic, sentence id, [argument name, argument value, argument text, argument speech], ...]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Make the person tell to the receiver the sentence.</Description>
    <Command>kbTell</Command>
    <Syntax>person kbTell [receiver, topic, sentence id, [argument name, argument value, argument text, argument speech], ...]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>dikCode</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (name = keyImage 28 .... result is "Enter")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns a structured text, containing an image or name (if no image is found) of the button, on the keyboard, mouse or joystick, with the given code.</Description>
    <Command>keyImage</Command>
    <Syntax>keyImage dikcode</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>dikCode</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (name = keyName 28 .... result is "Enter")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the name of a button (on the keyboard, mouse or joystick) with the given code.</Description>
    <Command>keyName</Command>
    <Syntax>keyName dikCode</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_kv = soldierOne knowsAbout jeepOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if (and by how much) unit knows about target. If unit is vehicle, vehicle commander is considered.</Description>
    <Command>knowsAbout</Command>
    <Syntax>unit knowsAbout target</Syntax>
    <ReturnValue>Number (from 0 to 4)</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>helicopter</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= cobraOne land "LAND"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>land</Command>
    <Syntax>helicopter land mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, text]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_index = lbAdd [101, "First item"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>lbAdd</Command>
    <Syntax>lbAdd [idc, text]</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbClear 101)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Clear all items in listbox or combobox with id idc of topmost user dialog.</Description>
    <Command>lbClear</Command>
    <Syntax>lbClear idc</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_colour = lbColor [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>lbColor</Command>
    <Syntax>lbColor [idc, index]</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_index = lbCurSel 101)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the index of the selected item of the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbCurSel</Command>
    <Syntax>lbCurSel idc</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_data = lbData [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the additional text (invisible) in an item with the given index of the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbData</Command>
    <Syntax>lbData [idc, index]</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbDelete [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Removes the item with the given index from the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbDelete</Command>
    <Syntax>lbDelete [idc, index]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>index</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_selected = _control lbIsSelected 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check whether given row of the given listbox is selected.</Description>
    <Command>lbIsSelected</Command>
    <Syntax>control lbIsSelected index</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_picture = lbPicture [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the picture name of the item with the given index of the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbPicture</Command>
    <Syntax>lbPicture [idc, index]</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>control</Name>
        <Type>Control</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_indices = lbSelection _control)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the array of selected rows indices in the given listbox</Description>
    <Command>lbSelection</Command>
    <Syntax>lbSelection control</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index, color]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbSetColor [101, 0, [0, 1, 0, 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>lbSetColor</Command>
    <Syntax>lbSetColor  [idc, index, color]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbSetCurSel [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Selects the item with the given index of the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbSetCurSel</Command>
    <Syntax>lbSetCurSel [idc, index]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index, data]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbSetData [101, 1, "#1"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the additional text (invisible) in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given data.</Description>
    <Command>lbSetData</Command>
    <Syntax>lbSetData [idc, index, data]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index, name]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbSetPicture [101, 0, "iskoda"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>lbSetPicture</Command>
    <Syntax>lbSetPicture [idc, index, name]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index, value]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (lbSetValue [101, 0, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog to the given value.</Description>
    <Command>lbSetValue</Command>
    <Syntax>lbSetValue [idc, index, value]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_n = lbSize 101)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return number of items of listbox or combobox with id idc of topmost user dialog.</Description>
    <Command>lbSize</Command>
    <Syntax>lbSize idc</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_text = lbText [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the shown text in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbText</Command>
    <Syntax>lbText [idc, index]</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, index]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_value = lbValue [101, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the additional integer value in the item with the given index of the listbox or combobox with id idc of the topmost user dialog.</Description>
    <Command>lbValue</Command>
    <Syntax>lbValue [idc, index]</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the group leader for the given unit or group. For dead units, objNull is returned.</Description>
    <Command>leader</Command>
    <Syntax>leader unit</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>light</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[object, position]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Attach light to given object (at given position).</Description>
    <Command>lightAttachObject</Command>
    <Syntax>light lightAttachObject [object, position]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>light</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Detach light from object.</Description>
    <Command>lightDetachObject</Command>
    <Syntax>lightDetachObject light</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>lamppost</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>lightIsOn</Command>
    <Syntax>lightIsOn lamppost</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speed</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Limit speed of given vehicle to given value (in km/h).</Description>
    <Command>limitSpeed</Command>
    <Syntax>object limitSpeed speed</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (txt3 = lineBreak)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a structured text containing a line break.</Description>
    <Command>lineBreak</Command>
    <Syntax>lineBreak</Syntax>
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _tlist = list triggerOne</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>list</Command>
    <Syntax>list trigger</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Natural logarithm of x.</Description>
    <Command>ln</Command>
    <Syntax>ln x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (loadFile "myFunction.sqf")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return content of given filename.</Description>
    <Command>loadFile</Command>
    <Syntax>loadFile filename</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player loadIdentity "playerIdentity"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Loads persons identity from Objects.sav file in campaign directory (from entry name).</Description>
    <Command>loadIdentity</Command>
    <Syntax>person loadIdentity name</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player loadStatus "playerState"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Loads objects properties from Objects.sav file in campaign directory (from entry name).</Description>
    <Command>loadStatus</Command>
    <Syntax>object loadStatus name</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= local unitName</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>local</Command>
    <Syntax>local obj</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>stringName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (localize "STR_DN_FROG")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Replace string with given stringName with corresponding localized text from Stringtable.csv.</Description>
    <Command>localize</Command>
    <Syntax>localize stringName</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>lock</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= jeepOne lock true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Lock vehicle (disable mounting / dismounting) for player.</Description>
    <Command>lock</Command>
    <Syntax>vehicle lock lock</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_it = locked jeepOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if vehicle is locked for player. If it is locked, player cannot mount / dismount without order.</Description>
    <Command>locked</Command>
    <Syntax>locked unit</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>lockWP</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= groupOne lockWP true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Disable switching to next waypoint (current waypoint will never complete while lockwp is used). Sometimes used during cut-scenes.</Description>
    <Command>lockWP</Command>
    <Syntax>group lockWP lockWP</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_log = log 10 ..........Result is 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Base-10 logarithm of x.</Description>
    <Command>log</Command>
    <Syntax>log x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit(s)</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Position</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>target</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1=  someSoldier lookAt otherSoldier</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2=  otherSoldier lookAt markerPos "markerOne"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Control what the unit is looking at (target or position).</Description>
    <Command>lookAt</Command>
    <Syntax>unit(s) lookAt position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _mags = magazines player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns array of type names of all vehicles magazines.</Description>
    <Command>magazines</Command>
    <Syntax>magazines vehicle</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>frame</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= mapAnimAdd [1, 0.1, markerPos "anim1"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Add next frame to map animation. Format of frame is [time, zoom, position], format of position is Position2D.</Description>
    <Command>mapAnimAdd</Command>
    <Syntax>mapAnimAdd frame</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Clear map animation.</Description>
    <Command>mapAnimClear</Command>
    <Syntax>mapAnimClear</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Play map animation.</Description>
    <Command>mapAnimCommit</Command>
    <Syntax>mapAnimCommit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Check if map animation is finished.</Description>
    <Command>mapAnimDone</Command>
    <Syntax>mapAnimDone</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? markerColor "MarkerOne" == "ColorRed" : player setFace "Marilyn"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get marker colour. See setMarkerColor. Note: This function is identical to getMarkerColor.</Description>
    <Command>markerColor</Command>
    <Syntax>markerColor markername</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_mPos = markerDir "markerOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get marker direction.</Description>
    <Command>markerDir</Command>
    <Syntax>markerDir markerName</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_mPos = markerPos "markerOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get marker positon [x,z,y]. Note: This function is identical to getMarkerPos.</Description>
    <Command>markerPos</Command>
    <Syntax>markerPos markerName</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_mSize = markerSize "MarkerOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get marker size. Note: This function is identical to getMarkerSize.</Description>
    <Command>markerSize</Command>
    <Syntax>markerSize markerName</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_mDesc = markerText "markerOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get marker text.</Description>
    <Command>markerText</Command>
    <Syntax>markerText markerName</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? markerType "MarkerOne" == "Dot" : "MarkerOne" setMarkerType "Arrow"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get type of marker. Note: This function is identical to getMarkerType.</Description>
    <Command>markerType</Command>
    <Syntax>markerType markerName</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>The greater of a,b</Description>
    <Command>max</Command>
    <Syntax>a</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>The smaller of a,b</Description>
    <Command>min</Command>
    <Syntax>a</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return root of mission description.ext entries hierarchy.</Description>
    <Command>missionConfigFile</Command>
    <Syntax>missionConfigFile</Syntax>
    <ReturnValue>Config</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return name of current mission. Works only in multiplayer, in singleplayer returns empty String.</Description>
    <Command>missionName</Command>
    <Syntax>missionName</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>missionStart</Command>
    <Syntax>missionStart</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Remainder of a divided by b.</Description>
    <Command>mod</Command>
    <Syntax>a mod b</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>modelPos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Converts position from object model space to world space.</Description>
    <Command>modelToWorld</Command>
    <Syntax>object modelToWorld modelPos</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= groupOne move position player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a move waypoint on given position (format Position or Position2D) and makes it an actual group waypoint.</Description>
    <Command>move</Command>
    <Syntax>group move pos</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne moveInCargo jeepOne</Text>
      </ExampleInfo>
    </Examples>
    <Description>Move soldier into vehicle cargo position (Immediate, no animation).</Description>
    <Command>moveInCargo</Command>
    <Syntax>soldier moveInCargo vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne moveInCommander tankOne</Text>
      </ExampleInfo>
    </Examples>
    <Description>Move soldier into vehicle commander position (Immediate, no animation).</Description>
    <Command>moveInCommander</Command>
    <Syntax>soldier moveInCommander vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne moveInDriver tankOne</Text>
      </ExampleInfo>
    </Examples>
    <Description>Move soldier into vehicle driver position (Immediate, no animation).</Description>
    <Command>moveInDriver</Command>
    <Syntax>soldier moveInDriver vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne moveInGunner tankOne</Text>
      </ExampleInfo>
    </Examples>
    <Description>Move soldier into vehicle gunner position (Immediate, no animation).</Description>
    <Command>moveInGunner</Command>
    <Syntax>soldier moveInGunner vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[vehicle, turret path]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne moveInTurret [tank, [0, 0</Text>
      </ExampleInfo>
    </Examples>
    <Description>Moves the soldier into the vehicles turret. (Immediately, without animation).</Description>
    <Command>moveInTurret</Command>
    <Syntax>soldier moveInTurret [vehicle, turret path]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>posDescription</Name>
        <Type>Array ([position,typeAccuracy,posAccuracy])</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= target moveTarget [position player,1,1]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Change information about a target.</Description>
    <Command>moveTarget</Command>
    <Syntax>obj moveTarget posDescription</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Low level command to person to move to given position.</Description>
    <Command>moveTo</Command>
    <Syntax>person moveTo position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check if latest low level moveTo command is finished.</Description>
    <Command>moveToCompleted</Command>
    <Syntax>moveToCompleted person</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check if latest low level moveTo command failed.</Description>
    <Command>moveToFailed</Command>
    <Syntax>moveToFailed person</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Checks the current music volume (set by fadeMusic)</Description>
    <Command>musicVolume</Command>
    <Syntax>musicVolume</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _name = name vehicle player</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>name</Command>
    <Syntax>name object</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _nBuilding = nearestBuilding player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Nearest building to given object.</Description>
    <Command>nearestBuilding</Command>
    <Syntax>nearestBuilding obj</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _nObject = nearestObject  [player, "StreetLamp"]</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= _nObject = nearestObject  [player, "Tank"]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>nearestObject</Command>
    <Syntax>nearestObject pos</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object from which is searched</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>class</Name>
        <Type>Array of Strings (which class of objects to search for)</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>range</Name>
        <Type>Number (distance to search)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= nearestObjects [player, ["Car","Tank"], 200]</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= nearestObjects [player, ["house"], 200]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>nearestObjects</Command>
    <Syntax>nearestObjects [unit, class, range]</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>radius</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Object or Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[typeName, radius]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _list = position player nearObjects 50</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= _list= [_xpos,_ypos] nearObjects ["House",20]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Find objects in the circle with given radius. If typeName is given, only objects of given type (or its subtype) are listed.</Description>
    <Command>nearObjects</Command>
    <Syntax>position nearObjects radius</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return how much vehicle wants to reload its weapons.</Description>
    <Command>needReload</Command>
    <Syntax>needReload vehicle</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the time (in seconds) when the next weather change will occur.</Description>
    <Command>nextWeatherChange</Command>
    <Syntax>nextWeatherChange</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (variableToDestroy = nil)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Nil value. This value can be used to undefine existing variables.</Description>
    <Command>nil</Command>
    <Syntax>nil</Syntax>
    <ReturnValue>Any Value</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>not a. not a is exactly the same as ! a</Description>
    <Command>not</Command>
    <Syntax>not a</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>id</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _obj = object 1</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>object</Command>
    <Syntax>object id</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Non-existent object. This value is not equal to anything, not even to itself.</Description>
    <Command>objNull</Command>
    <Syntax>objNull</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>objective</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>status</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("1" objStatus "DONE" (Marks the objective named "OBJ_1" as completed.))</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>objStatus</Command>
    <Syntax>objective objStatus status</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>sound</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (onBriefingGear "GearVoiceOver")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Define sound (voice) played the first time when section Gear in briefing is selected.</Description>
    <Command>onBriefingGear</Command>
    <Syntax>onBriefingGear sound</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>sound</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (onBriefingGroup "GroupVoiceOver")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Define sound (voice) played the first time when section Group in briefing is selected.</Description>
    <Command>onBriefingGroup</Command>
    <Syntax>onBriefingGroup sound</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>sound</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (onBriefingNotes "NotesVoiceOver")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Define sound (voice) played the first time when section Briefing: Notes</Description>
    <Command>onBriefingNotes</Command>
    <Syntax>onBriefingNotes sound</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>sound</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (onBriefingPlan "PlanVoiceOver")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Define sound (voice) played the first time when section Briefing: Plan</Description>
    <Command>onBriefingPlan</Command>
    <Syntax>onBriefingPlan sound</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>sound</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (onBriefingTeamSwitch "TeamSwitchVoiceOver)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Defines a sound (voice) that is played the first time when the Team switch section in the briefing is selected.</Description>
    <Command>onBriefingTeamSwitch</Command>
    <Syntax>onBriefingTeamSwitch sound</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>command</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>onMapSingleClick</Command>
    <Syntax>onMapSingleClick command</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>statement</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>This statement is launched whenever a player is connected to a MP session. Variables _id and _name are set.</Description>
    <Command>onPlayerConnected</Command>
    <Syntax>onPlayerConnected statement</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>statement</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>This statement is launched whenever a player is disconnected from a MP session. Variables _id and _name are set.</Description>
    <Command>onPlayerDisconnected</Command>
    <Syntax>onPlayerDisconnected statement</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>a</Name>
        <Type>a test condition or a variable that return a Boolean value</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>a test condition or a variable that return a Boolean value</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= if (OBJ1) or (enemycount==0) then {hint "you win"}</Text>
      </ExampleInfo>
    </Examples>
    <Description>a or b</Description>
    <Command>or</Command>
    <Syntax>a or b</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unitArray</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>order</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= [unitOne, unitTwo] orderGetIn true</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= [unitOne, unitTwo] orderGetIn false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Force all units in the array to get in or out of their assigned vehicles. Units must be assigned to a vehicle before this command will do anything.</Description>
    <Command>orderGetIn</Command>
    <Syntax>unitArray orderGetIn order</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= setOvercast (overcast + 0.1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the current overcast.</Description>
    <Command>overcast</Command>
    <Syntax>overcast</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the overcast forecast.</Description>
    <Command>overcastForecast</Command>
    <Syntax>overcastForecast</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= number = parseNumber "0.125"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Parse string containing real number.</Description>
    <Command>parseNumber</Command>
    <Syntax>parseNumber text</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (txt = parseText "First line&lt;img image=data\isniper.paa/&gt;&lt;br/&gt;Second line")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a structured text by parsing the given XML description.</Description>
    <Command>parseText</Command>
    <Syntax>parseText text</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>pi (180 degrees converted to radians).</Description>
    <Command>pi</Command>
    <Syntax>pi</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Transfer weapons and magazines from cargo of object into weapon pool (used in campaign to transfer weapons into next mission).</Description>
    <Command>pickWeaponPool</Command>
    <Syntax>pickWeaponPool object</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= player addRating 500</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>player</Command>
    <Syntax>player</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= @playerRespawnTime == 0</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the player remaining time to respawn.</Description>
    <Command>playerRespawnTime</Command>
    <Syntax>playerRespawnTime</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the players side. This is valid even when the player controlled person is dead (a difference from side player).</Description>
    <Command>playerSide</Command>
    <Syntax>playerSide</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>side</Name>
        <Type>Side</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return count of players playing on given side. Works only in multiplayer, in singleplayer always returns 0.</Description>
    <Command>playersNumber</Command>
    <Syntax>playersNumber side</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[campaign, mission] or [campaign, mission, skipBriefing]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= playMission ["XOutrage","x05Negotiator.Noe"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>The mission is launched (from the main menu). Both campaign and mission are given as their directory name. If the campaign is empty, a single mission is launched. If skipBriefing is true, the intro and briefing are skipped.</Description>
    <Command>playMission</Command>
    <Syntax>playMission [campaign, mission] or [campaign, mission, skipBriefing]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>moveName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne playMove "Stand"</Text>
      </ExampleInfo>
    </Examples>
    <Description>When used on person, smooth transition to given move will be done.</Description>
    <Command>playMove</Command>
    <Syntax>soldier playMove moveName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>playMusic</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (playSound "soundname")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Play sound defined in Description.ext.</Description>
    <Command>playSound</Command>
    <Syntax>playSound name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= pPos = position player</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>position</Command>
    <Syntax>position object</Syntax>
    <ReturnValue>Array in format Position</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[x, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Convert screen coordinates in map to world coordinates.</Description>
    <Command>posScreenToWorld</Command>
    <Syntax>map posScreenToWorld [x,y]</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_worldPos = positionCameraToWorld _cameraPos)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Transform position from camera coordinate space to world coordinate space.</Description>
    <Command>positionCameraToWorld</Command>
    <Syntax>positionCameraToWorld position</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>map</Name>
        <Type>Control</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Convert world coordinates to screen coordinates in map.</Description>
    <Command>posWorldToScreen</Command>
    <Syntax>map posWorldToScreen position</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>entity</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return the precision of the given entity.</Description>
    <Command>precision</Command>
    <Syntax>precision entity</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= spawn {waitUntil preloadCamera markerPos "cam_location_2"}</Text>
      </ExampleInfo>
    </Examples>
    <Description>Preload all textures and models around given position (format Position) to avoid visual artifacts after camera is moved. Should be used before any abrupt camera change / cut. Returns true once all data are ready.</Description>
    <Command>preloadCamera</Command>
    <Syntax>preloadCamera position</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>distance</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>object</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>preloadObject</Command>
    <Syntax>distance preloadObject object</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>sound</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>preloadSound</Command>
    <Syntax>preloadSound sound</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= preloadTitleObj ["BISLogo","plain"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Object title - argument uses format ["text","type",speed] or ["name","type"]. Speed is ignored. Preload data the object can be defined in the Description.ext file.</Description>
    <Command>preloadTitleObj</Command>
    <Syntax>preloadTitleObj effect</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (preloadTitleRsc ["BIS", "PLAIN"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>preloadTitleRsc</Command>
    <Syntax>preloadTitleRsc effect</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (preprocessFile "myFunction.sqf")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns preprocessed content of given file. Preprocessor is C-like, supports comments using // or /* and */ and macros defined with #define.</Description>
    <Command>preprocessFile</Command>
    <Syntax>preprocessFile filename</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the preprocessed content of the given file. The preprocessor is C-like, it supports comments using // or /* and */ and macros defined with #define.</Description>
    <Command>preprocessFileLineNumbers</Command>
    <Syntax>preprocessFileLineNumbers filename</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= pWeap = primaryWeapon player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns name of vehicles primary weapon (empty string if none).</Description>
    <Command>primaryWeapon</Command>
    <Syntax>primaryWeapon vehicle</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>private</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Process statements stored using setVehicleInit. The statements will only be executed once even if processInitCommands is called multiple times.</Description>
    <Command>processInitCommands</Command>
    <Syntax>processInitCommands</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>varName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= publicVariable "CTFscoreOne"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>publicVariable</Command>
    <Syntax>publicVariable varName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Transfer weapons and magazines from weapon pool into cargo of object obj. Used in campaign to transfer weapons into next mission.</Description>
    <Command>putWeaponPool</Command>
    <Syntax>putWeaponPool obj</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return number of magazines of type name in magazine pool (used in campaign to transfer magazines into next mission).</Description>
    <Command>queryMagazinePool</Command>
    <Syntax>queryMagazinePool name</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return number of weapons of type name in weapon pool (used in campaign to transfer weapons into next mission).</Description>
    <Command>queryWeaponPool</Command>
    <Syntax>queryWeaponPool name</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Convert x from degrees to radians. 360 degrees is equal to 2 multiplied with pi.</Description>
    <Command>rad</Command>
    <Syntax>rad x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Checks the current radio volume (set by fadeRadio).</Description>
    <Command>radioVolume</Command>
    <Syntax>radioVolume</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return the current rain.</Description>
    <Command>rain</Command>
    <Syntax>rain</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_rNumber = random 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Random real value from 0 (inclusive) to x (not inclusive).</Description>
    <Command>random</Command>
    <Syntax>random x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return the rank of the given unit.</Description>
    <Command>rank</Command>
    <Syntax>rank unit</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= _score = rating player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check unit rating. Rating is increased for killing enemies, decreased for killing friendlies, can be changed by mission designer.</Description>
    <Command>rating</Command>
    <Syntax>rating unit</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Reload all weapons</Description>
    <Command>reload</Command>
    <Syntax>reload vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check whether magazine is reloaded whenever emptied.</Description>
    <Command>reloadEnabled</Command>
    <Syntax>reloadEnabled vehicle</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>index</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player removeAction 0</Text>
      </ExampleInfo>
    </Examples>
    <Description>Remove action with given id index.</Description>
    <Command>removeAction</Command>
    <Syntax>unit removeAction index</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>handlerType</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player removeAllEventHandlers "killed")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Removes all event handlers of given type that were added by addEventHandler.</Description>
    <Command>removeAllEventHandlers</Command>
    <Syntax>object removeAllEventHandlers handlerType</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= removeAllWeapons player</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>removeAllWeapons</Command>
    <Syntax>removeAllWeapons unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>handler</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player removeEventHandler ["killed", 0]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>removeEventHandler</Command>
    <Syntax>object removeEventHandler handler</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>magazineName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player removeMagazine "M16"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>removeMagazine</Command>
    <Syntax>unit removeMagazine magazineName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>magazineName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player removeMagazines "M16"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>removeMagazines</Command>
    <Syntax>unit removeMagazines magazineName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Remove a unit from the list of units available for Team Switch.</Description>
    <Command>removeSwitchableUnit</Command>
    <Syntax>removeSwitchableUnit person</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weaponName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player removeWeapon "M16"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>removeWeapon</Command>
    <Syntax>unit removeWeapon weaponName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>version</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (requiredVersion "1.30")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>requiredVersion</Command>
    <Syntax>requiredVersion version</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>resistance</Command>
    <Syntax>resistance</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>count</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= arrayOne resize 2</Text>
      </ExampleInfo>
    </Examples>
    <Description>Change array size. Can be used to add or remove elements from an array.</Description>
    <Command>resize</Command>
    <Syntax>array resize count</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[delay = -1, count = 0]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (car respawnVehicle [5.0, 3])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>respawnVehicle</Command>
    <Syntax>vehicle respawnVehicle [delay = -1, count = 0]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group  which receives revealing information</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object  which is revealed</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne reveal soldierTwo (soldierOne received information about soldierTwo)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>reveal</Command>
    <Syntax>group reveal unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Rounds up or down to the closest integer of x.</Description>
    <Command>round</Command>
    <Syntax>round x</Syntax>
    <ReturnValue>Integer</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Launch init.sqs script.</Description>
    <Command>runInitScript</Command>
    <Syntax>runInitScript</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Autosave game (used for Retry).</Description>
    <Command>saveGame</Command>
    <Syntax>saveGame</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player saveIdentity "playerid"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Saves persons identity to Objects.sav file in campaign directory as entry name.</Description>
    <Command>saveIdentity</Command>
    <Syntax>person saveIdentity name</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player saveStatus "playerstate"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Saves objects properties to Objects.sav file in campaign directory as entry name.</Description>
    <Command>saveStatus</Command>
    <Syntax>object saveStatus name</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>varname</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (saveVar "varOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Save variable value into the campaign space. This variable is available to all following missions in the campaign.</Description>
    <Command>saveVar</Command>
    <Syntax>saveVar varname</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>speechName</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (units_unit</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>say</Command>
    <Syntax>unit say speechName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Defines name of current scope. Name is visible in debugger, and name is also used as reference in some commands. Scope name can be defined only once per scope.</Description>
    <Command>scopeName</Command>
    <Syntax>scopeName name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= pScore = score player</Text>
      </ExampleInfo>
    </Examples>
    <Description>MP: Returns the units score.</Description>
    <Command>score</Command>
    <Syntax>score unit</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>script</Name>
        <Type>Script</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check if given script already finished.</Description>
    <Command>scriptDone</Command>
    <Syntax>scriptDone script</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>scudname</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (? scudState scudOne &gt;= 3 : hint "RUN!!!!")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>scudState</Command>
    <Syntax>scudState scudname</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= sWeap = secondaryWeapon player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns name of vehicles secondary weapon (empty string if none).</Description>
    <Command>secondaryWeapon</Command>
    <Syntax>secondaryWeapon vehicle</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>index</Name>
        <Type>Number or Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= [1,2,3,4] select 2 - result is 3</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x3= position player select 2 - result is Z coordinate of player position (see Position for more details)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>select</Command>
    <Syntax>array select index</Syntax>
    <ReturnValue>Any Value</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>selection name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Search for selection in the object model (first in the memory level, then in other levels). Returns position in model space.</Description>
    <Command>selectionPosition</Command>
    <Syntax>object selectionPosition selection name</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= group player selectLeader player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Select group leader.</Description>
    <Command>selectLeader</Command>
    <Syntax>group selectLeader unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (selectPlayer aP)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Switch player to given unit.</Description>
    <Command>selectPlayer</Command>
    <Syntax>selectPlayer unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weapon</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 selectWeapon "LAWLauncher")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Select given weapon. For weapon values see :Category:Weapons</Description>
    <Command>selectWeapon</Command>
    <Syntax>unit selectWeapon weapon</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>command</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (vehicle player sendSimpleCommand "STOP")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sends a simple command to the vehicles driver / gunner.</Description>
    <Command>sendSimpleCommand</Command>
    <Syntax>object sendSimpleCommand command</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>element</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (arrayOne set [0, "Hello"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Format of element is [index, value]. Changes an element of given array. If element does not exist, resize index+1 is called to create it.</Description>
    <Command>set</Command>
    <Syntax>array set element</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>accFactor</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (setAccTime 0.1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set time acceleration coefficient. May be also used to slow time in cutscenes. This command does NOT work in multiplayer.</Description>
    <Command>setAccTime</Command>
    <Syntax>setAccTime accFactor</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>amount</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set amount or ammo resources in cargo space of rearm vehicle. Ammo resource is used to resupply vehicles that take ammo. Soldiers use individual magazines instead. Amount: 1 is full cargo.</Description>
    <Command>setAmmoCargo</Command>
    <Syntax>vehicle setAmmoCargo amount</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>set</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Sets custom camera aperture (-1 to do it automatically).</Description>
    <Command>setAperture</Command>
    <Syntax>setAperture set</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[name1, value1, name2, value2, ...]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (txt = img setAttributes ["image", "data\iSoldier.paa"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns a structured text created by the given Structured Text</Description>
    <Command>setAttributes</Command>
    <Syntax>text setAttributes [name1, value1, name2, value2, ...]</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>behaviour</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (group1 setBehaviour "safe")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setBehaviour</Command>
    <Syntax>group setBehaviour behaviour</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[name, position]</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array (format Waypoint)</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[name, position]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setCameraEffect ["ZoomIn", "FRONT"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setCameraEffect</Command>
    <Syntax>trigger setCameraEffect [name, position]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>entity</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>interest</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_soldier setCameraInterest 50)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set camera interest for given entity.</Description>
    <Command>setCameraInterest</Command>
    <Syntax>entity setCameraInterest interest</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>captive</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldier1 setCaptive true</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setCaptive</Command>
    <Syntax>person setCaptive captive</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (group1 setCombatMode "BLUE")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setCombatMode</Command>
    <Syntax>group setCombatMode mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>damage</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 setDamage 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Damage / repair object. Damages or repairs the object. Damage 0 means fully functional, damage 1 means completely destroyed / dead.</Description>
    <Command>setDamage</Command>
    <Syntax>object setDamage damage</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>damage</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 setDammage 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Damage / repair object. Damages or repairs the object. Damage 0 means fully functional, damage 1 means completely destroyed / dead.</Description>
    <Command>setDammage</Command>
    <Syntax>object setDammage damage</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[year, month, day, hour, minute]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (setDate [1986, 2, 25, 16, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the actual mission date and time.</Description>
    <Command>setDate</Command>
    <Syntax>setDate [year, month, day, hour, minute]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[position, planningMode, forceReplan]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set the destination for path planning of the pilot.</Description>
    <Command>setDestination</Command>
    <Syntax>object setDestination [position, planningMode, forceReplan]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>heading</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Sets object heading. Angles are measured in degrees clockwise from north. The accepted heading range is from 0 to 360 Negative angles represent a counter-clockwise angle and the angle can be of any size.</Description>
    <Command>setDir</Command>
    <Syntax>object setDir heading</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>particleSource</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>interval</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_source setDropInterval 0.05)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set interval of emitting particles from particle source.</Description>
    <Command>setDropInterval</Command>
    <Syntax>particleSource setDropInterval interval</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>statement</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array (format Waypoint</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>statement</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setEffectCondition "thisList")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setEffectCondition</Command>
    <Syntax>trigger setEffectCondition statement</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>face</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 setFace "face10")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set persons face.</Description>
    <Command>setFace</Command>
    <Syntax>person setFace face</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>blink</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 setFaceAnimation 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set facial animation phase (eye blinking), blink is in the range from 0 to 1.</Description>
    <Command>setFaceAnimation</Command>
    <Syntax>person setFaceAnimation blink</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>flag</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>owner</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (flag1 setFlagOwner soldier1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set flag owner. When owner is set to objNull or any object other than a unit of class Models_%26_Classnames:_CfgVehicles_-_Class_Man</Description>
    <Command>setFlagOwner</Command>
    <Syntax>flag setFlagOwner owner</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>flag</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>side</Name>
        <Type>Side</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (flag1 setFlagSide east)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set flag side.</Description>
    <Command>setFlagSide</Command>
    <Syntax>flag setFlagSide side</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>flag</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>texture</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (flagE setFlagTexture "\ca\misc\data\sever_vlajka.paa")</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= (flagW setFlagTexture "\ca\misc\data\usa_vlajka.paa")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setFlagTexture</Command>
    <Syntax>flag setFlagTexture texture</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>fog</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (15 setFog 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Changes the fog smoothly during the given time (in seconds). A time of zero means there will be an immediate change. A fog level of zero is minimum fog and a fog level of one is maximum fog.</Description>
    <Command>setFog</Command>
    <Syntax>time setFog fog</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>formation</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (groupOne setFormation "LINE")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setFormation</Command>
    <Syntax>group setFormation formation</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>task</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set the current task of the formation member.</Description>
    <Command>setFormationTask</Command>
    <Syntax>object setFormationTask task</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>heading</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (group1 setFormDir 180)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set group formation heading. Accepted heading range is 0 to 360. Formation is facing this direction unless enemy is seen. When group is moving, this value is overriden by movement direction.</Description>
    <Command>setFormDir</Command>
    <Syntax>group setFormDir heading</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>side1</Name>
        <Type>Side</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[side2, value]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Sets how friendly side1 is with side2. For a value smaller than 0.6 it results in being enemy, otherwise its friendly.</Description>
    <Command>setFriend</Command>
    <Syntax>side1 setFriend [side2, value]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>amount</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (jeepOne setFuel 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set fuel amount. Fuel 1 is full gas tank, 0 is empty.</Description>
    <Command>setFuel</Command>
    <Syntax>vehicle setFuel amount</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>amount</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (refuelTruckOne setFuelCargo 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set fuel amount in cargo space of refuel vehicle. Fuel 1 is full gas tank, 0 is empty.</Description>
    <Command>setFuelCargo</Command>
    <Syntax>vehicle setFuelCargo amount</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[nameFomat, nameParam1, ...]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (group1 setGroupId ["Delta","GroupColor4"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setGroupId</Command>
    <Syntax>group setGroupId [nameFomat, nameParam1, ...]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[objectWhereHide, hidePosition]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>It sets the data for hiding. objectWhereHide can be taken using findCover. hidePosition can be taken using getHideFrom.</Description>
    <Command>setHideBehind</Command>
    <Syntax>object setHideBehind [objectWhereHide, hidePosition]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>identity</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 setIdentity "John_Doe")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setIdentity</Command>
    <Syntax>person setIdentity identity</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>light</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[r, g, b]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set ambient color of light.</Description>
    <Command>setLightAmbient</Command>
    <Syntax>light setLightAmbient [r, g, b]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>light</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>brightness</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set brightness of light.</Description>
    <Command>setLightBrightness</Command>
    <Syntax>light setLightBrightness brightness</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>light</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[r, g, b]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set diffuse color of light.</Description>
    <Command>setLightColor</Command>
    <Syntax>light setLightColor [r, g, b]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>brush</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Marker1" setMarkerBrush "DiagGrid")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE"). Brush is the name of the subclass in CfgMarkerBrushes.</Description>
    <Command>setMarkerBrush</Command>
    <Syntax>name setMarkerBrush brush</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>brush</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Marker1" setMarkerBrushLocal "DiagGrid")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Selects the fill texture for the marker ("RECTANGLE" or "ELLIPSE"). Brush is the name of the subclass in CfgMarkerBrushes.</Description>
    <Command>setMarkerBrushLocal</Command>
    <Syntax>name setMarkerBrushLocal brush</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("MarkerOne" setMarkerColor "ColorBlack")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerColor</Command>
    <Syntax>marker setMarkerColor color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>color</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("MarkerOne" setMarkerColorLocal "ColorBlack")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerColorLocal</Command>
    <Syntax>marker setMarkerColorLocal color</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>angle</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Marker1" setMarkerDir 90)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the orientation of the marker. Angle is in degrees.</Description>
    <Command>setMarkerDir</Command>
    <Syntax>name setMarkerDir angle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>angle</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Marker1" setMarkerDirLocal 90)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the orientation of the marker. Angle is in degrees.</Description>
    <Command>setMarkerDirLocal</Command>
    <Syntax>name setMarkerDirLocal angle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= "MarkerOne" setMarkerPos getMarkerPos "MarkerTwo"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Moves the marker. Pos format is Position2D.</Description>
    <Command>setMarkerPos</Command>
    <Syntax>markerName setMarkerPos pos</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= "MarkerOne" setMarkerPos getMarkerPos "MarkerTwo"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Moves the marker. Pos format is Position2D.</Description>
    <Command>setMarkerPosLocal</Command>
    <Syntax>markerName setMarkerPosLocal pos</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>handle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>shape</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (markerobj setMarkerShape "RECTANGLE")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerShape</Command>
    <Syntax>handle setMarkerShape shape</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>handle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>shape</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (markerobj setMarkerShapeLocal "RECTANGLE")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerShapeLocal</Command>
    <Syntax>handle setMarkerShapeLocal shape</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>size</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("MarkerOne" setMarkerSize [100, 200])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerSize</Command>
    <Syntax>marker setMarkerSize size</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>marker</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>size</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("MarkerOne" setMarkerSizeLocal [100, 200])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerSizeLocal</Command>
    <Syntax>marker setMarkerSizeLocal size</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Marker1" setMarkerText "You are here.")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the text label of an existing marker.</Description>
    <Command>setMarkerText</Command>
    <Syntax>name setMarkerText text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("Marker1" setMarkerTextLocal "You are here.")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the text label of an existing marker.</Description>
    <Command>setMarkerTextLocal</Command>
    <Syntax>name setMarkerTextLocal text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>markertype</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("MarkerOne" setMarkerType "Warning")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerType</Command>
    <Syntax>markerName setMarkerType markertype</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>markerName</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>markertype</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ("MarkerOne" setMarkerTypeLocal "Warning")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMarkerTypeLocal</Command>
    <Syntax>markerName setMarkerTypeLocal markertype</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mimic</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier1 setmimic "angry")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMimic</Command>
    <Syntax>person setMimic mimic</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[x, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (setMousePosition [0.5, 0.5])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMousePosition</Command>
    <Syntax>setMousePosition [x, y]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>track</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array (format Waypoint</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>track</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setMusicEffect "Track1")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setMusicEffect</Command>
    <Syntax>trigger setMusicEffect track</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>texture</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>setObjectTexture</Command>
    <Syntax>object setObjectTexture texture</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>overcast</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (50 setOvercast 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setOvercast</Command>
    <Syntax>time setOvercast overcast</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>particleSource</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[radius, velocity]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Update particle source to create particles on circle with given radius. Velocity is transformed and added to total velocity.</Description>
    <Command>setParticleCircle</Command>
    <Syntax>particleSource setParticleCircle [radius, velocity]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>particleSource</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>array</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set parameters to particle source. Array is in format ParticleArray.</Description>
    <Command>setParticleParams</Command>
    <Syntax>particleSource setParticleParams array</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>particleSource</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set randomization of particle source parameters.</Description>
    <Command>setParticleRandom</Command>
    <Syntax>particleSource setParticleRandom [lifeTime, position, moveVelocity, rotationVelocity, size, color, randomDirectionPeriod, randomDirectionIntensity]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (setPlayable aP)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Create MP role for the unit. The roles created this way are used for Join In Progress and Team Switch.</Description>
    <Command>setPlayable</Command>
    <Syntax>setPlayable unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>setPos</Command>
    <Syntax>obj setPos pos</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player setPosASL [ getPosASL player select 0, getPosASL player select 1 + 10, getPosASL select 2]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the object position. The pos array uses the PositionASL format.</Description>
    <Command>setPosASL</Command>
    <Syntax>obj setPosASL pos</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>index</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (1 setRadioMsg "Alpha Radio")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set radio message (0, 0, map radio) to given text. Use "NULL" to disable radio slot.</Description>
    <Command>setRadioMsg</Command>
    <Syntax>index setRadioMsg text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>time</Name>
        <Type>Number</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>rainDensity</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (60 setRain 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set rain density smoothly during the given time (in seconds). A time of zero means an immediate change. A rain level of zero is no rain and a rain level of one is maximum rain Rain is not possible when overcast is smaller than 0.7.</Description>
    <Command>setRain</Command>
    <Syntax>time setRain rainDensity</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>rank</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setRank "COLONEL")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setRank</Command>
    <Syntax>unit setRank rank</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>amount</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (repairTruck1 setRepairCargo 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setRepairCargo</Command>
    <Syntax>vehicle setRepairCargo amount</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>skill</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (hero setskill 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets ability level of person (commander unit). Value of skill may vary from 0 to 1.</Description>
    <Command>setSkill</Command>
    <Syntax>vehicle setSkill skill</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>skill</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (hero setskill ["Endurance",0.7])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setSkill array</Command>
    <Syntax>vehicle setSkill skill</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[sound, voice, soundEnv, soundDet]</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array (format Waypoint</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[sound, voice, soundEnv, soundDet]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setSoundEffect ["Alarm", "", "", ""])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setSoundEffect</Command>
    <Syntax>trigger setSoundEffect [sound, voice, soundEnv, soundDet]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>group</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (groupOne setSpeedMode "LIMITED")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setSpeedMode</Command>
    <Syntax>group setSpeedMode mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>age</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setTargetAge "10 MIN")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setTargetAge</Command>
    <Syntax>object setTargetAge age</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>grid</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (setTerrainGrid 12.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setTerrainGrid</Command>
    <Syntax>setTerrainGrid grid</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger or waypoint</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>String</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setTitleEffect ["TEXT", "PLAIN DOWN", "Hello world."])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setTitleEffect</Command>
    <Syntax>trigger or waypoint setTitleEffect [type, effect, text]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[by, type, repeating]</Name>
        <Type>Array (String,String,Boolean)</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setTriggerActivation ["WEST", "EAST D", true])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setTriggerActivation</Command>
    <Syntax>trigger setTriggerActivation [by, type, repeating]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[a, b, angle, rectangle]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= trigger setTriggerArea [100, 50, 45, false ]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Defines the area controlled by the trigger. The area is rectangular or elliptic, the width is 2 * a, the height is 2 * b. It is rotated angle degrees.</Description>
    <Command>setTriggerArea</Command>
    <Syntax>trigger setTriggerArea [a, b, angle, rectangle]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[cond, activ, desactiv]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= trigger setTriggerStatements ["this", "ok = true", "ok = false"]</Text>
      </ExampleInfo>
    </Examples>
    <Description>The first argument can modify the condition of when the trigger is activated. The result of the activation defined by trigger activation is in variable this. Variable thisList contains all vehicles which caused the activation. Activ and desactiv expressions are launched upon trigger activation / deactivation.</Description>
    <Command>setTriggerStatements</Command>
    <Syntax>trigger setTriggerStatements [cond, activ, desactiv]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setTriggerText "Call for support")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the text label attached to the trigger object. This is used for example as a radio slot label for radio activated triggers.</Description>
    <Command>setTriggerText</Command>
    <Syntax>trigger setTriggerText text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[min, mid, max, interruptable]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= trigger setTriggerTimeout [5, 10, 7, false ]</Text>
      </ExampleInfo>
    </Examples>
    <Description>Defines the time between condition satisfaction and trigger activation (randomly from min to max, with an average value mid). If the last argument is true, the condition must be fullfilled all the time.</Description>
    <Command>setTriggerTimeout</Command>
    <Syntax>trigger setTriggerTimeout [min, mid, max, interruptable]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>action</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger setTriggerType "END1")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setTriggerType</Command>
    <Syntax>trigger setTriggerType action</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>skill</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setUnitAbility 1.0)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setUnitAbility</Command>
    <Syntax>unit setUnitAbility skill</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (loon1 setUnitPos "UP")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setUnitPos</Command>
    <Syntax>unit setUnitPos mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>rank</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setUnitRank "COLONEL")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setUnitRank</Command>
    <Syntax>unit setUnitRank rank</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[name, value]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= myTruck setVariable ["myVariable",123];</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setVariable</Command>
    <Syntax>object setVariable [name, value]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[x, z, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set objects direction vector. Up vector will remain unchanged.</Description>
    <Command>setVectorDir</Command>
    <Syntax>object setVectorDir [x, z, y]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[x, z, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Set objects up vector. Direction vector will remain unchanged.</Description>
    <Command>setVectorUp</Command>
    <Syntax>object setVectorUp [x, z, y]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>value</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setVehicleAmmo 0)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setVehicleAmmo</Command>
    <Syntax>object setVehicleAmmo value</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>value</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setVehicleArmor 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the armor (or health for men) state of the vehicle (a value from 0 to 1).</Description>
    <Command>setVehicleArmor</Command>
    <Syntax>object setVehicleArmor value</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>id</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setVehicleId 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets id (integer value) to vehicle. By this id vehicle is referenced by triggers and waypoints.</Description>
    <Command>setVehicleId</Command>
    <Syntax>object setVehicleId id</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>statement</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldier3 setVehicleInit "this allowfleeing 0")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Attach a statement to a vehicle. The statement is propagated over the network in MP games, it can be executed by invoking processInitCommands.</Description>
    <Command>setVehicleInit</Command>
    <Syntax>vehicle setVehicleInit statement</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>state</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (veh1 setVehicleLock "LOCKED")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setVehicleLock</Command>
    <Syntax>vehicle setVehicleLock state</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[position, markers, placement]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= player setVehiclePosition 0, 0, 0], ["Marker1"], 0]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setVehiclePosition</Command>
    <Syntax>object setVehiclePosition [position, markers, placement]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>name</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (player setVehicleVarName "aP")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the name of the variable which contains a reference to this object. It is necessary in MP to change the variable content after a respawn.</Description>
    <Command>setVehicleVarName</Command>
    <Syntax>object setVehicleVarName name</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[x, z, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= truck1 setVelocity [20, 0, 0]</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= Advanced method used for relative acceleration:_vel = velocity _vehicle;&lt;br /&gt;_dir = direction _vehicle;&lt;br /&gt;_speed = 10; comment "Added speed";&lt;br /&gt;_vehicle setVelocity [(_vel select 0)+(sin _dir*_speed),(_vel select 1)+(cos _dir*_speed),(_vel select 2)];</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set velocity (speed vector) of vehicle.</Description>
    <Command>setVelocity</Command>
    <Syntax>vehicle setVelocity [x, z, y]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>distance</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (setViewDistance 2250)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set rendering distance, in metres. Default is 900m, accepted range is 500m to 5000m.</Description>
    <Command>setViewDistance</Command>
    <Syntax>setViewDistance distance</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointBehaviour "AWARE")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setWaypointBehaviour</Command>
    <Syntax>waypoint setWaypointBehaviour mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointCombatMode "RED")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setWaypointCombatMode</Command>
    <Syntax>waypoint setWaypointCombatMode mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointDescription "Move here.")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sets the description shown in the HUD while the waypoint is active.</Description>
    <Command>setWaypointDescription</Command>
    <Syntax>waypoint setWaypointDescription text</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>formation</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointFormation "LINE")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setWaypointFormation</Command>
    <Syntax>waypoint setWaypointFormation formation</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>pos</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointHousePosition 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>For waypoints attached to a house, this defines the target house position.</Description>
    <Command>setWaypointHousePosition</Command>
    <Syntax>waypoint setWaypointHousePosition pos</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[center, radius</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointPosition [position player, 0])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Moves the waypoint to a random position in a circle with the given center and radius.</Description>
    <Command>setWaypointPosition</Command>
    <Syntax>waypoint setWaypointPosition [center, radius]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>command</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointScript "find.sqs player")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Attaches a script to a scripted waypoint. Command consist of a script name and additional script arguments.</Description>
    <Command>setWaypointScript</Command>
    <Syntax>waypoint setWaypointScript command</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointSpeed "FULL")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setWaypointSpeed</Command>
    <Syntax>waypoint setWaypointSpeed mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[condition, statement]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointStatements ["true", ""])</Text>
      </ExampleInfo>
    </Examples>
    <Description>The waypoint is done only when the condition is fulfilled. When the waypoint is done, the statement expression is executed.</Description>
    <Command>setWaypointStatements</Command>
    <Syntax>waypoint setWaypointStatements [condition, statement]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[min, mid, max]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointTimeout [5, 10, 6])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Defines the time between condition satisfaction and waypoint finish (randomly from min to max, with an average value mid).</Description>
    <Command>setWaypointTimeout</Command>
    <Syntax>waypoint setWaypointTimeout [min, mid, max]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>type</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] setWaypointType "HOLD")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setWaypointType</Command>
    <Syntax>waypoint setWaypointType type</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>position</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= [groupOne, 1] setWPPos markerPos "MarkerOne"</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>setWPPos</Command>
    <Syntax>waypoint setWPPos position</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showCinemaBorder true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Force drawing of cinema borders. This is normally used in cutscenes to indicate player has no control.</Description>
    <Command>showCinemaBorder</Command>
    <Syntax>showCinemaBorder show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showCompass false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable compass (default true)</Description>
    <Command>showCompass</Command>
    <Syntax>showCompass show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showGPS true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable GPS receiver (default false)</Description>
    <Command>showGPS</Command>
    <Syntax>showGPS show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showMap false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable Map (default true)</Description>
    <Command>showMap</Command>
    <Syntax>showMap show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= ? showncompass : hint "You have a compass.")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if player has compass enabled.</Description>
    <Command>shownCompass</Command>
    <Syntax>shownCompass</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= ? shownGPS : hint "You have a GPS reciever."</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if player has GPS reciever enabled.</Description>
    <Command>shownGPS</Command>
    <Syntax>shownGPS</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= ? shownMap : hint "You have a Map."</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if player has Map enabled.</Description>
    <Command>shownMap</Command>
    <Syntax>shownMap</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= ? shownPad : hint "You have a Notebook."</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if player has Notebook enabled.</Description>
    <Command>shownPad</Command>
    <Syntax>shownPad</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= ? shownRadio : hint "You have a Radio."</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if player has Radio enabled.</Description>
    <Command>shownRadio</Command>
    <Syntax>shownRadio</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Check if player has ID card enabled. Obsolete command.</Description>
    <Command>shownWarrant</Command>
    <Syntax>shownWarrant</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= ? shownWatch : hint "You have a Watch."</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if player has Watch enabled.</Description>
    <Command>shownWatch</Command>
    <Syntax>shownWatch</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showPad false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable Notebook (default true)</Description>
    <Command>showPad</Command>
    <Syntax>showPad show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showRadio false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable Radio (default true)</Description>
    <Command>showRadio</Command>
    <Syntax>showRadio shown</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Enable ID card (default false). Obsolete command.</Description>
    <Command>showWarrant</Command>
    <Syntax>showWarrant show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>show</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= showWatch false</Text>
      </ExampleInfo>
    </Examples>
    <Description>Enable Watch (default true)</Description>
    <Command>showWatch</Command>
    <Syntax>showWatch show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>show</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] showWaypoint "ALWAYS")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>showWaypoint</Command>
    <Syntax>waypoint showWaypoint show</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? (side player == west) : hint "You are on the West side."</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>side</Command>
    <Syntax>side unit</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>chatText</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne sideChat "Show this text")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Types text to the side radio channel. Note: This function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on all of them.</Description>
    <Command>sideChat</Command>
    <Syntax>unit sideChat chatText</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>The Enemy side (used for renegades).</Description>
    <Command>sideEnemy</Command>
    <Syntax>sideEnemy</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>The Friendly side (used for captives).</Description>
    <Command>sideFriendly</Command>
    <Syntax>sideFriendly</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>The Logic side.</Description>
    <Command>sideLogic</Command>
    <Syntax>sideLogic</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>radioName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne sideRadio "messageOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Send the message to the side radio channel. Message is defined in Description.ext file.</Description>
    <Command>sideRadio</Command>
    <Syntax>unit sideRadio radioName</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_sine = sin 30 ...... Result is 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Sine of x, argument in degrees.</Description>
    <Command>sin</Command>
    <Syntax>sin x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_sk = skill loon1 .)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns current level of ability of person, in range between 0 and 1. Skill 1 is highest skill.</Description>
    <Command>skill</Command>
    <Syntax>skill person</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>duration</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= skipTime 5</Text>
      </ExampleInfo>
    </Examples>
    <Description>Skip time in duration of hours. Daytime is adjusted, weather change is estimated, no changes in any units are made. The tide is also adjusted.</Description>
    <Command>skipTime</Command>
    <Syntax>skipTime duration</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>delay</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (sleep 0.5)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Suspend execution of Function or SQF_syntax</Description>
    <Command>sleep</Command>
    <Syntax>sleep delay</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_slidepos1 = sliderPosition 105)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return current thumb position of slider idc of topmost user dialog.</Description>
    <Command>sliderPosition</Command>
    <Syntax>sliderPosition idc</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_slidelimits1 = sliderRange 105)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return limits, as an Array [min, max] of slider idc of topmost user dialog.</Description>
    <Command>sliderRange</Command>
    <Syntax>sliderRange idc</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, pos]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (sliderSetPosition [101, 50])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set current thumb position of slider idc of topmost user dialog.</Description>
    <Command>sliderSetPosition</Command>
    <Syntax>sliderSetPosition [idc,pos]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, min, max]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (sliderSetRange [101, 0, 100])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set limits of slider idc of topmost user dialog.</Description>
    <Command>sliderSetRange</Command>
    <Syntax>sliderSetRange [idc,min,max]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[idc, line, page]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (sliderSetspeed [101, 0.5, 2])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Set speed of slider with id idc of topmost user dialog. Click to arrow = move by line Click to scale outside thumb = move by page.</Description>
    <Command>sliderSetSpeed</Command>
    <Syntax>sliderSetSpeed [idc,line,page]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>idc</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_slidespeed1 = sliderspeed 105)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return speed, as an Array [min, max] of slider idc of topmost user dialog.</Description>
    <Command>sliderSpeed</Command>
    <Syntax>sliderSpeed idc</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? not (someAmmo loon1) : hint "Loon1 is out of ammo!"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if unit has some ammo.</Description>
    <Command>someAmmo</Command>
    <Syntax>someAmmo unit</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (_vol = soundVolume)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check current sound volume (set by fadeSound).</Description>
    <Command>soundVolume</Command>
    <Syntax>soundVolume</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo />
    </Parameters>
    <Examples />
    <Description>Starts running a new script. The new script is running in parallel, spawn does not wait for it to be done. To check if it finished use scriptDone</Description>
    <Command>spawn</Command>
    <Syntax>spawn code</Syntax>
    <ReturnValue>Script</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>arguments</Name>
        <Type>Anything</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>code</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>spawn args</Command>
    <Syntax>arguments spawn code</Syntax>
    <ReturnValue>Script</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? (speed truck1) &gt;= 100 : hint "Youre going too fast!"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Object speed (in km/h).</Description>
    <Command>speed</Command>
    <Syntax>speed obj</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>grp</Name>
        <Type>Object or Group</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_grpspeed1 = speedMode grp1)</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>speedMode</Command>
    <Syntax>speedMode grp</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_sq = sqrt 9 ...... Result is 3)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns square root of x.</Description>
    <Command>sqrt</Command>
    <Syntax>sqrt x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>for /.../</Name>
        <Type>For Type</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>step</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (for "_x" from 20 to 10 step -2 do {..code..})</Text>
      </ExampleInfo>
    </Examples>
    <Description>Optionally can set step. If you want to count down, step must be specified, and set negative. Default value is 1.</Description>
    <Command>step</Command>
    <Syntax>for /.../ step step</Syntax>
    <ReturnValue>For Type</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>stop</Name>
        <Type>Boolean</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= loon1 stop true</Text>
      </ExampleInfo>
    </Examples>
    <Description>Stop AI unit. Stopped unit will not be able to move and fire. Use disableAI to choose which part of AI you want to stop</Description>
    <Command>stop</Command>
    <Syntax>unit stop stop</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? (stopped loon1) : hint "Loon1 is stopped"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if unit is stopped by stop command.</Description>
    <Command>stopped</Command>
    <Syntax>stopped unit</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>any value</Name>
        <Type>Anything</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (str(2+3) , result is "5")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Converts any variable to a string.</Description>
    <Command>str</Command>
    <Syntax>str any value</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>mask</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (supportInfo "b:select*" .... result is ["b:ARRAY select SCALAR","b:ARRAY select BOOL"])</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>supportInfo</Command>
    <Syntax>supportInfo mask</Syntax>
    <ReturnValue>Array Compatibility Version 2.00 required.</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[x, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns whether water is at given position.</Description>
    <Command>surfaceIsWater</Command>
    <Syntax>surfaceIsWater [x, y]</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>[x, y]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns what surface is at the given position.</Description>
    <Command>surfaceType</Command>
    <Syntax>surfaceType [x, y]</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>exp</Name>
        <Type>Switch Type</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= switch (_a) do {case 1: {block}; case 2 : {block}; default {block};}</Text>
      </ExampleInfo>
    </Examples>
    <Description>See switch do</Description>
    <Command>switch</Command>
    <Syntax>switch exp</Syntax>
    <ReturnValue>Anything</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Return a list of units accessible through Team Switch.</Description>
    <Command>switchableUnits</Command>
    <Syntax>switchableUnits</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (loon1 switchCamera "External" )</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>switchCamera</Command>
    <Syntax>unit switchCamera mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>lamppost</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>mode</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>switchLight</Command>
    <Syntax>lamppost switchLight mode</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>soldier</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>movename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (loon1 switchMove "FXStandDip" )</Text>
      </ExampleInfo>
    </Examples>
    <Description>When used on a person, the given move is started immediately (there is no transition). Use switchmove "" to switch back to the default movement if there is no transition back, otherwise the person may be stuck.</Description>
    <Command>switchMove</Command>
    <Syntax>soldier switchmove movename</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[waypoint1, waypoint2, ...]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([group1, 2] synchronizeWaypoint [ [group2, 3] ])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Synchronizes the waypoint with other waypoints. Each waypoint is given as an array [group, index].</Description>
    <Command>synchronizeWaypoint</Command>
    <Syntax>waypoint synchronizeWaypoint [waypoint1, waypoint2, ...]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Tangent of x, argument in degrees.</Description>
    <Command>tan</Command>
    <Syntax>tan x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Invoke the team switch dialog (force it even when conditions are not met).</Description>
    <Command>teamSwitch</Command>
    <Syntax>teamSwitch</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Check if team switch is currently enabled.</Description>
    <Command>teamSwitchEnabled</Command>
    <Syntax>teamSwitchEnabled</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Terminate (abort) the script</Description>
    <Command>terminate</Command>
    <Syntax>terminate</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>text</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (txt2 = text "Hello world.")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Creates a structured text containing the given plain text.</Description>
    <Command>text</Command>
    <Syntax>text text</Syntax>
    <ReturnValue>Structured Text</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>anything</Name>
        <Type>Any Value</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= textLog player</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>textLog</Command>
    <Syntax>textLog anything</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>x</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_tangent = tg 45 .......Result is 1)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Tangent of x, argument in degrees.</Description>
    <Command>tg</Command>
    <Syntax>tg x</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>if</Name>
        <Type>If Type</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>else</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>First or second element of array is executed depending on result of if condition. Result of the expression executed is returned as a result (result may be nothing).</Description>
    <Command>then</Command>
    <Syntax>if then else</Syntax>
    <ReturnValue>Anything</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (throw "invalid argument")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Throws an exception. The exception is processed by first catch block.</Description>
    <Command>throw</Command>
    <Syntax>throw expression</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Time elapsed since mission started (in seconds).</Description>
    <Command>time</Command>
    <Syntax>time</Syntax>
    <ReturnValue>Number</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Obsolete command.</Description>
    <Command>titleCut</Command>
    <Syntax>titleCut effect</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (titleObj ["BISLogo", "PLAIN"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Object title - argument in format ["text", "type", speed] or ["name", "type"] If speed is not given, it is assumed 1. Object can be defined in Description.ext</Description>
    <Command>titleObj</Command>
    <Syntax>titleObj effect</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (titleRsc ["BIS", "PLAIN"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Resource title - argument in format ["name", "type", speed] or ["name", "type"] If speed is not given, it is assumed 1. Resource can be defined in Description.ext Also see cutRsc, with these two commands you can show two different resources at once.</Description>
    <Command>titleRsc</Command>
    <Syntax>titleRsc effect</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>effect</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (titleText ["Show this text", "PLAIN"])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Text title - argument in format ["text", "type", speed] or ["text", "type"] If speed is not given, it is assumed 1. Also see cutText, with these two commands you can show two different texts at once (optimally with two different types).</Description>
    <Command>titleText</Command>
    <Syntax>titleText effect</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>for "_var" from a</Name>
        <Type>For Type</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>b</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (for "_x" from 10 to 20 do {..code..})</Text>
      </ExampleInfo>
    </Examples>
    <Description>Continue sequence of for command.</Description>
    <Command>to</Command>
    <Syntax>for "_var" from a to b</Syntax>
    <ReturnValue>For Type</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>objectId</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (trigger triggerAttachObject 1234)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Assigns a static object to the trigger. The activation source is changed to "STATIC".</Description>
    <Command>triggerAttachObject</Command>
    <Syntax>trigger triggerAttachObject objectId</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>trigger</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>[] or [vehicle]</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= trigger triggerAttachVehicle [player]</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>triggerAttachVehicle</Command>
    <Syntax>trigger triggerAttachVehicle [] or [vehicle]</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Always true</Description>
    <Command>true</Command>
    <Syntax>true</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>code</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Defines a try-catch structure. This sets up an Exception handling</Description>
    <Command>try</Command>
    <Syntax>try code</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>any</Name>
        <Type>Anything</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_x="hello"; typeName _x, result is "string")</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= (_x=player; typeName _x, result is "object")</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>typeName</Command>
    <Syntax>typeName any</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_class = typeOf _mi24)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the class type of a given object or vehicle.</Description>
    <Command>typeOf</Command>
    <Syntax>typeOf vehicle</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (unassignTeam soldier2)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Unassigns the vehicle (its commander unit) from his team. This is equal to vehicle assignTeam "MAIN".</Description>
    <Command>unassignTeam</Command>
    <Syntax>unassignTeam vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= unassignVehicle player</Text>
      </ExampleInfo>
    </Examples>
    <Description />
    <Command>unassignVehicle</Command>
    <Syntax>unassignVehicle unit</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>person</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return the unit position rules.</Description>
    <Command>unitPos</Command>
    <Syntax>unitPos person</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_it = unitReady soldierOne)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Check if the unit is ready. Unit is busy when it is given some command like move, until the command is finished.</Description>
    <Command>unitReady</Command>
    <Syntax>unitReady unit</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description />
    <Command>units</Command>
    <Syntax />
    <ReturnValue />
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description />
    <Command>vectorDir</Command>
    <Syntax>vectorDir obj</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>obj</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Return objects up vector in world coordinates as [x, y, z].</Description>
    <Command>vectorUp</Command>
    <Syntax>vectorUp obj</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ? vehicle player != player : hint "Player is in a vehicle"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Vehicle in which given unit is mounted. If none, unit is returned.</Description>
    <Command>vehicle</Command>
    <Syntax>vehicle unit</Syntax>
    <ReturnValue>Object</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>chatText</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= soldierOne vehicleChat "Show this text"</Text>
      </ExampleInfo>
    </Examples>
    <Description>Type text to vehicle radio channel. Note: This function only types text to the list, it does not broadcast the message. If you want the message to show on all computers, you have to execute it on them.</Description>
    <Command>vehicleChat</Command>
    <Syntax>vehicleChat</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>unit</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>radioName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (soldierOne vehicleRadio "messageOne")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Send message to vehicle radio channel. Message is defined in description.ext.</Description>
    <Command>vehicleRadio</Command>
    <Syntax>vehicleRadio</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= (_vehicles = vehicles)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return a list of vehicles in the current mission, including soldiers. It does not list soldiers which are boarded in a vehicle.</Description>
    <Command>vehicles</Command>
    <Syntax>vehicles</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Returns the name of the variable which contains a primary edtitor reference to this object. This is the variable given in the Insert Unit / name field, in the editor. It can be changed using setVehicleVarName.</Description>
    <Command>vehicleVarName</Command>
    <Syntax>vehicleVarName object</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= vector = velocity jeep</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= ? velocity carOne &gt; 50 : hint "Slow down, you are exceeding the speed limit."</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return velocity (speed vector) of vehicle as array [x, z, y].</Description>
    <Command>velocity</Command>
    <Syntax>velocity vehicle</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>filename</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Check if file is signed by an accepted key.</Description>
    <Command>verifySignature</Command>
    <Syntax>verifySignature filename</Syntax>
    <ReturnValue>Boolean</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>condition</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= waitUntil {not alive player}</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2= _i = 0; waitUntil {_i = _i + 1; _i &gt;= 100}</Text>
      </ExampleInfo>
    </Examples>
    <Description>Suspend execution of function or SQF_syntax</Description>
    <Command>waitUntil</Command>
    <Syntax>waitUntil condition</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>idStatic</Name>
        <Type>Number</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= ([grp, 2] waypointAttachObject 1234)</Text>
      </ExampleInfo>
    </Examples>
    <Description>Attaches a static object to the given waypoint.</Description>
    <Command>waypointAttachObject</Command>
    <Syntax>waypoint waypointAttachObject idStatic</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= [grp, 2] waypointAttachVehicle vehicle player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Attaches a vehicle to the given waypoint.</Description>
    <Command>waypointAttachVehicle</Command>
    <Syntax>waypoint waypointAttachVehicle vehicle</Syntax>
    <ReturnValue>Nothing</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>waypoint</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (wPos = waypointPosition [groupOne, 1])</Text>
      </ExampleInfo>
    </Examples>
    <Description>Get waypoint position. Waypoint format is Waypoint. &lt;br&gt;Note: This function is identical to getWPPos.</Description>
    <Command>waypointPosition</Command>
    <Syntax>waypointPosition waypoint</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>weaponName</Name>
        <Type>String</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= (_dir = _vehicle weaponDirection "M16")</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns the direction that the given weapon is pointing at.</Description>
    <Command>weaponDirection</Command>
    <Syntax>vehicle weaponDirection weaponName</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>vehicle</Name>
        <Type>Object</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= wArray = weapons player</Text>
      </ExampleInfo>
    </Examples>
    <Description>Returns array of names of all vehicles :Category:Weapons</Description>
    <Command>weapons</Command>
    <Syntax>weapons vehicle</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>West side.</Description>
    <Command>west</Command>
    <Syntax>west</Syntax>
    <ReturnValue>Side</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>condition</Name>
        <Type>Code</Type>
      </ParameterInfo>
    </Parameters>
    <Examples>
      <ExampleInfo>
        <Text>x1= while {x&lt;10} do {x=x+1}</Text>
      </ExampleInfo>
      <ExampleInfo>
        <Text>x2=A practical example: Repair all members of a group to such a level that they are able to stand up: {&lt;br&gt;&amp;nbsp;&amp;nbsp;while {(not canStand _x) and (alive _x)} do {&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;_x setDammage (getDammage _x) - 0.01;&lt;br&gt;&amp;nbsp;&amp;nbsp;};&lt;br&gt;} forEach units group unitname;</Text>
      </ExampleInfo>
    </Examples>
    <Description>First part of while construct.</Description>
    <Command>while</Command>
    <Syntax>while condition</Syntax>
    <ReturnValue>While Type</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples />
    <Description>Returns the current wind vector as array [x, z, y].</Description>
    <Command>wind</Command>
    <Syntax>wind</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters />
    <Examples>
      <ExampleInfo>
        <Text>x1= _name = worldName</Text>
      </ExampleInfo>
    </Examples>
    <Description>Return the name of the currently loaded world.</Description>
    <Command>worldName</Command>
    <Syntax>worldName</Syntax>
    <ReturnValue>String</ReturnValue>
  </CommandInfo>
  <CommandInfo>
    <Parameters>
      <ParameterInfo>
        <Name>object</Name>
        <Type>Object</Type>
      </ParameterInfo>
      <ParameterInfo>
        <Name>worldPos</Name>
        <Type>Array</Type>
      </ParameterInfo>
    </Parameters>
    <Examples />
    <Description>Converts position from world space to object model space.</Description>
    <Command>worldToModel</Command>
    <Syntax>object worldToModel worldPos</Syntax>
    <ReturnValue>Array</ReturnValue>
  </CommandInfo>
</ArrayOfCommandInfo>